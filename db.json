{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"themes/shoka/source/css/app.styl","path":"css/app.styl","modified":0,"renderable":1},{"_id":"themes/shoka/source/css/comment.styl","path":"css/comment.styl","modified":0,"renderable":1},{"_id":"themes/shoka/source/css/mermaid.styl","path":"css/mermaid.styl","modified":0,"renderable":1},{"_id":"themes/shoka/source/images/alipay.png","path":"images/alipay.png","modified":0,"renderable":1},{"_id":"themes/shoka/source/images/404.png","path":"images/404.png","modified":0,"renderable":1},{"_id":"themes/shoka/source/images/apple-touch-icon.png","path":"images/apple-touch-icon.png","modified":0,"renderable":1},{"_id":"themes/shoka/source/images/avatar.jpg","path":"images/avatar.jpg","modified":0,"renderable":1},{"_id":"themes/shoka/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/shoka/source/images/favicon.ico","path":"images/favicon.ico","modified":0,"renderable":1},{"_id":"themes/shoka/source/images/failure.ico","path":"images/failure.ico","modified":0,"renderable":1},{"_id":"themes/shoka/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/shoka/source/images/paypal.png","path":"images/paypal.png","modified":0,"renderable":1},{"_id":"themes/shoka/source/images/play_disc.png","path":"images/play_disc.png","modified":0,"renderable":1},{"_id":"themes/shoka/source/images/play_needle.png","path":"images/play_needle.png","modified":0,"renderable":1},{"_id":"themes/shoka/source/images/search.png","path":"images/search.png","modified":0,"renderable":1},{"_id":"themes/shoka/source/images/wechatpay.png","path":"images/wechatpay.png","modified":0,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"d81aab16fb307e5cabc5d6a6ec78ab0b1b66a78d","modified":1638173734227},{"_id":"source/_data/languages.yml","hash":"1d944fe42aef79648de9afdb81f79f7378ee216a","modified":1635860382747},{"_id":"source/_posts/.DS_Store","hash":"9b2e872a5ad76253fb1b84e5f5768ac23aa84f26","modified":1638165852598},{"_id":"source/_posts/Java并发笔记-上篇.md","hash":"9af1f1faed3c8efb4db98ff850f06969813b4474","modified":1638171269033},{"_id":"source/_posts/雪花算法.md","hash":"eac5f0bc4e75fd6bfddc5dda838daa9c0f47aa3a","modified":1637031231834},{"_id":"source/_posts/Sentinel笔记-上篇.md","hash":"e3c91d9f624427bb6bf346ac65bd093087037595","modified":1635908779269},{"_id":"source/_posts/Seata笔记.md","hash":"8e02008b4426891e6f60bbdda6dd2253f39f8e5d","modified":1637402785312},{"_id":"source/_posts/Seata笔记/seata模型流程.png","hash":"c27c87fbe1f4f803c9eb1b660997ea172372b2d1","modified":1635924893888},{"_id":"source/_posts/Java并发笔记-上篇/locksupport代码结果1.png","hash":"1d6ce270039b0917e0a491a017ab348439e271cd","modified":1637025775213},{"_id":"source/_posts/Java并发笔记-上篇/locksupport代码结果2.png","hash":"d509c9de609b09930a83ea9ead442fc43b6a28a7","modified":1637026276673},{"_id":"source/_posts/Java并发笔记-上篇/locksupport代码结果3.png","hash":"209c60e2319cadee5395343d96fb24fc8902962f","modified":1637027743558},{"_id":"source/_posts/Java并发笔记-上篇/locksupport代码结果4.png","hash":"8a86dd495bf3b84ca84e9318f629e6f89fa184a7","modified":1637028031424},{"_id":"source/_posts/Seata笔记/seata架构.png","hash":"e21567eee3e494e0159a0d5d4a76d6eea77577d2","modified":1635924420206},{"_id":"source/_posts/Java并发笔记-上篇/locksupport代码结果5.png","hash":"c0aba224f633f9aceecf7e86f221e93897790ae3","modified":1637028210101},{"_id":"source/_posts/雪花算法/雪花算法原理.png","hash":"5c7fca2061e94dba847dfc8072555599c76b1bc7","modified":1636082284084},{"_id":"source/_posts/Seata笔记/未加全局事务的数据库情况.png","hash":"0548da5d938a15e3b4b473fed0e6468c96fdef07","modified":1635925006263},{"_id":"source/_posts/Seata笔记/事务二阶段执行流程.png","hash":"cfea30f7e61e2d0f84e151533547e7aaa84a1b08","modified":1635925090214},{"_id":"source/_posts/雪花算法/代码效果图.png","hash":"e5c2302cbdb91438e66987f436b73a47bfd814c5","modified":1636084493268},{"_id":"themes/shoka/LICENSE","hash":"64ce70bfac4eb5d7b3d55f220f6fc8fb61e94461","modified":1635858140188},{"_id":"themes/shoka/package.json","hash":"65b4458e1b9e8b3ee9a268e51312b9811d4edbc7","modified":1635858154108},{"_id":"themes/shoka/README.md","hash":"31245e7df1b69b6b1bfeb5a62686dec762b3e3b4","modified":1635858140209},{"_id":"themes/shoka/_config.yml","hash":"c47809709d86e402b306fc2f123e3e7c7dd54771","modified":1635938241654},{"_id":"themes/shoka/_images.yml","hash":"e091562d03506c08e05887cff04eb9f69cf2f504","modified":1635858140265},{"_id":"themes/shoka/example/_config.shoka.yml","hash":"aaad535f5fa11929dc882e3a77859ae8588344ae","modified":1635858140297},{"_id":"themes/shoka/example/package.json","hash":"41faaf74c9feab9cdfe0fe1551fa0f784ffb926f","modified":1635858140339},{"_id":"themes/shoka/example/_config.yml","hash":"b4f179c622ff673729f3cdba3cde69ded750b776","modified":1635858140318},{"_id":"themes/shoka/layout/archive.njk","hash":"ec7077303a4afa9600aa94286a6132b1376742e0","modified":1635858153970},{"_id":"themes/shoka/layout/category.njk","hash":"ebc83df1ff0115e003e5a3e6a04278ff3ec63acf","modified":1635858153991},{"_id":"themes/shoka/layout/page.njk","hash":"b22327cb7ea5daf1cf095da70b8376c9cd89e70b","modified":1635858154034},{"_id":"themes/shoka/layout/index.njk","hash":"72bf1a78d915fd63b9664181c7deb9a87e1f7f67","modified":1635858154013},{"_id":"themes/shoka/layout/tag.njk","hash":"6dc9840915842de3ab7f844171696b8147e6c65f","modified":1635858154076},{"_id":"themes/shoka/layout/post.njk","hash":"9344c9bc310ac6a9dd7d1c8abbd3a3e4de1ec766","modified":1635858154055},{"_id":"themes/shoka/languages/README.md","hash":"121a3ffd4db36ca68a52214b292110e589c068de","modified":1635858153110},{"_id":"themes/shoka/languages/en.yml","hash":"7481bcd748a0bc7359763f2a024c62a439cf017b","modified":1635858153165},{"_id":"themes/shoka/languages/zh-CN.yml","hash":"286d02a984ffc85123be119f66eb3df6991ce0b9","modified":1635858153207},{"_id":"themes/shoka/languages/zh-TW.yml","hash":"41321b5f3fb9b6d5b789f3ab14201ecc9981ddda","modified":1635858153249},{"_id":"themes/shoka/languages/default.yml","hash":"9107d4b03be45561a407981dd08f49816963e365","modified":1635858153131},{"_id":"themes/shoka/languages/ja.yml","hash":"97a3c8561e4c6e6fd37708276147ddcc5009176d","modified":1635858153186},{"_id":"themes/shoka/languages/zh-HK.yml","hash":"5c73a4dbb3bc99817bf1f2c9b438c2913cc5b0b9","modified":1635858153228},{"_id":"themes/shoka/layout/_alternate/atom.ejs","hash":"b9763bc59b0e18ec13c2c9b90bc1be9e34da166a","modified":1635858153302},{"_id":"themes/shoka/layout/_alternate/rss.ejs","hash":"ed5c14dc38bd24ede842c7b2356176d20e759c56","modified":1635858153345},{"_id":"themes/shoka/layout/_alternate/json.ejs","hash":"343b618ee9b16da33b51280c2fab42ad29ae39eb","modified":1635858153323},{"_id":"themes/shoka/layout/_partials/footer.njk","hash":"09600bea242ea731820d18ef1a9b0346e22dc82f","modified":1635858153562},{"_id":"themes/shoka/layout/_partials/header.njk","hash":"7f7a94261afbad87bca7901c9790907137f35293","modified":1635858153648},{"_id":"themes/shoka/layout/_partials/layout.njk","hash":"0c3d3aee4da15bdfe39e502a0713f9e4d3ae6cf8","modified":1635858153670},{"_id":"themes/shoka/layout/_partials/pagination.njk","hash":"8960c767d3c5a7beaef5f6040310c3776b757f03","modified":1635858153692},{"_id":"themes/shoka/layout/_macro/breadcrumb.njk","hash":"1c464f539d3349baf1e2b4fcc1383ee90d964287","modified":1635858153392},{"_id":"themes/shoka/layout/_macro/card.njk","hash":"d189b55fa55a83af1bec2d1f822b8827b0f81c01","modified":1635858153413},{"_id":"themes/shoka/layout/_macro/comment.njk","hash":"7331492119ccaf0ed3034f6118a01f31426be972","modified":1635858153434},{"_id":"themes/shoka/layout/_macro/postmeta.njk","hash":"0f2d1cbcca2ad19186b90a6db08a5159407a3178","modified":1635858153455},{"_id":"themes/shoka/scripts/filters/locals.js","hash":"45c5c30d70b033edd7595d4cb847b7c4ccbf81de","modified":1635858157166},{"_id":"themes/shoka/layout/_macro/segment.njk","hash":"532df83485ee9bab7a9c919058d3ab7be65c3f18","modified":1635858153476},{"_id":"themes/shoka/scripts/filters/post.js","hash":"37cc926d7d11e6c2ecc14785ae32140541d0fd43","modified":1635858157186},{"_id":"themes/shoka/scripts/tags/media.js","hash":"ca4ae726a4a585b17998aa43b1975da7ca590cc1","modified":1635858157537},{"_id":"themes/shoka/layout/_macro/sidebar.njk","hash":"e7fada626a89769f9f8b4d94efb702ab5ff0f138","modified":1635858153497},{"_id":"themes/shoka/scripts/tags/links.js","hash":"16349da915f03d5b3bdc0efbb1eb1c88aa4db3d1","modified":1635858157517},{"_id":"themes/shoka/scripts/generaters/archive.js","hash":"a548c9ca74c6757382a306f0b1e54c5400429083","modified":1635858157231},{"_id":"themes/shoka/layout/_macro/widgets.njk","hash":"5abd33cb1febd7b27ca050ba75aa0966c4f89d53","modified":1635858153520},{"_id":"themes/shoka/scripts/generaters/config.js","hash":"e957d60c0e0265cc31eb7e8bfe71ff457c458d11","modified":1635858157253},{"_id":"themes/shoka/scripts/generaters/images.js","hash":"c16389f4e64434f8c91ac6a0a4da607a274f7321","modified":1635858157275},{"_id":"themes/shoka/scripts/generaters/pages.js","hash":"b83097275b0327b0c1e0ebfb2a40640c8096c088","modified":1635858157317},{"_id":"themes/shoka/scripts/generaters/script.js","hash":"7994f9842ec8734fc6db516c5b8b7820896341ec","modified":1635858157338},{"_id":"themes/shoka/scripts/generaters/index.js","hash":"b9148d7457ad11946334c321fa35d911f347425a","modified":1635858157296},{"_id":"themes/shoka/scripts/helpers/asset.js","hash":"93fa2f7c40491d3175621b5ef0aaa174b528bcd9","modified":1635858157387},{"_id":"themes/shoka/scripts/helpers/list_categories.js","hash":"5a1a2a51731c2a1d45173bd7bfb5c5e3fc46eddf","modified":1635858157429},{"_id":"themes/shoka/scripts/renderer/njk.js","hash":"f3e76bdb1aabc7a04fda4c123b598fa2c24dfc46","modified":1635858157474},{"_id":"themes/shoka/scripts/helpers/engine.js","hash":"4b2c5cedf96a4ab57668f4c3066de9d2c4abb01c","modified":1635858157409},{"_id":"themes/shoka/source/css/_colors.styl","hash":"42a556c1544394b4cd0a3ce526c9a30b08d5952e","modified":1635858157605},{"_id":"themes/shoka/source/css/_mixins.styl","hash":"858e238acb07a242f901f1b59f69d323c83bf5ea","modified":1635858159620},{"_id":"themes/shoka/source/css/_iconfont.styl","hash":"af1619072315acc24b11b2dd71a8335f5d466d2c","modified":1635858159599},{"_id":"themes/shoka/source/css/_variables.styl","hash":"36069cddfa7d3f2d852d20c9e0e9ebf947e7e287","modified":1635858159642},{"_id":"themes/shoka/source/css/app.styl","hash":"46312264dc3878bc2bd54e6d7171081bfa7477d6","modified":1635858159663},{"_id":"themes/shoka/source/css/comment.styl","hash":"e83d7dfc7b789342050a41ba5a8482f0875c18bc","modified":1635858159684},{"_id":"themes/shoka/source/css/mermaid.styl","hash":"7720ca8fc84b975d95fd11d7971f125aa3062a23","modified":1635858159705},{"_id":"themes/shoka/source/images/404.png","hash":"b7b18f6689d0a14041d87bab6c4e4ce567249d01","modified":1635858159758},{"_id":"themes/shoka/source/images/alipay.png","hash":"013436bac325a3a0c2c9b13a08312fc4e7025d69","modified":1635858159831},{"_id":"themes/shoka/source/images/apple-touch-icon.png","hash":"d4e5d65ff663cb71f43515e68d757cbae1ceb3ec","modified":1635858159867},{"_id":"themes/shoka/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1635858159780},{"_id":"themes/shoka/source/images/favicon.ico","hash":"8ae48d9e33b7593cd005aae88b755aa9ce129f0e","modified":1635858159969},{"_id":"themes/shoka/source/images/failure.ico","hash":"5eec5c163400d8ece74286da49130da1ead3f6f6","modified":1635858159947},{"_id":"themes/shoka/source/images/avatar.jpg","hash":"93af0fd2ee6322c5c77760eefba6c81afa2e313e","modified":1635858159924},{"_id":"themes/shoka/source/images/logo.svg","hash":"48014a7148fde766848eb4701c8df421a17cb74b","modified":1635858159991},{"_id":"themes/shoka/source/images/paypal.png","hash":"872d4b6d3cacee4845246fbf29817f1ee98bb037","modified":1635858160024},{"_id":"themes/shoka/source/images/play_needle.png","hash":"e0998828ab50ce37617f9f4d46b74648206ac852","modified":1635858160069},{"_id":"themes/shoka/source/images/play_disc.png","hash":"3cfa8dd2e12424c52d1f5e34e9502e446fecde9c","modified":1635858160048},{"_id":"themes/shoka/source/images/search.png","hash":"08c4f6a7a92eff3548aec94b267a23a25e6bd215","modified":1635858160093},{"_id":"themes/shoka/example/source/_data/colors.styl","hash":"f086d11a45d14a3b8454b98b11fbe347f097835d","modified":1635858140382},{"_id":"themes/shoka/source/images/wechatpay.png","hash":"470a42ee16dd516580d5e51607f11dc353a49675","modified":1635858160126},{"_id":"themes/shoka/example/source/_data/custom.styl","hash":"a6107618e68ea2735eabfc6d09aec2b6ff61f9fb","modified":1635858140405},{"_id":"themes/shoka/example/source/_data/images.yml","hash":"e091562d03506c08e05887cff04eb9f69cf2f504","modified":1635858140463},{"_id":"themes/shoka/example/source/_data/iconfont.styl","hash":"45d1f2d09e3769ffe8d371a314d345b70b00015a","modified":1635858140426},{"_id":"themes/shoka/example/source/_data/languages.yml","hash":"b6b8b07073cab641e99fe0706345dc72d24dade3","modified":1635858140484},{"_id":"themes/shoka/example/source/_posts/code-highlight.md","hash":"334e0e84be834318e2b00fc0ef665e49d59ec47f","modified":1635858140548},{"_id":"themes/shoka/example/source/_posts/categories.md","hash":"c023118431e400a213f568fd572d2da1eb42bff4","modified":1635858140526},{"_id":"themes/shoka/example/source/_posts/elements.md","hash":"c74ed1974348870b22053f4ef56623be9f548a7e","modified":1635858141672},{"_id":"themes/shoka/example/source/_posts/excerpts.md","hash":"64dabd6382092c9424de013e1b1e24be2a6d73b8","modified":1635858141693},{"_id":"themes/shoka/example/source/_posts/gallery-post.md","hash":"9d45e961f22be7accb472fc96fb27988689f8575","modified":1635858141713},{"_id":"themes/shoka/example/source/_posts/images.md","hash":"84306a949d26a0ed97073520bc7969de363e6750","modified":1635858141755},{"_id":"themes/shoka/example/source/_posts/hello-world.md","hash":"56fc3161a3ab82f4e1ad79575e3ad5ab85275150","modified":1635858141734},{"_id":"themes/shoka/example/source/_posts/link-post-without-title.md","hash":"13d0c37796245a515dfcee056beea17ed8050c63","modified":1635858141778},{"_id":"themes/shoka/example/source/_posts/link-post.md","hash":"66ce534bb1346f941cfd282de2c8beaf41f8d963","modified":1635858141807},{"_id":"themes/shoka/example/source/_posts/long-title.md","hash":"0d101b388a23e6609c121ff00b4dfd14df1e9938","modified":1635858141829},{"_id":"themes/shoka/example/source/_posts/no-title.md","hash":"77ac3cd146d1a851f7f42e2f3f3488da37b129de","modified":1635858141883},{"_id":"themes/shoka/example/source/_posts/markdown.md","hash":"390c6ee8c55abe364e1c4728045b6c995266d770","modified":1635858141862},{"_id":"themes/shoka/example/source/_posts/tag-plugins.md","hash":"668f6e9c831c3eb353d64654676231d69f8e511e","modified":1635858141910},{"_id":"themes/shoka/example/source/_posts/tags.md","hash":"22452f7286e135658aabe870143c5550e5648143","modified":1635858141931},{"_id":"themes/shoka/example/source/_posts/中文測試.md","hash":"dc6e9310fa1c331bd61c63aef7c8a87dfa18b8cd","modified":1635858141973},{"_id":"themes/shoka/example/source/_posts/videos.md","hash":"c52593a7e5a49b894003cc92446b5be194c1edf4","modified":1635858141952},{"_id":"themes/shoka/example/source/_posts/日本語テスト.md","hash":"9dde036d1b8caff86e1155c3df3283a9f55996e3","modified":1635858141996},{"_id":"themes/shoka/example/source/friends/_data.yml","hash":"501be211d5f02bfd1a95a80f5e04a0fff5173a16","modified":1635858153025},{"_id":"themes/shoka/example/source/friends/index.md","hash":"b4a314357a650429ceb8b6d62b0bd54bf6289a8a","modified":1635858153046},{"_id":"themes/shoka/layout/_partials/head/head.njk","hash":"d02e0ddada3e6c4b4420a5386bc1304031b702a2","modified":1635858153595},{"_id":"themes/shoka/layout/_partials/head/head_unique.njk","hash":"953812d48987b3491ea011d2b50cf7bef07f3742","modified":1635858153616},{"_id":"themes/shoka/layout/_partials/sidebar/menu.njk","hash":"6137a83379a61af0eef4d6f92e15f0d488c9f36c","modified":1635858153852},{"_id":"themes/shoka/layout/_partials/sidebar/overview.njk","hash":"11bab5261ce71de61cdad88db1351269ddb58946","modified":1635858153884},{"_id":"themes/shoka/layout/_partials/post/footer.njk","hash":"b0c1cfe766b82551939c52197473adbdf5e33401","modified":1635858153745},{"_id":"themes/shoka/layout/_partials/post/copyright.njk","hash":"608d2f2f8dccf2ad2fb1ac428f1c11446058101e","modified":1635858153724},{"_id":"themes/shoka/layout/_partials/post/nav.njk","hash":"964963a15cc242b34310858ae14bd1a0bed06fe5","modified":1635858153766},{"_id":"themes/shoka/layout/_partials/post/post.njk","hash":"8ed321922aae0a078dc0e1ec49a619dd1b222017","modified":1635858153787},{"_id":"themes/shoka/layout/_partials/post/reward.njk","hash":"38f0a30361d6354b3a44183a12497c4e31861017","modified":1635858153808},{"_id":"themes/shoka/layout/_partials/third-party/baidu-analytics.njk","hash":"a22788fbc12186ddd8bbd963146177cdaa95646c","modified":1635858153928},{"_id":"themes/shoka/source/js/_app/dom.js","hash":"a917bfdae26c263cb9de962f88b11502907d9eb7","modified":1635858160179},{"_id":"themes/shoka/source/js/_app/page.js","hash":"58e0eba9d70c92d61b41024d4f03fadcf5fa7873","modified":1635858160247},{"_id":"themes/shoka/source/js/_app/fireworks.js","hash":"077572d0714b5c6801ae4598df7a85936296a77a","modified":1635858160202},{"_id":"themes/shoka/source/js/_app/global.js","hash":"54b49931de5153e9176c47faa35c172e60c7d450","modified":1635858160224},{"_id":"themes/shoka/source/js/_app/pjax.js","hash":"2364ec1d3ed0e76045af015843cfbef5db6a3eb1","modified":1635858160268},{"_id":"themes/shoka/source/css/_common/components/components.styl","hash":"1abcd0854142d1415af647c3d6b5d33de505d00d","modified":1635858157648},{"_id":"themes/shoka/source/js/_app/player.js","hash":"8ae60451ad0dc19699f5a9a54d00924a04c6d588","modified":1635858160357},{"_id":"themes/shoka/source/js/_app/sidebar.js","hash":"b24c660bb79a376f8daf7a00984db990a544581d","modified":1635858160637},{"_id":"themes/shoka/source/js/_app/utils.js","hash":"2f01f5b4dde29324e678c8e6c7800e32e489b8fe","modified":1635858160663},{"_id":"themes/shoka/source/css/_common/outline/outline.styl","hash":"8e1c6ac3fc4f36b710090d9ceecdc91af8af5a67","modified":1635858159010},{"_id":"themes/shoka/source/css/_common/outline/mobile.styl","hash":"3dd4a95737f28d93f18b5c1fdd4ab9675871e89b","modified":1635858158989},{"_id":"themes/shoka/source/css/_common/scaffolding/animate.styl","hash":"3bdb5855ccc98b11d8810ead8c082bcaf5f39360","modified":1635858159290},{"_id":"themes/shoka/source/css/_common/scaffolding/base.styl","hash":"c0612edeb3ec3758f4826c2ca5dadb8c28df7086","modified":1635858159313},{"_id":"themes/shoka/source/css/_common/scaffolding/buttons.styl","hash":"aab14e7fe7c466576b3d70c741d2526364d07874","modified":1635858159336},{"_id":"themes/shoka/source/css/_common/scaffolding/divider.styl","hash":"c2dfeadb72a7c898a455e163f11ee17c6b3941bb","modified":1635858159357},{"_id":"themes/shoka/source/css/_common/scaffolding/normalize.styl","hash":"27e12cd7619f80f0df4761201d1b6b9366262270","modified":1635858159402},{"_id":"themes/shoka/source/css/_common/scaffolding/iconfont.styl","hash":"45d1f2d09e3769ffe8d371a314d345b70b00015a","modified":1635858159380},{"_id":"themes/shoka/source/css/_common/scaffolding/pagination.styl","hash":"7632764beb8d937ec6a4dcf08a9b5e9a2d904845","modified":1635858159424},{"_id":"themes/shoka/source/css/_common/scaffolding/scaffolding.styl","hash":"2a54e8ddf6cf14fec00b010d5ced577670bd8027","modified":1635858159468},{"_id":"themes/shoka/source/css/_common/scaffolding/ribbon.styl","hash":"3ccaed5ca1497c0b6eeaaafb777db9c67ce2121e","modified":1635858159445},{"_id":"themes/shoka/source/css/_common/scaffolding/scrollbar.styl","hash":"0b65e121550b1c816e021f23a54f161a30ab29a2","modified":1635858159489},{"_id":"themes/shoka/source/css/_common/scaffolding/tables.styl","hash":"64e746ba8498b407cb122ea8f0c0f82108388e12","modified":1635858159511},{"_id":"themes/shoka/source/css/_common/scaffolding/tip.styl","hash":"0247e72526f99d92b2d44c15aa626742873caa3c","modified":1635858159532},{"_id":"themes/shoka/source/css/_common/scaffolding/toggles.styl","hash":"06d2c4b90c83e34ada52fb24c23a3619edd8f784","modified":1635858159553},{"_id":"themes/shoka/source/css/_common/components/highlight/highlight.styl","hash":"b47eea33d53ad8a4e47c56e0005c92473dff669e","modified":1635858157682},{"_id":"themes/shoka/source/css/_common/components/highlight/operation.styl","hash":"a231b09682dedd2c5aae41995d2e7292ffc2cf9b","modified":1635858157703},{"_id":"themes/shoka/source/css/_common/components/pages/collapse.styl","hash":"6706bdf8e3124cd786e628602bb8078cfe302a4b","modified":1635858157747},{"_id":"themes/shoka/source/css/_common/components/pages/pages.styl","hash":"18732826b68efdf1e4fa85a3f92b101bfaff0b1f","modified":1635858157792},{"_id":"themes/shoka/source/css/_common/components/pages/tag-cloud.styl","hash":"a890a98b78270e32990604dcd34e8f5cd5aca036","modified":1635858157813},{"_id":"themes/shoka/source/css/_common/components/pages/home.styl","hash":"2a06041021d0e77fe850b46898a18c48d528205e","modified":1635858157770},{"_id":"themes/shoka/example/source/_posts/computer-science/note/theme-shoka-doc.md","hash":"ad6511b92dc58a871ab183d3f4f2c82317112741","modified":1635858141157},{"_id":"themes/shoka/source/css/_common/components/post/breadcrumb.styl","hash":"b7b3ff728fff411639402f9951ce14a88e6a20f6","modified":1635858157858},{"_id":"themes/shoka/example/source/_posts/computer-science/note/cover.jpg","hash":"6d077a7330284d0fb2b79e96d7e5b56121395df3","modified":1635858141135},{"_id":"themes/shoka/source/css/_common/components/post/expand.styl","hash":"c678e85312309c4f95ac14a2371bf506477dc657","modified":1635858157911},{"_id":"themes/shoka/source/css/_common/components/post/copyright.styl","hash":"c5f9fd384e5682eea88258a2307b4bc8875cfb5c","modified":1635858157889},{"_id":"themes/shoka/source/css/_common/components/post/footer.styl","hash":"634268e1f4e75858a98ebf4253026455a4458d23","modified":1635858157933},{"_id":"themes/shoka/source/css/_common/components/post/header.styl","hash":"0309d9d3a2c7a511faf2b0881932b4bac7144e25","modified":1635858157954},{"_id":"themes/shoka/source/css/_common/components/post/nav.styl","hash":"95d2cc80341875e25765d029df5b5324f6cc390a","modified":1635858157977},{"_id":"themes/shoka/source/css/_common/components/post/reward.styl","hash":"3a4f5c15bee5da47bc914550439d26c80549df13","modified":1635858158024},{"_id":"themes/shoka/source/css/_common/components/post/post.styl","hash":"0861df864b8afb32fb8160d25e5c9d63adccbf3c","modified":1635858157999},{"_id":"themes/shoka/source/css/_common/components/post/rtl.styl","hash":"d909dcbc0e61358a5804161470ac9064049f1a36","modified":1635858158044},{"_id":"themes/shoka/source/css/_common/components/post/tags.styl","hash":"68d4e96d15ca62a89665421ff01f57265e707a7a","modified":1635858158066},{"_id":"themes/shoka/source/css/_common/components/third-party/loading.styl","hash":"551c60b7597160aaebe9f7b0c2efc5b1f5aad124","modified":1635858158345},{"_id":"themes/shoka/source/css/_common/components/third-party/pace.styl","hash":"15371614ff30edb87768bce771aecc6fc99f17a4","modified":1635858158561},{"_id":"themes/shoka/source/css/_common/components/third-party/search.styl","hash":"dbc0a97e86e94c771112bbdb0ce8f20fb714dca8","modified":1635858158585},{"_id":"themes/shoka/source/css/_common/components/third-party/theme.styl","hash":"ce162fa39cad04e41de2bd1aa491fd442f678cf6","modified":1635858158609},{"_id":"themes/shoka/source/css/_common/components/third-party/third-party.styl","hash":"b496991b13c1c48972addf19f0a5ba9ab6887f8a","modified":1635858158630},{"_id":"themes/shoka/source/css/_common/components/third-party/valine.styl","hash":"9263dd35f48a0ee2c5a30e68ded287c7a7c9761d","modified":1635858158662},{"_id":"themes/shoka/source/css/_common/components/third-party/widgets.styl","hash":"cdbd2b2d8d76216de2753c44eee3f134a81332c0","modified":1635858158684},{"_id":"themes/shoka/source/css/_common/components/tags/collapse.styl","hash":"aae4f6d940ce0c52595bda79c4f7b5231ec9e35f","modified":1635858158110},{"_id":"themes/shoka/source/css/_common/components/tags/container.styl","hash":"6b157b774e634c0c031bab392031df0996f0a62c","modified":1635858158131},{"_id":"themes/shoka/source/css/_common/components/tags/label.styl","hash":"f7976cbdc69b577264f1737f1d2bd8996ed72a46","modified":1635858158152},{"_id":"themes/shoka/source/css/_common/components/tags/links.styl","hash":"d90e56e9b21b15af5b78f824b033e52b13383fec","modified":1635858158175},{"_id":"themes/shoka/source/css/_common/components/tags/list.styl","hash":"47e91f89615c1a9744358140314739b4074c315b","modified":1635858158196},{"_id":"themes/shoka/source/css/_common/components/tags/player.styl","hash":"8327815a17b617fe1e6dc67cbd713f4c559f57ea","modified":1635858158238},{"_id":"themes/shoka/source/css/_common/components/tags/note.styl","hash":"f358448cfe80b9641492dacc1e5c9027f6a6165f","modified":1635858158217},{"_id":"themes/shoka/source/css/_common/components/tags/quiz.styl","hash":"9a278ff96538168a288066f979d98e751d0868f0","modified":1635858158259},{"_id":"themes/shoka/source/css/_common/components/tags/tabs.styl","hash":"fd1d793c9532c14a44312743b66c163440c533f9","modified":1635858158280},{"_id":"themes/shoka/source/css/_common/components/tags/tags.styl","hash":"b397ce0eb2bec9dcc2e6f7f770ea351eba0b3403","modified":1635858158302},{"_id":"themes/shoka/source/css/_common/outline/header/brand.styl","hash":"907482ef812c0c6bfe0aa97bda5b615e5d866364","modified":1635858158792},{"_id":"themes/shoka/source/css/_common/outline/footer/footer.styl","hash":"f3a1ebc96370ba9eab412ff646f2720981befff0","modified":1635858158749},{"_id":"themes/shoka/source/css/_common/outline/header/header.styl","hash":"9d953fbcb959ebace0a2ab9f7cf022261c0adaa5","modified":1635858158814},{"_id":"themes/shoka/source/css/_common/outline/header/image.styl","hash":"dbb15a0f85fba918f8e4842be4f88278685d9e5a","modified":1635858158839},{"_id":"themes/shoka/source/css/_common/outline/header/menu.styl","hash":"b7afe5c76314d61fc69b62dbeb4717058484b0d9","modified":1635858158860},{"_id":"themes/shoka/source/css/_common/outline/header/nav.styl","hash":"0a135615fa1f8161c5bdbfb46351b85bb565e2f3","modified":1635858158882},{"_id":"themes/shoka/source/css/_common/outline/header/right.styl","hash":"eace1eeb80bb6af6a87735d5adf0b1a9c4cc8ada","modified":1635858158913},{"_id":"themes/shoka/source/css/_common/outline/header/tool.styl","hash":"4c90c6c5daee084b8741c106012618fe9f7dbd23","modified":1635858158935},{"_id":"themes/shoka/source/css/_common/outline/header/waves.styl","hash":"d3e90e31be3f2fad345acaaa4822dd9995ad17a3","modified":1635858158956},{"_id":"themes/shoka/source/css/_common/outline/sidebar/dimmer.styl","hash":"373baf0c5e50363e7c60c53ccfed32ef565c38c7","modified":1635858159062},{"_id":"themes/shoka/source/css/_common/outline/sidebar/author.styl","hash":"0d16286549a33c762664e89aecb18eaa4eb330b0","modified":1635858159041},{"_id":"themes/shoka/source/css/_common/outline/sidebar/menu.styl","hash":"52f318a35ffe38657fbe23e5ef3f7433bf11dadc","modified":1635858159085},{"_id":"themes/shoka/source/css/_common/outline/sidebar/quick.styl","hash":"3da1dc88d42050e44f4e76daa41d2a5befeffa22","modified":1635858159108},{"_id":"themes/shoka/source/css/_common/outline/sidebar/related.styl","hash":"71496a1be370db66843e2661e5594a6a1898c3c6","modified":1635858159130},{"_id":"themes/shoka/source/css/_common/outline/sidebar/sidebar.styl","hash":"740535dece990c2e4ae56e2e5aac7cea8c099b18","modified":1635858159151},{"_id":"themes/shoka/source/css/_common/outline/sidebar/social.styl","hash":"4854aec659aac752b60836eef4aeae0e1312ff82","modified":1635858159172},{"_id":"themes/shoka/source/css/_common/outline/sidebar/state.styl","hash":"e54b26894d3c63032b9be7d7e0f63feb3bd3a20a","modified":1635858159192},{"_id":"themes/shoka/source/css/_common/outline/sidebar/tab.styl","hash":"5aff5ddcc8d0bf4df33de7a4919e0aa040a40ca2","modified":1635858159216},{"_id":"themes/shoka/source/css/_common/outline/sidebar/toc.styl","hash":"e431443ddfc83aa39dd28e3ce645529694a3e266","modified":1635858159237},{"_id":"themes/shoka/example/source/_posts/computer-science/java/course-1/week-1.md","hash":"6bd9d2d2776d899bb2e66ef4a69ad50f1de1e0ce","modified":1635858140661},{"_id":"themes/shoka/example/source/_posts/computer-science/java/course-1/cover.jpg","hash":"57341ddf90eeb71d0b9a3fef8cf1f094f9c299b3","modified":1635858140639},{"_id":"themes/shoka/example/source/_posts/computer-science/java/course-1/week-2.md","hash":"acec1f17433bf7b50af88bb02835381924b0ac7b","modified":1635858140683},{"_id":"themes/shoka/example/source/_posts/computer-science/note/theme-shoka-doc/config.md","hash":"1e23aeabba28109b702e1f584d4b81b68dcf322f","modified":1635858141199},{"_id":"themes/shoka/example/source/_posts/computer-science/note/theme-shoka-doc/dependents.md","hash":"3fc238f649d14b31d6b8d9c8dfa650cf2b939970","modified":1635858141220},{"_id":"themes/shoka/example/source/_posts/computer-science/note/theme-shoka-doc/display.md","hash":"185ff5a5262346ed2bb1a5430f959bfc6b1d0341","modified":1635858141309},{"_id":"themes/shoka/source/css/_common/components/third-party/mermaid/class.styl","hash":"e942b2308a788865b451fbc2cf1718dcdf93299e","modified":1635858158380},{"_id":"themes/shoka/source/css/_common/components/third-party/mermaid/flowchart.styl","hash":"85f5d3f3da9d86fcf9999f3af1e1b837d55206af","modified":1635858158400},{"_id":"themes/shoka/example/source/_posts/computer-science/note/theme-shoka-doc/special.md","hash":"67ed36fae1ea3029cc9fdbda0a16ee7053943cf1","modified":1635858141616},{"_id":"themes/shoka/source/css/_common/components/third-party/mermaid/gantt.styl","hash":"61c66a462b78a836226a2d8debb945aa5b3b3429","modified":1635858158421},{"_id":"themes/shoka/source/css/_common/components/third-party/mermaid/sequence.styl","hash":"8630ac2eb00713109d885143b9d0776d1e8a6e1c","modified":1635858158507},{"_id":"themes/shoka/source/css/_common/components/third-party/mermaid/git.styl","hash":"19b6b3c75dac1426d75c81fa1bf0da7482fcde96","modified":1635858158443},{"_id":"themes/shoka/source/css/_common/components/third-party/mermaid/state.styl","hash":"5c03ccd22355e159169c341616b2e157516825a3","modified":1635858158530},{"_id":"themes/shoka/source/css/_common/components/third-party/mermaid/pie.styl","hash":"8da616dcd22b4f2619d817b0cf4986d0aa66954d","modified":1635858158485},{"_id":"themes/shoka/source/css/_common/components/third-party/mermaid/mermaid.styl","hash":"4dc498f13fb656711d5e2acc9b6d48cbdd747609","modified":1635858158464},{"_id":"themes/shoka/example/source/assets/wallpaper-2572384.jpg","hash":"1df3620ab8c69fe2498a746f8ead057162df0637","modified":1635858148539},{"_id":"themes/shoka/screenshot.png","hash":"676ab8bfe3fa106e5b88617ab377cd6b438cc0d9","modified":1635858157121},{"_id":"themes/shoka/example/source/assets/wallpaper-878514.jpg","hash":"9f9705a377c42320b335b3c66b023e62b80e56e3","modified":1635858152983},{"_id":"themes/shoka/example/source/assets/wallpaper-2311325.jpg","hash":"ddaaaeb4fa04a05c83053c1f8149720d18c9c8de","modified":1635858146966},{"_id":"public/rss.xml","hash":"b23be51344d53a9dfa4c730f2b06cd53784180b1","modified":1638173862090},{"_id":"public/atom.xml","hash":"7298ac47b2f7a9867e6c3c3e1fa161d1ab0a73c7","modified":1638173862090},{"_id":"public/feed.json","hash":"0252779ed1537953c57e9df9ba62892d95d536b2","modified":1638173862090},{"_id":"public/2021/11/03/Sentinel笔记-上篇/index.html","hash":"b93447d2772f93b8c27c1c528825f864c52c0486","modified":1638173862090},{"_id":"public/archives/index.html","hash":"bae59fd9e6eac6b651fcb35c718d191d82cf7a99","modified":1638173862090},{"_id":"public/archives/2021/index.html","hash":"b06822bc0ca56add3b5623ffbe18d9477fc28ceb","modified":1638173862090},{"_id":"public/archives/2021/11/index.html","hash":"94296da8c57652ee1ca53b282f8fad07e86023b8","modified":1638173862090},{"_id":"public/categories/index.html","hash":"372f814fcc9449b935de39a2f199a2f53ff483fb","modified":1638173862090},{"_id":"public/tags/index.html","hash":"25374316242b53806dc3977a15164bbe8ec78a55","modified":1638173862090},{"_id":"public/404.html","hash":"c6f19ee8d38a455152796ff8449c83b9c38f47d4","modified":1638173862090},{"_id":"public/js/app.js","hash":"7ec1b96df05a4b7cf3278176fc401d8ea9fa3b7b","modified":1637031252732},{"_id":"public/2021/11/16/Java并发笔记-上篇/index.html","hash":"86231082930a5dfb408d5d244a857c787a50c157","modified":1638173862090},{"_id":"public/2021/11/05/雪花算法/index.html","hash":"98dccc0eab0a26dd6f0a4c6ea17bb3b495a93f18","modified":1638173862090},{"_id":"public/2021/11/03/Seata笔记/index.html","hash":"8eb6baa692660bb3d5af4c53435896198f9c337a","modified":1638173862090},{"_id":"public/index.html","hash":"fed53b3c56450db4436e41508b352c2434642ccf","modified":1638173862090},{"_id":"public/images/alipay.png","hash":"013436bac325a3a0c2c9b13a08312fc4e7025d69","modified":1637031252732},{"_id":"public/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1637031252732},{"_id":"public/images/apple-touch-icon.png","hash":"d4e5d65ff663cb71f43515e68d757cbae1ceb3ec","modified":1637031252732},{"_id":"public/images/avatar.jpg","hash":"93af0fd2ee6322c5c77760eefba6c81afa2e313e","modified":1637031252732},{"_id":"public/images/404.png","hash":"b7b18f6689d0a14041d87bab6c4e4ce567249d01","modified":1637031252732},{"_id":"public/images/favicon.ico","hash":"8ae48d9e33b7593cd005aae88b755aa9ce129f0e","modified":1637031252732},{"_id":"public/images/failure.ico","hash":"5eec5c163400d8ece74286da49130da1ead3f6f6","modified":1637031252732},{"_id":"public/images/logo.svg","hash":"48014a7148fde766848eb4701c8df421a17cb74b","modified":1637031252732},{"_id":"public/images/paypal.png","hash":"872d4b6d3cacee4845246fbf29817f1ee98bb037","modified":1637031252732},{"_id":"public/images/play_needle.png","hash":"e0998828ab50ce37617f9f4d46b74648206ac852","modified":1637031252732},{"_id":"public/images/play_disc.png","hash":"3cfa8dd2e12424c52d1f5e34e9502e446fecde9c","modified":1637031252732},{"_id":"public/images/search.png","hash":"08c4f6a7a92eff3548aec94b267a23a25e6bd215","modified":1637031252732},{"_id":"public/images/wechatpay.png","hash":"470a42ee16dd516580d5e51607f11dc353a49675","modified":1637031252732},{"_id":"public/2021/11/03/Seata笔记/seata模型流程.png","hash":"c27c87fbe1f4f803c9eb1b660997ea172372b2d1","modified":1637031252732},{"_id":"public/2021/11/16/Java并发笔记-上篇/locksupport代码结果1.png","hash":"1d6ce270039b0917e0a491a017ab348439e271cd","modified":1637031252732},{"_id":"public/2021/11/16/Java并发笔记-上篇/locksupport代码结果3.png","hash":"209c60e2319cadee5395343d96fb24fc8902962f","modified":1637031252732},{"_id":"public/2021/11/16/Java并发笔记-上篇/locksupport代码结果2.png","hash":"d509c9de609b09930a83ea9ead442fc43b6a28a7","modified":1637031252732},{"_id":"public/2021/11/16/Java并发笔记-上篇/locksupport代码结果4.png","hash":"8a86dd495bf3b84ca84e9318f629e6f89fa184a7","modified":1637031252732},{"_id":"public/2021/11/16/Java并发笔记-上篇/locksupport代码结果5.png","hash":"c0aba224f633f9aceecf7e86f221e93897790ae3","modified":1637031252732},{"_id":"public/2021/11/03/Seata笔记/seata架构.png","hash":"e21567eee3e494e0159a0d5d4a76d6eea77577d2","modified":1637031252732},{"_id":"public/2021/11/05/雪花算法/雪花算法原理.png","hash":"5c7fca2061e94dba847dfc8072555599c76b1bc7","modified":1637031252732},{"_id":"public/css/mermaid.css","hash":"3fe1b97a64b969d4d7a470a4929cb432afefd1bd","modified":1637031252732},{"_id":"public/css/comment.css","hash":"02095bbceb2776977774348a2f347a7995b19327","modified":1637031252732},{"_id":"public/css/app.css","hash":"78ce31a2aa8278f00bf263ba21f982f3b842907f","modified":1637031252732},{"_id":"public/2021/11/03/Seata笔记/事务二阶段执行流程.png","hash":"cfea30f7e61e2d0f84e151533547e7aaa84a1b08","modified":1637031252732},{"_id":"public/2021/11/03/Seata笔记/未加全局事务的数据库情况.png","hash":"0548da5d938a15e3b4b473fed0e6468c96fdef07","modified":1637031252732},{"_id":"public/2021/11/05/雪花算法/代码效果图.png","hash":"e5c2302cbdb91438e66987f436b73a47bfd814c5","modified":1637031252732},{"_id":"source/_posts/jvm笔记-上篇.md","hash":"a688e32f4877308d4d4474ab986486f4e0f01e5b","modified":1637489280237},{"_id":"source/_posts/jvm笔记-上篇/oom异常2.png","hash":"4fbae13025915eb308fb7f8307419092a51a9708","modified":1637410619048},{"_id":"source/_posts/jvm笔记-上篇/oom异常4.png","hash":"82e389413b724ec127d753930eb3b80c896dea12","modified":1637413029640},{"_id":"source/_posts/jvm笔记-上篇/oom异常1.png","hash":"46177e1a05b578483ef0b6a00b6e8980ed2bc53e","modified":1637402579221},{"_id":"source/_posts/jvm笔记-上篇/oom异常3.png","hash":"7ef4d8b34707b77da2e843d917910810e0c401db","modified":1637410777302},{"_id":"public/2021/11/20/jvm笔记-上篇/index.html","hash":"3daa02e081f2a68c5aa325d91c735524d9d0db1a","modified":1638173862090},{"_id":"public/2021/11/20/jvm笔记-上篇/oom异常2.png","hash":"4fbae13025915eb308fb7f8307419092a51a9708","modified":1637414625755},{"_id":"public/2021/11/20/jvm笔记-上篇/oom异常4.png","hash":"82e389413b724ec127d753930eb3b80c896dea12","modified":1637414625755},{"_id":"public/2021/11/20/jvm笔记-上篇/oom异常1.png","hash":"46177e1a05b578483ef0b6a00b6e8980ed2bc53e","modified":1637414625755},{"_id":"public/2021/11/20/jvm笔记-上篇/oom异常3.png","hash":"7ef4d8b34707b77da2e843d917910810e0c401db","modified":1637414625755},{"_id":"source/_posts/jvm笔记-上篇/oom异常5.png","hash":"c97be31760b703d545560ac5b9f18868c93fd6d3","modified":1637488003926},{"_id":"public/2021/11/20/jvm笔记-上篇/oom异常5.png","hash":"c97be31760b703d545560ac5b9f18868c93fd6d3","modified":1637489293884},{"_id":"source/_posts/Java并发笔记-上篇/aqs-2.png","hash":"57e205878ed3a8f17ee56c04c6ce13b8f7972bac","modified":1637503003049},{"_id":"source/_posts/Java并发笔记-上篇/aqs-5.png","hash":"5d5ef0434012df082edb14dff918ec0af9e01413","modified":1637503035260},{"_id":"source/_posts/Java并发笔记-上篇/aqs-3.png.png","hash":"2176ce6246d7004ced5f854954ae94eebfd66d70","modified":1637503014086},{"_id":"source/_posts/Java并发笔记-上篇/aqs-7.png","hash":"1bd1e38f17de54fd897684f10abb8ab2231fd6a1","modified":1637503593205},{"_id":"source/_posts/Java并发笔记-上篇/rel-13.png","hash":"6cc5eec6d304ab3621004d6d7efe137606e17937","modified":1638166538518},{"_id":"source/_posts/Java并发笔记-上篇/aqs-4.png.png","hash":"531870eada333917cddaef3c168ea5abcff235b3","modified":1637503025649},{"_id":"source/_posts/Java并发笔记-上篇/rel-11.png","hash":"ada2afafae338b8d8b3731d4a71cf57c3dfe12b5","modified":1638166122371},{"_id":"source/_posts/Java并发笔记-上篇/rel-15.png","hash":"611d9b0e7acb018e40781183acd5cdd40adf3010","modified":1638166914916},{"_id":"source/_posts/Java并发笔记-上篇/rel-19.png","hash":"e5ba7fd443cd5e6d36d7b3d5feee06261935529a","modified":1638168370557},{"_id":"source/_posts/Java并发笔记-上篇/rel-23.png","hash":"8b3c7a73b89d9e5c7c26ef9acf61a8be645c69e2","modified":1638169402159},{"_id":"source/_posts/Java并发笔记-上篇/rel-25.png","hash":"1ee525817c75550461128c5d555ec9af55923b62","modified":1638169571490},{"_id":"source/_posts/Java并发笔记-上篇/rel-27.png","hash":"d746953e1472edf1ae81fef258abf10b97cefce5","modified":1638169949175},{"_id":"source/_posts/Java并发笔记-上篇/rel-29.png","hash":"dbbf1282156ce0d3d5aeaa82b12700e78bcce5bb","modified":1638170147175},{"_id":"source/_posts/Java并发笔记-上篇/rel-32.png","hash":"c4426cd95f9a9800057f89a718952e5f6bb48c19","modified":1638170821676},{"_id":"source/_posts/Java并发笔记-上篇/rel-35.png","hash":"7b702ffbe98dad87c46d637f9688ecb4c294be3a","modified":1638170949885},{"_id":"source/_posts/Java并发笔记-上篇/rel-1.png","hash":"430b80198332cc2121cd3c598076a3d9ed2da087","modified":1638157703778},{"_id":"source/_posts/Java并发笔记-上篇/rel-10.png","hash":"d35bccf8b95ae0891046b53760b0b12954bb2d85","modified":1638166047355},{"_id":"source/_posts/Java并发笔记-上篇/rel-12.png","hash":"98f774dd84a600ce4f6582d8da8102a27bfc8d87","modified":1638166324566},{"_id":"source/_posts/Java并发笔记-上篇/rel-17.png","hash":"7d9e04307e8d6a6b42c19ea7d845b0743869c5d1","modified":1638167657477},{"_id":"source/_posts/Java并发笔记-上篇/rel-16.png","hash":"4cb864e79b4028f39cb82d8cfd7a822a511425b1","modified":1638167266126},{"_id":"source/_posts/Java并发笔记-上篇/rel-18.png","hash":"de0c213efed03a58ea763e5a6e781b47afbed3de","modified":1638167744897},{"_id":"source/_posts/Java并发笔记-上篇/aqs-9.png","hash":"26f20466c84f5d45d6c3128c217b3ef42f1ca6ac","modified":1637504012710},{"_id":"source/_posts/Java并发笔记-上篇/rel-2.png","hash":"28e614f5c64c248c060656a1c274140c7a303a8f","modified":1638164552576},{"_id":"source/_posts/Java并发笔记-上篇/rel-28.png","hash":"9c5942456c7b1ba5cd5ac7be96e633e854cf678f","modified":1638170079967},{"_id":"source/_posts/Java并发笔记-上篇/rel-26.png","hash":"368de3a3c37de8b88ec551eefe00ad8fc450e623","modified":1638169896574},{"_id":"source/_posts/Java并发笔记-上篇/rel-7.png","hash":"e16845de9aba31e187fe78c69de14d8efd2ac88a","modified":1638165197513},{"_id":"source/_posts/Java并发笔记-上篇/rel-5.png","hash":"ee412275c03c8fa03f75df486f33358a4128a88a","modified":1638164810855},{"_id":"source/_posts/Java并发笔记-上篇/rel-9.png","hash":"f8271737a4c89de05d7e8ed3a9d6d67c168f04a3","modified":1638165928763},{"_id":"source/_posts/Java并发笔记-上篇/rel-14.png","hash":"092562c2920d0444749113039138ff26f1427967","modified":1638166729443},{"_id":"source/_posts/Java并发笔记-上篇/rel-21.png","hash":"98bc15578887c23c6cd2524f75824ed0e9f13897","modified":1638168977509},{"_id":"source/_posts/Java并发笔记-上篇/rel-22.png","hash":"dd27704848883ee7131e62ef74a32aa3b13697ad","modified":1638169360262},{"_id":"source/_posts/Java并发笔记-上篇/rel-30.png","hash":"b1eab0bf59286403377fcc25dd9a73d7e8fab682","modified":1638170423593},{"_id":"source/_posts/Java并发笔记-上篇/rel-34.png","hash":"a8a345e4a1845aa84f3e43802acacc75246d56df","modified":1638170881345},{"_id":"source/_posts/Java并发笔记-上篇/rel-6.png","hash":"c92114c359cde6ef6dff11af45fbe5312ad726b1","modified":1638165103901},{"_id":"source/_posts/Java并发笔记-上篇/rel-20.png","hash":"9f5db3fd922384bc4c207da35268616c91cdf3c2","modified":1638168707496},{"_id":"source/_posts/Java并发笔记-上篇/rel-24.png","hash":"713a00ae2fe67012a4463f11475fe63d2ae560c6","modified":1638169457532},{"_id":"source/_posts/Java并发笔记-上篇/rel-31.png","hash":"964ff28b86f5391acb914e41c8e81d2d6b46d11e","modified":1638170509699},{"_id":"source/_posts/Java并发笔记-上篇/rel-33.png","hash":"aff1f18ba69a732a5cc704c2892be9c6f1ef06ee","modified":1638170869209},{"_id":"source/_posts/Java并发笔记-上篇/rel-4.png","hash":"7e54b498850455a6f9fd3fe2da169ced86f66acc","modified":1638164719862},{"_id":"source/_posts/Java并发笔记-上篇/aqs-1.png","hash":"247a8e4a3deb907bae1908080569a9b91f45435f","modified":1637502913383},{"_id":"source/_posts/Java并发笔记-上篇/aqs-6.png","hash":"e4451520894fb143b4f8441e284aaefefd2a1b17","modified":1637503518141},{"_id":"source/_posts/Java并发笔记-上篇/rel-8.png","hash":"0eef2c972b18c701195d1570cdde1d68b961ed32","modified":1638165329241},{"_id":"source/_posts/Java并发笔记-上篇/aqs-8.png","hash":"648eb9c37735f8d4f4336ac19853b10893001f1c","modified":1637503804754},{"_id":"source/_posts/Java并发笔记-上篇/rel-3.png","hash":"ae08cd3c4ab51527148f2147697afba5d8918f7b","modified":1638164657866},{"_id":"public/2021/11/16/Java并发笔记-上篇/aqs-2.png","hash":"57e205878ed3a8f17ee56c04c6ce13b8f7972bac","modified":1638171016377},{"_id":"public/2021/11/16/Java并发笔记-上篇/aqs-3.png.png","hash":"2176ce6246d7004ced5f854954ae94eebfd66d70","modified":1638171016377},{"_id":"public/2021/11/16/Java并发笔记-上篇/aqs-5.png","hash":"5d5ef0434012df082edb14dff918ec0af9e01413","modified":1638171016377},{"_id":"public/2021/11/16/Java并发笔记-上篇/aqs-7.png","hash":"1bd1e38f17de54fd897684f10abb8ab2231fd6a1","modified":1638171016377},{"_id":"public/2021/11/16/Java并发笔记-上篇/rel-13.png","hash":"6cc5eec6d304ab3621004d6d7efe137606e17937","modified":1638171016377},{"_id":"public/2021/11/16/Java并发笔记-上篇/aqs-4.png.png","hash":"531870eada333917cddaef3c168ea5abcff235b3","modified":1638171016377},{"_id":"public/2021/11/16/Java并发笔记-上篇/rel-11.png","hash":"ada2afafae338b8d8b3731d4a71cf57c3dfe12b5","modified":1638171016377},{"_id":"public/2021/11/16/Java并发笔记-上篇/rel-15.png","hash":"611d9b0e7acb018e40781183acd5cdd40adf3010","modified":1638171016377},{"_id":"public/2021/11/16/Java并发笔记-上篇/rel-19.png","hash":"e5ba7fd443cd5e6d36d7b3d5feee06261935529a","modified":1638171016377},{"_id":"public/2021/11/16/Java并发笔记-上篇/rel-25.png","hash":"1ee525817c75550461128c5d555ec9af55923b62","modified":1638171016377},{"_id":"public/2021/11/16/Java并发笔记-上篇/rel-23.png","hash":"8b3c7a73b89d9e5c7c26ef9acf61a8be645c69e2","modified":1638171016377},{"_id":"public/2021/11/16/Java并发笔记-上篇/rel-27.png","hash":"d746953e1472edf1ae81fef258abf10b97cefce5","modified":1638171016377},{"_id":"public/2021/11/16/Java并发笔记-上篇/rel-29.png","hash":"dbbf1282156ce0d3d5aeaa82b12700e78bcce5bb","modified":1638171016377},{"_id":"public/2021/11/16/Java并发笔记-上篇/rel-32.png","hash":"c4426cd95f9a9800057f89a718952e5f6bb48c19","modified":1638171016377},{"_id":"public/2021/11/16/Java并发笔记-上篇/rel-35.png","hash":"7b702ffbe98dad87c46d637f9688ecb4c294be3a","modified":1638171016377},{"_id":"public/2021/11/16/Java并发笔记-上篇/aqs-9.png","hash":"26f20466c84f5d45d6c3128c217b3ef42f1ca6ac","modified":1638171016377},{"_id":"public/2021/11/16/Java并发笔记-上篇/rel-1.png","hash":"430b80198332cc2121cd3c598076a3d9ed2da087","modified":1638171016377},{"_id":"public/2021/11/16/Java并发笔记-上篇/rel-10.png","hash":"d35bccf8b95ae0891046b53760b0b12954bb2d85","modified":1638171016377},{"_id":"public/2021/11/16/Java并发笔记-上篇/rel-16.png","hash":"4cb864e79b4028f39cb82d8cfd7a822a511425b1","modified":1638171016377},{"_id":"public/2021/11/16/Java并发笔记-上篇/rel-17.png","hash":"7d9e04307e8d6a6b42c19ea7d845b0743869c5d1","modified":1638171016377},{"_id":"public/2021/11/16/Java并发笔记-上篇/rel-12.png","hash":"98f774dd84a600ce4f6582d8da8102a27bfc8d87","modified":1638171016377},{"_id":"public/2021/11/16/Java并发笔记-上篇/rel-18.png","hash":"de0c213efed03a58ea763e5a6e781b47afbed3de","modified":1638171016377},{"_id":"public/2021/11/16/Java并发笔记-上篇/rel-2.png","hash":"28e614f5c64c248c060656a1c274140c7a303a8f","modified":1638171016377},{"_id":"public/2021/11/16/Java并发笔记-上篇/rel-26.png","hash":"368de3a3c37de8b88ec551eefe00ad8fc450e623","modified":1638171016377},{"_id":"public/2021/11/16/Java并发笔记-上篇/rel-28.png","hash":"9c5942456c7b1ba5cd5ac7be96e633e854cf678f","modified":1638171016377},{"_id":"public/2021/11/16/Java并发笔记-上篇/rel-5.png","hash":"ee412275c03c8fa03f75df486f33358a4128a88a","modified":1638171016377},{"_id":"public/2021/11/16/Java并发笔记-上篇/rel-7.png","hash":"e16845de9aba31e187fe78c69de14d8efd2ac88a","modified":1638171016377},{"_id":"public/2021/11/16/Java并发笔记-上篇/rel-9.png","hash":"f8271737a4c89de05d7e8ed3a9d6d67c168f04a3","modified":1638171016377},{"_id":"public/2021/11/16/Java并发笔记-上篇/rel-14.png","hash":"092562c2920d0444749113039138ff26f1427967","modified":1638171016377},{"_id":"public/2021/11/16/Java并发笔记-上篇/rel-21.png","hash":"98bc15578887c23c6cd2524f75824ed0e9f13897","modified":1638171016377},{"_id":"public/2021/11/16/Java并发笔记-上篇/rel-22.png","hash":"dd27704848883ee7131e62ef74a32aa3b13697ad","modified":1638171016377},{"_id":"public/2021/11/16/Java并发笔记-上篇/rel-30.png","hash":"b1eab0bf59286403377fcc25dd9a73d7e8fab682","modified":1638171016377},{"_id":"public/2021/11/16/Java并发笔记-上篇/rel-34.png","hash":"a8a345e4a1845aa84f3e43802acacc75246d56df","modified":1638171016377},{"_id":"public/2021/11/16/Java并发笔记-上篇/rel-6.png","hash":"c92114c359cde6ef6dff11af45fbe5312ad726b1","modified":1638171016377},{"_id":"public/2021/11/16/Java并发笔记-上篇/aqs-1.png","hash":"247a8e4a3deb907bae1908080569a9b91f45435f","modified":1638171016377},{"_id":"public/2021/11/16/Java并发笔记-上篇/rel-20.png","hash":"9f5db3fd922384bc4c207da35268616c91cdf3c2","modified":1638171016377},{"_id":"public/2021/11/16/Java并发笔记-上篇/rel-24.png","hash":"713a00ae2fe67012a4463f11475fe63d2ae560c6","modified":1638171016377},{"_id":"public/2021/11/16/Java并发笔记-上篇/rel-31.png","hash":"964ff28b86f5391acb914e41c8e81d2d6b46d11e","modified":1638171016377},{"_id":"public/2021/11/16/Java并发笔记-上篇/rel-33.png","hash":"aff1f18ba69a732a5cc704c2892be9c6f1ef06ee","modified":1638171016377},{"_id":"public/2021/11/16/Java并发笔记-上篇/rel-4.png","hash":"7e54b498850455a6f9fd3fe2da169ced86f66acc","modified":1638171016377},{"_id":"public/2021/11/16/Java并发笔记-上篇/aqs-6.png","hash":"e4451520894fb143b4f8441e284aaefefd2a1b17","modified":1638171016377},{"_id":"public/2021/11/16/Java并发笔记-上篇/rel-8.png","hash":"0eef2c972b18c701195d1570cdde1d68b961ed32","modified":1638171016377},{"_id":"public/2021/11/16/Java并发笔记-上篇/aqs-8.png","hash":"648eb9c37735f8d4f4336ac19853b10893001f1c","modified":1638171016377},{"_id":"public/2021/11/16/Java并发笔记-上篇/rel-3.png","hash":"ae08cd3c4ab51527148f2147697afba5d8918f7b","modified":1638171016377},{"_id":"source/_data/images/avatar.jpeg","hash":"a089e9f57b39d17773748a02fe1303b27164863b","modified":1638172904254},{"_id":"source/_data/.DS_Store","hash":"0410eff333691a4d578b8ca5387fdcd8aa985940","modified":1638172931122},{"_id":"public/images/avatar.jpeg","hash":"a089e9f57b39d17773748a02fe1303b27164863b","modified":1638173086928}],"Category":[],"Data":[{"_id":"languages","data":{"zh-CN":{"post":{"copyright":{"author":"本文博主"}}},"en":{"menu":{"travellings":"Travellings"}}}},{"_id":".DS_Store","data":"\u0000\u0000\u0000\u0001Bud1\u0000\u0000\u0010\u0000\u0000\u0000\b\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u0002\t\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\b\u0000\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u0001\u0000\u0000\u0010\u0000\u0000e\u0000sbwspblob\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u0006\u0000i\u0000m\u0000a\u0000g\u0000e\u0000sbwspblob\u0000\u0000\u0000�bplist00�\u0001\u0002\u0003\u0004\u0005\u0006\u0007\b\u0007\b\u000b\b]ShowStatusBar[ShowToolbar[ShowTabView_\u0010\u0014ContainerShowSidebar\\WindowBounds[ShowSidebar\b\t\b\t_\u0010\u0018{{566, 412}, {770, 436}}\t\b\u0015#/;R_klmno�\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\r\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0000\u0000\u0000\u0006\u0000i\u0000m\u0000a\u0000g\u0000e\u0000slg1Scomp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0006\u0000i\u0000m\u0000a\u0000g\u0000e\u0000smoDDblob\u0000\u0000\u0000\b\u001a�w\u0011_��A\u0000\u0000\u0000\u0006\u0000i\u0000m\u0000a\u0000g\u0000e\u0000smodDblob\u0000\u0000\u0000\b\u001a�w\u0011_��A\u0000\u0000\u0000\u0006\u0000i\u0000m\u0000a\u0000g\u0000e\u0000sph1Scomp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0006\u0000i\u0000m\u0000a\u0000g\u0000e\u0000svSrnlong\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\b\u000b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000 \u0000\u0000\u0000\u0001\u0000\u0000\u0000@\u0000\u0000\u0000\u0001\u0000\u0000\u0000�\u0000\u0000\u0000\u0001\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0004\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0001\u0000\u0000 \u0000\u0000\u0000\u0000\u0001\u0000\u0000@\u0000\u0000\u0000\u0000\u0001\u0000\u0000�\u0000\u0000\u0000\u0000\u0001\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0004\u0000\u0000\u0000\u0000\u0000\u0001\u0000\b\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0001\u0000 \u0000\u0000\u0000\u0000\u0000\u0001\u0000@\u0000\u0000\u0000\u0000\u0000\u0001\u0000�\u0000\u0000\u0000\u0000\u0000\u0001\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0004\u0000\u0000\u0000\u0000\u0000\u0000\u0001\b\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0001 \u0000\u0000\u0000\u0000\u0000\u0000\u0001@\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0003\u0000\u0000\u0000\u0000\u0000\u0000\u0010\u000b\u0000\u0000\u0000E\u0000\u0000\u0002\t\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0004DSDB\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000 \u0000\u0000\u0000`\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000�\u0000\u0000\u0000\u0001\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0004\u0000\u0000\u0000\u0000\u0002\u0000\u0000\b\u0000\u0000\u0000\u0018\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000 \u0000\u0000\u0000\u0000\u0001\u0000\u0000@\u0000\u0000\u0000\u0000\u0001\u0000\u0000�\u0000\u0000\u0000\u0000\u0001\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0004\u0000\u0000\u0000\u0000\u0000\u0001\u0000\b\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0001\u0000 \u0000\u0000\u0000\u0000\u0000\u0001\u0000@\u0000\u0000\u0000\u0000\u0000\u0001\u0000�\u0000\u0000\u0000\u0000\u0000\u0001\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0004\u0000\u0000\u0000\u0000\u0000\u0000\u0001\b\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0001 \u0000\u0000\u0000\u0000\u0000\u0000\u0001@\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000"},{"_id":"images/avatar","data":"����\u0000\u0010JFIF\u0000\u0001\u0001\u0001\u0000H\u0000H\u0000\u0000��\u0000C\u0000\b\u0006\u0006\u0007\u0006\u0005\b\u0007\u0007\u0007\t\t\b\n\f\u0014\r\f\u000b\u000b\f\u0019\u0012\u0013\u000f\u0014\u001d\u001a\u001f\u001e\u001d\u001a\u001c\u001c $.' \",#\u001c\u001c(7),01444\u001f'9=82<.342��\u0000C\u0001\t\t\t\f\u000b\f\u0018\r\r\u00182!\u001c!22222222222222222222222222222222222222222222222222��\u0000\u0011\b\u0001�\u0001�\u0003\u0001\"\u0000\u0002\u0011\u0001\u0003\u0011\u0001��\u0000\u001c\u0000\u0000\u0001\u0004\u0003\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0004\u0002\u0003\u0005\u0006\u0000\u0001\u0007\b��\u0000D\u0010\u0000\u0002\u0001\u0003\u0003\u0002\u0004\u0004\u0004\u0004\u0004\u0004\u0004\u0005\u0005\u0000\u0001\u0002\u0003\u0000\u0004\u0011\u0005\u0012!\u00061\u0013\"AQ\u0007\u0014aq#2��\u0015BR�$3b�Cr��\u0016%S�&5c��4s�����\u0000\u001a\u0001\u0000\u0002\u0003\u0001\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0003\u0004\u0005\u0006��\u0000(\u0011\u0000\u0002\u0002\u0001\u0004\u0003\u0000\u0002\u0003\u0000\u0003\u0001\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0003\u0011\u0004\u0012!1\u0005\u0013A\"Q\u0014#a23B���\u0000\f\u0003\u0001\u0000\u0002\u0011\u0003\u0011\u0000?\u0000�6W�\u0000*�q�\"-D����\u001a<�vI\u0011Pm>j��dI���K�]��E�k\f�\u0019\u001b��\u0005U�F�\u0003/�K\u000b�~]_\u001d�.8\u0001�D�\u0013D�6�mq%�PɀOz\u00115\u0007��\rd�R��\u0011ڌ|\u0019)�H�P�G�.\u0006�HV)W\u0003\u001d�+;�����w�o�\u0012=�l\u001a�>\b��\u001e\r�\u0003��L���\u001d�JI\u0004\u0017\u0010����\"� �NA\u0015b|\u0000�i�(\u0012\u0013�Zș��ħ(=jTJ�\u0006\u0001\u0018����Lgb��U���\u00026�\u0017�&3�6��,��:�\u0015$���\u001439c��*�1K+�\u0018�^r�\u0012;\n\u0011{f�Y7.�x@k%�#�K�#\u0019��a�`�\u0010��\f��F����9\u0018�����\u001d�-�!i\n��\u001c�[b-�\u0018�5n��挸�,����\u001e\b�hdV�'�\\\u0016�n<�HZ�{�~��ʮ�\"����\u000f\u0010\u0005�<S�H�\b\u0014$��\u0017�3�B�L0{���M\u000f�m�6\u0017\u001fZ������5\u0019���\u001eXvI�y�S#��:\u0014����H���\u0011+I\u001b������\u0000pEh�1�E5��@[�|�>{➛iQ�V�+��*y\u0019���� \nCM#v'���!(�x�jаD��~f<T7��\n\u001d�g<����\u0018/ȧ���Q���kV\u0016�;���*NI��\u0013,��J�qO�&�A\u001c\u0001A^�\"�`��+<�ǰ\u000e(۔\"JIv�*kIp\u0019pǚ�\u0013�ni�\u0013$Q�X%\u0016/\u0010♷�ķ\u0012o�\n{O�\u0012��\u0005=ws\u001aM�]�sU�\u0001\u0003ˤJ�d\u0019\\T|VrMq�\u000e\rX!��-ʟ1<P!�\t<@<��T�9c����[�����\u001b���\u0015s��Ǐl�����b�\u0011\u0016cP\t��\u001by�\f�-3<aO�j9�\u0013�4өF�i;��\t�f�Ac�1�+c��N-�T\u0010h\\\u0000�ڼQ,��\u001b�)��K \u0006�fvP���O�x��P$\u001b\u0016��\u00191�5&(�%�yI�h�(\r�\u001fj~hH��^\u0007j�<�2�\tA\u001f���NP�aP\r*��rA_/�\u001c\u0018&\u0001�94\u0004\u001dͬ�#H\u0017$�|O\u0014ĭ�!��pA�����a�w�\t�\u0019q�`�7)\n4I�<\u001an\u00172d��\u001by�4 ��\"�\u0015�d\u001e�r�\\\u0000bJs��Q�\\)�*�\u0004TL'sdv��\u0006�\u0000/\u0019���\u0006-mf�'i;OsH���ټ�qV�H\u0012��m\u001cӲ�\u001d�\u0005qU�y\u0011TKWh\u0003�އ�� �EZnm�-��cҫ�\u0016�\u0018��{ձ�F 6{Ҁ�\"<\u0013�D�P{ScF�h�S͜V&\u0018�\u0005\\t\u000e��5�ĠxQ\u001eŇz��c\u0005�d`�Ez�s8�*�ҽ-�jo\u0012o�\u0013�ֲ��ޣ�D��D�s��]\u0011l�iDH6�>a\\��\t�ŗB�>G?�F�#�-W8�;�\u001f�z4�\t�Vļ\u001e��k��n�a�\u000fr'\u0000�C�����%.Yd��8\u001b6�(E2�\"6=M\u0019-�۝�M�'\u0007\u0015\u001d.���\ru�%%��Qhn��H<�\u0001f&\\�\u0011)>��,��ȭ\u0011�SFL� �1HXeb\u0001n)�g1\u0002�w�$S\u0012��ߐ*b\u0018{w�Ϩ\u0014�`Ybfϛڗ\rȗv�\u0006)��X��}��>DHi�)\t&AیQ\u0012\\��\u0005p\u0007�E��`\u00123z\n�c���8�8����Ue�\u0003\f�\u0014�WNX\b�\u001e����ܣ�7�Q\u001aTAn�F}�F\u0012\u0001�-��-���e�h�g�*f�Oh�I���i\u001a��\u000bj\u0014����� ^5f\u001e\u001a�h��\u000bA�\u0013�\u001d�ZpA� \u001av����Q�w\u0015''�!\u0000:�[\u000f0 S����\u0010\u000e}�w��\u00007\u0012��z+J�X�E��w����,��b���>ԈO\u001b�J�6k<fR�{Uu��L\u0003�\u0011{�`�\u001a���\u0003\n\u0016mE�Wa8�\nLf0��ڲKV\u0011���hQH\u0000�9sH�5�9�k\u0014n��\u0014�Z?�9\u0018}�4Gd�j8:㊃b#�Ԝ�[)1�T�IYy�I��N\u0000\r��^Q!�\b�3\u0006b\u001czT�;���*(�\"ݬ��zԔwQI\u001b2��V� �A\u000bN�\u001ej.�R��\u0011\u001cT��w��I1��7�%v!\b;ӄ�B�\rp�\u001eE$\u0004u����9\u001c��B�Z��J���N]�4�\u0011�\u000fz����\u0004��� %\"�87\u0006�ڋ��P��*#{��\u000e\r>�0�[5'\u001c�?��>x\"���Bq�QV��r���<w�����v$!RjI�\u0015s�M^���<M�<�)�U)��4\u001aB�\u0002�1��SM|\u0018ŭ���e;i�!\u0002C���l��m9\r�I,;�s\u001a7Ӷk{�Z����\u0000~��\u001b+h�-#�5\u0001U@\u0015�4�\u0016���\u00066�5�4���b�\u0018\u0013�f�Z��$l�\u0018\u000f'#�b\u000bd�g)��O\u001aD�#��n�\t5��\u0002�{�8��\u0012��j�7Qjw\f�۬k\b'j7v\u0015c�55�l\u0016p�\u0018\u001d����[:g\u0004��:E�����{~�R�^����y�\u0010#��\n�֤\u0003�l㱫#d��)i3�7�=����\f�\u0014:0�\u0006���/� ���uV��ڻ�=�M�f�Ƨ\u00079\u0014ܒH�\u0006r\u0005-��9�\u0003\u0011گD\u0004e����}iM�=�\u0018*y��Pv��x�Շ�99�\u0007&�\n)\u0000]��\u0001\u0003�E�r�\u001bN���!>\u0011�)�.�\u0003\u0015\t '�񤄤��\u0015\u000f~��\u001d�8�\u001ey �NZN��\u001c<�\u0004�p�\u0003���̙<�L����nژ`\"\tB0\u0007\u0018����\t�Q�P�3\u0011E��\u0011���I�,\u0004�j�H|4㚊��\u001c��O\r�XFy��@<\u00034c\u0019��VhU\t�n�\u000bu\u0005|ƚl\u0006*-�FK\u0000ٕ\u0014,\u0011�s��\u001a��q\u0017�\\�\"\u0019�\u0015ā@�\u0019hdU�rG���j9\u000e1V�~R�\u0002X\u00021ށ]>��/�RV/�*M�6��m�m0����sq>�b���[e\u0000\u000f5J]\u0012$`�ǅ��&���1\u0010c$gҋ7�\u0012�ݒ{���%�r�p\u0015Rl@O� \u000b\u000f1��\\M�\rPW�\u000f;noJsO�!���IŴ\"�<�\u001aaO5\u001d\u0004�\u001c�#\u001e�-��U\u00006Mk|sB�~\t��Q\u0019!$���o��\u0001��«d�Z.=�\u000e�lҖW@�~R92@\u0003\u0015\u001d,�\u0014�\u000f`jqP,Ls�W�!f���4���c�ݪ���~&Y.\u0003���\"�,����\u000fn\u0006=i��\u0001b��\u0005��P7����\u0006\u000f�\u000f\u0004�L��jg\fC\u000e⠣���f\u000e\u0006x�(��*\u0011n\b4lW�&\t�\u0014�\u00164J�)\u000bߵY�\u001d~���Y\u000e�l�\u001e\u000b��A9$�Ӥ���u\u0018з�FZ�j �r˪|��:V�5�P`b\u000f�*x��\"�8a�)�kh�!X�P\u0000\u0014�k��ѭ\u0014�t\rR�c\r��-�bT��QV=&��e��#\u0006rK9\u001e�pu$�FGzQ�t���\u000e�l��*�=��=kgac$V�\t'a�/�O�T:����\n�p¸&�o%��5�������S�&iɤF�\\���M!˹$�\u0001�9�elSJ�\rvⰌRc\u000e\u000e1�g\u0005s�H���0T�\u001c�*�ȃG\u0013\u0010XV\u0014'�މ\u0003\u0003\n)�\\\u001f�<�G�\u0000���8��捵�{�V4RY�\u0000\u0015\u0019MEe�K �\u000fj2�\u0001���\u000f����\u0007�\u0004����k�*��4l�\u000e9\u001d�?�!'���h\u0010D��a�!�#�6�X4����F`N\u0007rh�C���\u0013p�x�x�\"\t�#����\u001f��eqRW�s[N��\u0019F\u001e�P�x�+Tf� Ё$Ay\u001c�\u000fp�#>Z[Î��'55�\u0006���=�J��\na�\u001d�#��qR`���MFI'ޱ���\nlK�QHA��a���6���\u0018c���M�r]\u0002��T�3x��d`@�\u0002��c5����n�<w�'�<R�o�\u0006\u0001\u0006E?<�d�T\u0000H��`�����X�\u0000\u0010����7�CϵHZX�\u0004�\u0018����wL\u001c�p*{�\u0019\u001a�K�b\b\u0006�\u0016n\u0006U�\"���ȑ��x\u000b�D�Ȳ۩��)dL�hv�\b�n\r9%�pF\\?>��ũ����m��L^.!Sȩd@�B�R\u0015\u0007�R�J%(3�VbKix8aO[ܺ\\\t\u0018���$����rsڥ����Z��Q%ϊ�\u001cԏ̡�|�&� ��˅����b�P�/�\n\"�X�\u00006A�C0�ؠ\u0019&�V\u0003\u00010�\u001c1\u0019��3�'��\u001a�G`��sG[�.\u0001��E&���0�R��\n�'�\u00119�u\u0003'��H��\u0015�\u0003��\u001cӶ��Z^UM\u000f%��.ݤP��:\u0017\u0005�\u001cU�\u0000�ޫ\r��Rf\n�\f\u0002Ms���\u0006���`��#�\u0015����\u0004�,<��\u0005YC)\u0004\u0011�H�A\u0014e��\u0001\\_F���Ka\u0019}�\u0018\u0019�nz��T�c�T�\u001e��zY&i���i\u0017�]�]a�m�\u000f�LzW\u000e]bm5�����z����,H\u0016��y�\u0000I��i�$���K\u0004R�p\u0007z�}q<s�\u001d��\u0006��#֧�o�7:����\u001f\u0005[�}j�t�E��d'�kN��BY�]�&��i��4�帥\\�Oz\u0018�F+����J\u0006�\u001a�\n�\u001e(\b���\u0007�EH�\u001a�4�D�\u0016\tl}�\u0012�\u0019A#\u0006���YT�nv%�\u0000�Hi\u000b��p��\rtx����e\u0004B��}�j�8�z��\u000e�\u001e��\u0018�o,�nk.�_�EծNР\u000fJ��~�\u0015�����\u0011\b9ǥYQ��2�A�D���<g��+����x#:v�;=&%U\u001b��8�R�\u0007��&8�Q�(�Q�Vq�I��A\u001c��'N[Mh���\u0011��;�+��)�\u001cW^����\u0016�-U�;�p{W*��Bcں�I=�{R�\u001a����(im�\u000e\u0005=-�$$R\u001abF\roY3�.d��\fA��T�E\u0000�\u0006�\"!BD1��i��\n��S�1\u0016Z�\t�E�ʪ�s��j\u0004��\u0019��7�\n��1��\u0005ە\u0000�� R[4DP�\\�)4�X�g\b0\u0000��ܫl�g\u0006��ـ�cޟ� �\u0001��Q�������]� ����#�y⋻x�p��\u001c�nbG\u0015j\u0000�{���n\r>%�\u0016�\u0017�ƢW�ɧ@��\r\u0006\u0007�c4��޶�6;Q0¬���>�d�\u00075\u0007<\u0012H\u0015m�)�hD������o�/\u0010[I�\u0019��Jٳ0VS������Kc\u0003k}�\t9�Z5�\u001c(9�|\u001d\u0013�\\���@vc<�U�KO��f1]Dѿ�\u0014F���1�4@I\u001e\u0018�Q�t�IC�\u0014�@cM�1\u001d�U�� �\u0004^$�)�%}\r?nR8w:����#�l\u0001�̾\"�)�{\u00111m��FC\u0001�����Ɂ��\u0012X��Q\u0016�#�V\u00034�D\u001dul�7�(?2�5.K\\D\u0011���PW���\u0001e����\u0018�\"���(,x����\u0011��\u001a�g\u0006�\\�V��&no�F�LZ<1^Ojf�\u0006d2q�F�re\u001bY\u0006\u0016��:\f�\u001f���\n\u0012�l��Ҏ�\u0011�\u0001�(+��Yv*��\fdM�l���N@4t�\\��w5\u001d:�2\u0015`A���\u0016Gc�\u0011\u0013�Hi�V�qC1��;\u0011\u0000�O\u0003\r�'<��=mIP7d�[NF6\u001a6������4Ii�l�w�o\u0018%؀+���\u0000A�Y[��\u0003t�g>�@�\u0002��<[�\u0006EwLv�>�׻j5U\u001e25mn-�\b��=�MoR}6��\u0012\u0006���\u0007ޤ�\u0007�l�n���]�@��P�&��rI�FYk��7Q��\u001c���Nэ�ne\u0012FA<\u0011T[\u000b[�N�%kG�\u0005`���oAW�\u0000\u0000\u000fJH�U\u001a�/��j�#c�[�����5�:�D�A�\u001e\t\u0006S��q^��U�l�\u0005�\u0018�\u000fz٤�S��ı��Hrr(g��\u0014J�h\tO��q1�O#��\u0014���\u0003\u001cqO 7�Y�&ZF\t*E?5�dڜ\n�䍼�DM��6�G�����'\fG�\u001fw9IH+@~f�ަ�\u0012�Ç~y4e��\r��փX\u0018��4����A���)c\u0002\u001a[���Np8�<b\u001f�L�x�W�2�W�1��\u000b���sH����Fx�b�y��sM\u0006��o�FLh2�;H���p\u0005u���e(���`�p���I�?�ڛ��7zףm�?\u0005<\"\n�W'Yl��5Ev4,-R��\u0010��c\u0018�m�I½E\u001c�\u001f�\u0016�\u0000\u001cU�\u0015�� �3�k���\u0000f�Q\"�\u0012��\n\u00061Un��5�)�T\u0002x�R\u0005Z�(]B�\u001b[9^V\u0000\u0005=��e�&��7ɤI\u001c���S�(i�|5!�՛S��K��Ly��U�&�n��smd�5�\u0001<%\u001b�\u0015�hK�\u001b�?w��VG*¥���V��+\f��\b��\u0000�ՔI<�m\u0000\u0003Q�x�}�${T�sƐ���8�RyB&-��d\fXdT����d��\u001b\u0002���� G*��:�K\u0017�V,݅V�y�\u0001�\b��\u001f�ME!��jD+=��\"����(�Ztހ�\rCiK3\u001a�擊�VB+�d�\t>�\u0019\u0005ҁჀia�fUC�M\\b�I��M-��1�\u0004�A55п\u000e��\u001a���G'1D}\u0007���jjI��Ɖ��_�z+Wգ���E\u0019�4�f�.�+W���6�6\u0007&3���U\u0010*\u0000\u0014p\u0000���7��ɣ��<�y<�H�-\u001b�p�\u0015[ԧY�`r;צ�>��5t+yj�H��`���.�\u001fh+��nd�4\u0007\u001c6q��N�\rr�ޕ�8�\u0001�Z\u0007\u0015ڥ�3�J����\u0003��j\u000bY�?wae5ͥ����`�Zc��O\u0019 �9�\u0010i��\u000050P�v��pi�nx�/����Z�ҵ�{�E`\u000fڽ\u0019��\u0010�6Q�\u000b\u0002���k�0?�{��A�CHEHdܞ�k��ӹ��\u000e��,hY�1I�C$a�cڹ��U�j71,��\t�\u0015�-�\u001e\b�\u0010F�ڹr��f��г�\b\u0015U���[�i{�<��U�ֹ?�i!��}�x�\u0010qR�\u001b�7��{�\u0007J��.���\u001c*��\u001dG�M�ߵ�ǎʾ�\"�&��\u0002͵k�N�5���c`S\u001c\u001e;\u001an0$nh��vU�\u0002O!����P\u001a\u0019\u0011�#4�\u0012T;F\b��+g9���@\u0014��6���wW?CD\u000bб�;�fFI\te=�v\u0018<԰\u0003�]\u0019�1\u001d�\u0005����8����\b��\u001d��m�eRY�h��/(�\u001e޵\u0014\u0019��qF�����g͊�@E1$�G����\u0014�ߜ�\t��\u0014��2)Jh\u0018Z�h��\u0006����R$�[5�IUa\fd�\u0018�]�����\u0018b��ſ���S>\u0016��\\kd̫̊�\r]�(Q�0=�����ۃ]K��3�{�w���uuu*ݘ\u0012\u0016!\u0010c�ޯ�\u0007}Һ}��N�\"\u0017��\u001b\u0001�\u0011���/�Y\u001d�5)�-\u000e+�W\u0012\u001c�=q�M�h'Q\u0007�.\u0018�\u001f�ҥ�����H!@���\u0002�����\u000e/�}\u001b6���ؖ�wǥs�\u001d�<ץ:�Fzr�ʠ��{�ך.\u001b��z���\u001eL�,\u0002�䜚\u0019�j+`��4<�\u0010�MtQ�LJ\u0003d�\u0002�Q\u0019}\r\t�`b�X\u001ax\u0011�\u0014\u0002v�[\u000ed*�2��R1�\u0000\u0019'Ү�#�Z�ν�Kwh�k3��z��d�\u0005�N\u0010r|\u001do��N�D�m�\u0005kɔ<�Ñ�J�p;\nJ�P\u0015F\u0000\u0018\u0014.��G�����<*��^b���6Μc��\u0016k)�F�������#��H��\u0016�rK�\u0006\u0007ޫ�^\u0006�\u0004�T�A\u0003���7T77��ǎ�L�\u0019\u001f�fdc�y�>��\u000e�����N3��T8d��x\u0015^�=)��\u00001�\\ʃ\u0012(�e�\u0000��\n0t\f��ȭ�F\b�5\b�\u0016.�W�u�\b,r�an��j��8�V\u001f��f�c�2�\u0000�1m9���EX�I̺j\u0002rT��&��R�2p��І���Ɖ�\u0019\u0012?n{�j\u0018�7<\u0001]���j\u001dwN�VV/o $��a�\\ǩz\u001a�\t�F3X��\u000f���ƛU\u0019AE�Nu�4�1�\u001b�R��\n�5\u0019o�$)�8\u0007\u000e��+L���X���Ef������\t��U%9\u0003��ڝ�K\u0018h�4\n܁\u0018\u0004�R�6,�Y\u0019�����(���\u0002����q�jW:������Q\u0001Þ\r\u0010%\n\u0002��\u0010�F��9X�c�JH�⊶A4�����\u001bG\u0006��\u0002\u0018\u000b���\u0015���=�ܱ�����f�]�ڥ�XE�n|�\u001f�%���J�7&E\u0001Al\\��SwK��)\"f��4�g2�\f?Z� \u001b\u0007\u0014��\u000e[�S���L\u00054n��5�HZtM�v��6�\u0000F[�D�\\=����f2=��1��c�3�\f����6�H�J\\\u0003�H\u0006�b���x՗r�G��;P\u0002���~h~}�k�5\u0006��h�jM\u0017U��3·�}+��WQX�Iq\u001c�29\u0005�W�b�\u0002�muK�e�\u0014�}\u0001�\u001a�2�ɢ\u0016a`�\u0004z����P���v�2��\u0000��w7�[O&Y�Acɮ�\u00187b+�d\u001c%����]\\-�&W���&����!$3#\u0003��\u001fQ]�e��K;\u0000�3��םc�/��sou*+\u0013�cS��`�,\u001d{�_QCi���R�K/\u0004\u0003�W\b�L�E]��w!�yZG>�sQ��\u0006��z}q���d�)L�iK\u001ek\u0019���V�T�9�\n��\u0004@Y��\u0001��D��_\b�\u0011��7�́��]�\u0011�oJ��*���+s�o�/�Q�$:��\u001e�\u001a8\u000f����\u0000j��_�*�Ci\u0018�q�1�RW\u0013���J�\u0005\u001c\u000f�\t�[I\u0005�yWl�9����9m�H��\n+���Kh�I\u0018\u0005QU{\u0017\\�\u0011#�����\u0015�wR\u0013�Q\u000f�G��J��Yi��?�1��OaPKj�oH���RO���鸊�U/Z�K1\u0007!|����\u001e��_\u001b@�x�\u000006Z�[d#�{�쟱����\u0016�j�уT���_[��\u0018\u0006O\u0010}�� �hpᖽ\u0012�Od\u0010�h���*��\\�7�\t����մ\n�k\fRX`څ�Z����8a��>���\b%��{i�/\u001b�_�L�����\\����e\u00120>��\t�9%*?Zkq��w1\t!���}�\u001f�\n��&̈́d\u001c�~����M���:�A-yb�}>C�u\u0019)�5S��o\u000fkW~ѧ�F{+�\u000f\f��nER:�ᙎ9�=\u001ce\u0000-$\u001e�j�i�i��\u0018����')\u0017\r�5���Mp��!����\u0019\u0002�r�=�ƙeu�ޣcRFh�VX�-�ң$\u0004�q\u0002<��\u001fQ�#hH�q@��)>o�FK#3\u0012j\n\u0019�C�3,��pkK( �9�Vr\u0017\u001d�`�ϭ[�\u0013!�H���4�)��<ԯLֲ\u0014֜�P!jՄ�\u0000�\u000f�RA�1Jئ���ҫ)��Y��e�\u0014\\f���\u0014�l\u0002;\u001apJ�`�=);�\u0001�6\u0007\"����$�X;�h\u0002Q��\u0014*ҳPk$�%g�Oep���RE�A�u���z�=�U�����^��1��D��-:�Zj��~\u001d��\u0000��+ڠ��f��)�|��kQ�\tͰ�y�3+&r\u0005d�\u0018��BjĈ�8�\u00028\u0014;HO�h�NqSDE\u000eO5߾\u000ei�ӥd�n\rĤ�}�pH�ő\u0011G,@\u001f�zJҍ�I�Z1@ȫ#\u000e��k�䧊�f�:��'\u00165+�9��#�c����Oj��Zl�\f\u0006(�X��T\\\"(\u0000\u000fjn�!5�ё�k���j�)\u0012�V6�ύ0\u0007�95Ѐ\u0000`v�\u0015�A��Ms���������\u0004~�MYo�S�q�\u0014�a\\��&��j�p�m�od'�W8������\u0019%M��&�1�G�~�e\u0013i\u0016r\u00020�/�UK��\u0016>�[r@2ڇ\u001f\\\u001a���%��m1$o<l\"r=pqP�Qf�\u001di\u0014�~,v;��wU�C�\u001cY\u0014���p�P��o\u0015t��ø�?Y\t\u0003�\u0015�e��/�8*�#��U��L�Zr{����B�J}�R8�'��\u0015I?�\u0005�\u001f\u0013LI�gc/�x���g�A�1�;FQ>�k�Y�MYG!̑'��q�W�����49⫺�3���\u001f�\tO�\u000f��L�:�<\u0001�\u0002F+��UYgԭ8�D\u000f��҈��U����\"�\u0004\u0011V�����m�\u0019��e\u001f���e�,bV�\u0005#�U�P��������\u0000n*r�\u0012��>�\u000f�kW����0\u0003ۚ�&�]m\u001aG�:���\u0013�U{\u001cק��\t��v�Q�\\\nO��ӑ�\u001e�܌\t�D�)4�<և~k\u000fzc5[\u0004��q�Jf\r�B0�����׊R��\u0019�ĕ�\u0014�\u0007\u001cѢ3&�0���\u00006�i\u0000�\u0013\u0016�57\u0010�&�?�j\u0017��q&���\r�����5;����4\u0000:�W׊&9#a���M>\u001b�\u0000)�R<�B�l��J\u000e����<Ԁ\u000f\u001c�g\u0006�xՆT��\b4\u0000�)[�\t��z�0\u0003��/4���kC֙.\u0001���\u0012V���@�U�\u000ei�N\u001cQ�\u0005J3�\u0012E\u0002��BZ�g���\u0010{ֽk}��t�\u001e�Z�KK(ZIX�\u000e�z\u001bIe�&�$�7KmW���`��\u0019Y��\u0007&�1��]2Sh�|\u0004\u0015���Uz\u0017�a�8Z�鄗�\u000eO�\u000faS����%��4Ĺ�Mpu��f���׵\u0012s\u0001}�\u001cwt�ǽ9g7����9#\r�=�WzCR.n���2۶�Ϫ\u001a��s\u000e�sj)ı���\u001b�M�ZV�\u0016:���\u0005����\\���¹�`*\u0003���5���I�\roR�\u000f�-:X����I=�*MnH�k�Dޫ!�H��wXX����\u0005���\u0011��5c�\u00001\u001cT�P���\u0000��C\u0001G�0��F�;-b��g��f��@�Q�S���V�����#(�/k�[N���d��\u0006!�\u000eI��\u001a�RY��t�F������TE��|�6J�Ix\u0015�Vn# �Ҵ\u001b+�'�5ߗ�A\u0010P��\b��J.0��SIG\u0018!u��[E`'�\u0017$m\u0000��\b��;���s�l����\u001e��Y��ɩ\u000b\u0005��\u0014\u001be�#p�\u001a�\u0011�.������\u0001ǾE-L\u0016\u0013EQ�&+�u{K{{Hf�*�s�'�y��*�Dk�x�%V]�)�\"�\u001at�E#]�x�`�:�FC�nG�(W��`�u\u001d\u001fX[(�\u000e�b�����-�T��BJ\u0013�Y���Z���v1� �c���T��Xueu��x�'=�j��jv�K,�+�\u0016tc<g���S���v�Y�\\y�������\u0014MP��`Ks\u001cz�0\u0019\u0001��/�<�y���\u001bS�#�V#��V�g��F�p�\u001bО=�]$�.\"��̥̇s��P�\u0018��[�ͼ|8\u0017S���>����7��Z�O55նr��5��9y\u000b��\rB\f��z\u001a��G\u0012��6��\u0013�\u001eiRۈ���4)b\u001b\"��3�\u0013S !��i�\u001b6iA\u0002�� !@a�Ia�;�<�N9�\f�\fg5��X0��lr�4�hJTpi\fۘ\nR\u0000\u001b�ړ�\u0000\u0010c�i\u0000e�Ŭb�\u001cѷ��\u001e��\"]Ԁ��5:\\֙px����\te�W\u001e��e�\u001d�.y�\u001c�\u0003�U\u0007�J߼P����\u001d�\u0003d�{�\u0018�[��!�@\"�6?)����)q��\u0007���t\u001c\u0003C7z ��L��\u0014���e\u0005�{P�c\u0000Q*|8���\r���8�B�d✐��=�-��\u001d޽|����f�Q]���+.���\" �\u0006d��Oҹ��-j�M��;�T.��\u001f��u\u000bt}E��u�\b�(ϯ��'[l�l}\u001d}\u00150ٻ�J&�qy���N<\u0014�R\u0018}Nxɣ�@a�#�q�AU������-2�IC�;\u0000�Ջ�&�ti�!�Y\u0004c�ڹ��\u001a%8��\b��\u0016\u0017PkK�M \u0016��\u0018��<7�W\u001d@�\u001a���`\\��PE&M=\u000e��6?+�<�؏_ޫ77�\u0017� �G>$,\t\u001ȩ\u0006�no\"�7<\u0016�\\[�a4R���X\f���H�[;)����\u0000җq35����I�����\u000b\u0018+��Cݭ���\u000eE8�\b�\\6,\u000fu'�\u0000 �\u001fԘ��Hi�����/��銍�&��G\u0011�����=O\"��7m�V��ȸ\u001fzߥX��R�\u0000\"�eI�\u001dOO�gs�,�8� z��wF�H���X��m�n�%��ϭ\\m4�+\u0017�Kkh�yX��\u001c�4]\\��y3J�$�E��T�tP\u0002�@\u0000>�-���3{[\"��\u0000^\rЅ�7(\u001f��DD\u0004:��1\u0007r*�\u001d�+>���:n��?G٭���\u0003�\\/��\u0000�A�\u001fF��A)��\u001d\u001c�h�\u0000����{m&?\u0015v�#\u0017 ��*��1I��,ͳ��h�鐕�T�!i@�\u0017�J�����v�G{���\u0002�\u001b��k�j:5��\u000bC{l��\fr9��U��a�[$\u0000��O ���ሼ\u0016F��\u0015;�\ta���1q+�\u001bn�9�51|H�\\wWS��/P�mE��{�O\"''4��SG�E%����*�Td\u0003�Z�ԚY�oN+�?�zs�����Pg�e��-rY\u0000\u0004�Wn�z�L��1���ׄ\u0003�qMBD��i\"]�����+��sqĺ9:�AI8�\u0006yc[\u0007\u0006�x5��]\u0003\u0000@��Vr��ӣ8␄�*vַ\u0010kL�\u001c�wP\u0006��k[�8�\u001ekX4\fp\u001dˊH��\b�b��\u0012P\u0001���H�Pq\u0010�&���\u0000��Q��\u0014�p�M-�1�\u0014�]�\u0006��v�Ҙ\f8\u0004�6�p��$�\u001d�\u0001�0qOC޵�����\u0001sF\f`�\u001dF\u0001\u0006�\u000e�~�ѡ\b��+Q(�9�#\u0015�ϘS\u0018�dPܖ�d\u0014��4\u0000��g�S���\u000fJDChϽ-T�4\u00004�4�J%�\u001c�4\br�cku\u001c�2Q�c�\u0015��N��\u001bk\u0005+)@flq\u0018�\u0016j���H�=�\t\u001b-\u0004�Y\u0014{V]U\u001e��v��K�r��gn�6�Z���\u0005��w݌��z(ܱ���V\u0006K�M���{�\u0000ګ�\\��\u001e�P��/X,`�\nx\u0014f�\u0015�+�\u0004���X\u0013�`d�\u001aQ��W\u0005)d�Yk^%��ș�Dy\u001fN�\u000f�'�Q���\u0016,\u0001�aY�/�C'\u0011���:�Iտ$8w�$��ڣ\u0018��MB1y\u001ay\u0018�v3�\tT7�\u001c\u001aެ����Icl&[�NI8�@�EAn\"���}�\u0019��K\u001c\f\u001eigT�-�(i�یF3�S�y�\u000eX�,\u0007��\u000b��\"��ē�A\u001b��A]CJ�66A\u001b\u001b�-P_\u000fV�:`%�&)\u0016gbr*��6^�\u0004WQpr�&P�/�];��gLf�GW���yT��9\u0016X�D9V\u0000��+�O�cX��\tY�O��1�͞pNq�z�\u0016Э��P'�B����%�Z#�}\u0002�Z��\u0016��qO��\u0016*�\u000bu��f��� kC�C�Yf�D�\u0012N\u0000�ku\r�P�\\tơ\u000e�qv�J\u0010��:�Jԯ%����i��觑K���ԡ\b�\u0004v5�>\u0014t���d���S[Ao�\u0015�\u0004o>�Z�)�jR�\u00013�Xi��\u000b4pƃd�����\u0001���t���\u0006�M�>�ԕ���\\HN\u0007�!�����Y�\u000fO<R�#\u0017���rs\\�7fW���J��\u001c�Y��{���a�\u0018\u0000\f\u0001LZ鷚�\u0002�\u0007��*FH#�v�������}�\u0016/���;W�A���ʺ�\u0005�ɦ��f,}�;ޕ��a3�j�1�#�TCFW��D<k4M\u001b���\u0004\u001a�]t���B��\u0010̄���s��\t�\u0000؎��#\u001f�����\u0015��qVmC��\u000b?\u001eHq,q��<.�Τ}�V��Vb�M�{*x�\u0012�r�$sOc\u0014�\u001c�Ƞگ�9\u001a�=�;����N\r\u0000:�\u0005l�)�����r3�%�jˌ\u0015Ȥ1sN$�\t�(%���q����y�\u0006����{\nt�?Ji��\u0003�\t�p\u001c\u000e��\u001e�c�VѕGz\n2J�\",\u0001�jM�\u001e4�s['4�Q��\u0014\fܐ�nPzS\u001bOj5�t�M�\u001e&=(\u0000V_)�\u0019�Q3 B@44g\fi���C�3��\u001b�)1.&�Hc�m�\u000fZR�֦9lVDp\b4���|���Q\u0012\u001e)��H\u0011���+KH\u001fS�\u0017-�\u0002�{{\nc`f\u0014�M�CYX%\u0017���\u0019�f�M��ehK\u0006]��-Gͫ=����v3<�2\u0007A�wW&�z��E��h$,���9\u0018����S�W\u001a�ʅ{��裵q�����\u001d�oV�$4�F�� �\u0013�Ȩ\u0001V�恸�~Q���d��)F�;�A�u\u000b8n:��I\u0012�X����\u0013i����Oe-����v����\u0005\u0015P�\u001d�d��k��eմ�6�v�S���gn\u000e\u0000?AW\r\u0013�c�L�\u000f&?\tI\u0000}*�Җ��\u0017\u0012�F�U@�/�����5@8P\u0005]Un\u000b\f�u�M8�Z��i\u0017�\u0010��������qA����\u0001����\u0001��\u0019��v��s�gj�|_m���:\u0000�U^�\u000f���p��4�\u001a�e�����G\u001b7������\u0000\r�S�s\u000e�?�\u0016g�58\n��\u0005Rc]���]S������%���/4��\u0003��͍�ێ>٫�\u0005\u0018�Q�R|�@j\u0017\u000fl�I\u0019!��\u0002(�Q\u001a��O֢��i㓴t��\rʟ66�ލùW\u0007�\u0006�>��;\u0019j�\u0015�\u00127�A�~��.\u0014�\u000f��\u0003#�+����\\��Kw�� ;ٌ7\u000b\u0014q�&�_\u000e4\u0003�5D���l4�f�\"��!�g�)�5~�M/�5�ؔK���y��~�o]�Oq��\u0000\u0013��u͢�ʽ�=Eu���t_��ʳ_\u0019j6K�'\u001a�~\u001d,��M�o�G�\u0000�R�\u001e��4�\"���\u000f��Ev�&�_i�\\\u0001���ڋ�(�B�\"���k\u001d^R�^�9���\u0019M�t8<����.2@���t.��\u0002�/���{�������\t!'\u0001׵vt�B��O\f��t\u0016��YDHUۜ�Z�(\u000fJ�����;\t��L�C�r6� ��?<c��z\u0006$�-ǿ�\n�d�Tz�\\��ZwO\u0000�.h\u0018��2M\u0006�`�w�mȖ���\n\f\fR\u0010טpF)�c�B�K\"�\u000e@�\n\u001a!�s@\u0007[D��#��\u0005,r!�1G�Jb�����|S��DQ%���E挞\u0003\u0019<b�\u0003�d��<\b\u000b�\u0014�y<Q�@AS��\u0000Ӧ��5�*�m�\u0001A\u0012{P&)�\u0014׭l�kT\u0000�>aN��Zhp���-\u00001�ں?Ju�����aw\u000b(��\u0011}k���Z���6�H���S�N�'ViWzƘm�U��F�\u0018��52�\u000b{�v\u0004�+\u0007��y�\u001d��:�\u0018\u001c�+�|6�xo�\u0017O�-�I\u0015|�\u0001���S�UǃJ�;%�e���X�Q��\u0002��U;n\u001eO*�\u001e��]\u000e���mRI\"h�<27���[�-�`���\u000f��\u00058��+\u0010�q��\u001e*-��䒬���\"\u0006F\f��G�*�\u0019A]߬\u0017QZD�K���q�\u0019�\u001bT���:�N�\"��-�ƃВi�}\f7�,�ͫ���`S��4���?5���3U��S�(��\u0013}\u0019i\u0012���\n\u0013�v��g�\u0011S�`�|-+�B˖-\u001f��%H*\b9\u0007�k�\\�]K�9��4r/��*��n'\u0015�t���I��RL�\u0012�'�\u0014���\u0011Y�U_�\u000e�\u0016��\u0017��yu��g�MZ\t\u0000d����ޭ]oW:e��b\u000f\f�����9a\u000b���N��ii!Y�Q\u001b\u0003��֩�s\u0000P\u0004���d�<��D�(E�\\��\u0000���Cj��n��\u0010���Eo֣�������-eC�H\u0001�뾩ܠ���֖��[U^�U\u001f޽\n�\b��+��R�;�!��@�=�ݎ�zm�\u001d0��������\u001f�e!��́H�C\u0017�\u001f�\u001f��ݩ?�/������\u0006�{��.��S�����N�\u0005W,�\u0018r5�\u001a�ݝ����|x��hn⊠��\u0001|��\u00013D2@�(��jl��r��M�x:�Po82��,��,���C#�s�J���Y�(\u0005�\u000f(\u001e�Ҙ�n滱V����S�Da���a8�ںD�(���ӉkZ\\�F�5���[�}�\u0002�6k�|H�Ė�_����s���i�k�h��R���:�=78���-_ĵ��Z\u0004zӑ�##<V�0�\u001d�R�V�#3}*1\u00075b_���֓\u0002.�\u000b\u001b�چ�O\u0014�w¶O�%<�H�\u0015��\u0007Ҙ=�\u001a��>G\u0014\u0011�Ƙ �\\�\u0012����Z��\u0015R�w\u0014����r�\u0018�&Gߐ[#�Tg�H�\u0001>�\u000b�1�I\u000f[\u0011����\u0018����\u0005I9�;�0[�˃A\u001a&�X�46�\u0007\"�\u0019��V�\u0002�\u000eM\u0000;\u0012d�I��\"�C���{�M0\u0006�`���j������[Ū]��*7�\u0002�8�Piq��\u001c���pqP�\u001b��[U���\u001d�R��oL\u001b�I\u001aU�\u0018�J�0�\u001e�DT�q\\C��V���\u001e��\u0010H%��\u0016�,WZD�\t�\u0000\u0003�O��-�ʩ(�����6��\u0003�>���\u001dC5�\u0006m,�\u001c�<�O�t\u001bK�/c�\u0004���<��sx\u000b\u001dVF\u0007)�'�G�M���D̎���\u001f�m��\u000b&Ka��\u001d\n��Y�˨X�5�������\u0000P�\u0015�N�F�\\.��C�I��Z]1X�Fa�g��Z�^J\u0014rg�\"���da�)N�T� \u000f�]�4�+���\u001f�\u001c\u001fއ��4�\b>\u0011|\u001c��8��\rqլr��N�,2u\u001bu\r�\u001b0<\u0018����k�g���湶��i'�\"�\u0007%�\u0000�?�\u0016�×OЛ$�^���t\"�\u0006\u001b,Yl����*=\"\tt�*U{�\u0005d�N|1�\u0000z��J���ĳ\u001c�}M*�i.&ier��%��ZU��\u0019�1��2J[�\u0011�6-\u0016�}<��\u000bI\b}�Q��j;i����}��J�Q*�W��FVD`�\u0019j�Mި�F�5>�8���\u001c��IQ��p�\u0014��\u001d�O��Gc\u001c�\u0016���3�F\b5C��\u0015�A�].Q*w�ۃV�VJzx)�6�'Pد�\u0000T�w��q���olz��\u001b�w��n�\u000fj�������\u0014z\u001f\u0010�Sdu�\u0013�_I�U��G�35����0\u0003�T���E����?�BE%ρ{\r�\r\f�\\�*7r���Z����\u0006��)��'�\u001f�\u0007�aQF\u0013CB?�N}�QO�ʑ�dc5�\\���wN��X��F�ZY�[�O�?Js��VϨ��0���#�p��:cU�\u0000ö\u0006�h���g2/s��D�������:���\u0017��r����\u0018�B���\u0013����ݖ�Z��q�W���\u0000G��a��H��\u000e�\u0003\u001b0=�\u0015�\u0011�_�\n����p�\u0007$}�S�iʶO�U�l+�x�\u0013�4M�a\u000f\u0014+�+�\u001c$*\u0001��ެ���z���Lʣ\u0015fڏ\u001a���eN!���j3��֜M�[�L��\u0004Y\"ӆ�\u0015\u001eysN�[��A�P\u0002��%\u0002��n\u0015��\u0001�\u001d�L�\u000b�@�^�-�9�\u000bdP-˟�\u0004��c\u000e\r\u0016��R(48qG\b�2⁛��p\r�\t��=*R�b�v��F\u0005��dm�mϥ%\u00074�`&)�y�\u0003�q�s &=i1���^\u0000m�\u000e�\f�+��ic�iҧ<��\u0000�R\u0010�&)\u0006��dR#�ɟ�0C\\��W΅�n5�[�׳D��������Λ�j\u001a�����\"R�Tp\u0005]���s���mN���k�W�F?!��Ud�\u0016���֧�KޓҽQ\u001c�,�jb(��'$\n\"h�;YZ9��\u0011ثpj�\u0007�~��\u0019�\u0012\u0001�KDM�+Y�UY�\u0006�{����=�&\\�Y��[\u0011��$�+�m�\r�J+��|N��n��\u001c^\u001f�i\t�f���c?cO�\u0006\u001e�F\u001dr��y'�@�uȨN����i�Kge\u0004r���ݴ�Ub�⠹��\u0016�\u0003�`��j׭�@ڎ�9�|F�ǜz\u0015�RUD��x��u�����R�w\u0012�\u000f\u0001\u0014p?AQ\u0011i���ki\r��;�M�5�~���/����\u0016�,�!1�l�5�r�N�R��4�\u0019\r�n#|C�4g�Ueф\u001b�dc\tI�s�\u0003����i6�p!\u0007�\u001ark�i\u000f:{K\u0000���������x\u0015����-��Ό)�W@�iv\u0016�\u0011ZB�肫��+\u0007Q�(U��\u0000\u0000�cVʯ�,[e�����l~��\u0000�r�O,է±2'B����ſ�I�\u0007�ML\u0013P.�+�Z�8Y�\u000b}����G���DY��U깢\u001bR\u000b.�d�F�F|��Q\u0004�\u0012}(Go\u0013��>�@������O��G܌\u0013�=Mp<��궳��[4�\f��=u���\u0002l������\u000fjk���[�t��ȷx���Jv�\u0000z��ֵӶ�e����F\u0011+������Z�����~����� �a]�Da�p��F��T�g\u00045�\u0017��2\u001c~�M\u000f`�lb�r����D\n�힦=\u0019@�\u001aE��\u0018K��\u0003\u0006��\u001fڲ�NPy�\u0014�\u0019pЕ\u0001T(�\u0006\u0005s.�T\u001dD�1��w޺q8\u0004�W\u0016�\u001dA����3����\u0015��\u0011r�����%J�\u0019v��\r\u0004���ہ�\u001f�zc� �0��I��ˊ��R\\b�a>`)1�F�\r%N\r\u0014�\fy�=i�\u000bN1�r�kM�������m���� �IB���A/'\u0014M�#)�P�ph\u0001�a\u0005\u0006�\u0000��e�\u0016Q��\r\u0018��*B\"@'�@F��T�O�${PHL�u��\u001f�4��|\u000fCA?&�\fa��G\u0014�\u000e)\u001e��\u0011\u0011�T��К�N\b�8��!�\u0000��kAIO�l������G_�\u0010��Y���Z��\u0018,Ʉb���\"\u000b\f\u0001�]�\u0003��ꋲ�\u0013���Gϸ��+�t�ý+F�d��nn{�q��\n��>�-�k�\u0000*����/)\u0005,$k��X���L�4�ec\u0002$Ev��[�j��ک��4{�\u000e��[[���cR�YG\"�\u0012J��2\u0011M�i�Xx�-�򜻻\u0016,k.�[\u000b����u4J��q~��i�r�\u0000(\u000b��s\u0013�\u0000O�MW�^��4�m^�[+��� ��\u001fq\\#�:r��\t,�.�y�_�\u001f��\u001a=R�m�d.�Ǖ�\u00155�O\u0019G\u0019\u0006�ז�i'<��jB�^ے�喣���d+#d\u001fq]\u0014Pe����������5�\u0004k�H�\u0000ݠ��k�+\u0014`�pAȩ���u+xົg�6\f�\u0018�\u0015l_\u0004\u001a=!�R[˥\u0015�a1����955��\u0000��\u0005�Ǭ�I՚��B`�nY�f����\u001dC)\u0004\u001eA\u0015�u�J�_�:d�M�\u001e+({̋r�9B\u001b��XAXui���_K�Hm�14�w.Gڇ�^\u000b��e�aqp�.���prx�TՌ��:�?\u0002�S\u0003w��;~�اTi�1[�M��\\��};W[��:��3��Fͬ�]\u0001s����(\u0012���jf�aqo\u0014ó(4\u000b@-.�l������'�N�'�g�c�M�>�j\u001e&�JU3W��|#j\u0006�>&����\u0000��?AE\\>�y\u0018�)����)d�\u0000ԙ��Ӛ��\u0000\u0006�3\u0005�����~�O�:�h��+�\u0010�D^�\u0018԰��H��*�X�[�8\u0013ey�\u001c��J��\u0000��Ga\u0019�� {�1U7�\u001b�j!l��\\\u001f8%\u0000�\u0000v\u001c\n�hVVg�zCs�Em\u000bK3�AܚZ�`\u0019NA\u0019\u0006��i\t�Z��ʻ�-м�<\u0016#�?�CZ+@�Z��e��&�ӷ��S�J\u0014+_�45Q�Υ�c[�\u001a~�spN6��޸t�\u0019\u0019��c�]+�=�N��O2��ǰ�d��]�\u000fV�w��\u000f�ۺ�\u0005�J�)��KCM��W\\�\u001alc\u0000ԕ�&��\u0007N D���`ӳ\u000e�\u0016H��\u0003�3\u001fJ\u0010�(�\u000f�'���b\u0001��$\r��/\u001ec[�\\�@#.\u00066�9�j\"����\u001a�\nS�9���elpkRrsHh�\u000b�*M�%�\\�j>\u0011�3G\\�\u0004JGsH����i��ȧ�m�Q�aM2\fL�#�2���M\u000e��\u0014\u0002\u001f�⍍�°����Ii6��w�X������R���$�^\t.�鋞���\u0014\u0005m��Y=�z\u0007H�,�k\u0014���Q\u0014`�9c�hn��mzJ��\u0004\u0001�̏�ƥ����n�atu(�V��y�VVV\"�+++Y\u001b��gڌ\u0001�T^��Zk�s�ܠ�t�wC�*R��d���V\u0019�cI��u\u0019,n�\u000e�*ގ��U~�KIIx����^��Ι��4�\u0018�]G�2{\u001fo�p��Y�.e����4G\u000e����iu\n��\u0000�\u000bk�ʌ�I\u000b�Ԋls��:�r��E]iL��'+�[S)��ޙu����\u001be\u0001�����>��P�����u\b��ϣ�M����jqʡ\u0017�}�\u0000j\u001fG���5(n�<��{�ϭ�6C\b�����ƛ��ȉ�A�\u0010\u0001=�m'S�W�㻁�W\u001c�cP�Y�\\j\u0017ZBZ�\u001by����\u0001�ן��+6}:\u000eIG\"��X��ҝ�\\ھ\u0010��\u001c�\u0014֗ԏ��CZM\u0013%Ņ��6}_wqU��V����{$x�.�u8��*V��\u0004��\rK`Ie�E`=['�؜�\tV���Sjhs\\�#^����\u0011��>�\u001e�+��u$R� VE\u001e�h\rAZh\u001d����~�����/,cvP�\"\f��):'\u001b\"uj���\\����K�s�:����_\u0002�\u0005\u0003��4J�E\n�\u0005\u0003\u0000S3�'�\u001fr�br�c��ܣ�\t~��U[�2@)\u0016i�\u0011Ɨn������n�:��P��'�&��d*���-X�����NAd\u001f��[-�:�\u0019��Z�1�r�~\u0012����\"��=�f��u\u000bin�\fP��>A\r���U�s[�5Ov׷���\u001a`�іgO�\u0017GƐ���\u001f�Vz��Yu[:�%�^'�\u0000�phE����\r��\u0000`\u0004�Tv�ut���j\u0017�;[F�=�\f\u0012+������\u000e�\u001c=>�QU�����\u001diz���Ż�\u0010�>�V���H���y�i�$�-L� �9�+����\\`q�\u0016{-r\u0005�l�i��M�+E�M�}�\u001c�\u0001Ei��9���Ӥ�Q\u001aZ�&?Z�$DĠi�h\"x�\u0015��b���H��<\u001a�_k�e�k#�@��`�=-���1Lf�zӟjڎi/��!��\u0001g\u0002��|lLP�^iTQW�\u0017h\b�R$e�m�J��jKPo\n��4�\u0006l�\u0019�ח�d$\ni;�\u001e\u0007���\b4�s��jN<���5̀ɮ���\u0006��p8�}�䅑\u0007s�?J��&�KK�M\u001d�/s�En\u0007�ܞ�;�\u0010�3��{\u0019\u0004\u0018�\u00003?��m,<'��>%�\u000eX�}\u0005\u0019^w�u0\")Rhđ�e=���|������\u0013\u0013\u001c�\u0010�\u0000qGG\"�\u0018�\u000eU�\u001aM\u0000����ח�[���<oei∇ir{\u001a�P�R��9[������#\u0019ݵ��'\u0018e\u0019ev���:q�\n��}A�)�R��N��Z\\6&\u0003�?�~��s��SC�ͬuX�\u001c�i�KwhdV\fVFFǡ\u0006�\u001dw�+�Y5��\u0001}\n��?�_cC������n\u001aC%�ג�_�#��^�l�\u001a��-5����yv{\u0006Vc\u0011h�\u0007\u0005~�7��nv\\G��]C�'M\u000f�:����o�\u0000~F��j�,1ʥ]A\u0015ݦ�dT��qqx\u0019��K���\u001e�UG�h�w\u001b��#�{T�X\"�\u0000��_\u0016�M�N�G/(O�������X�Q��+�tރ��\u0016���k�\u001cШ�s�b�\u0015�7�\r?T�o�PK!���G�\\�E\u001e�cr�&�Ot\\\u0000~$����^����`�\u0001G�C��UJ6\u0007T�\u0007�\u0004\u0011��_�Tӯ��-�c2FU�^0q\\n\t\u0011���\u001d_�@����&�֤ښ'�o\u001bY#�\u0010}i�\u0017)o$\u0007�\u001b�}�3K�\n�d�e\u0018�Eq���\u001dz\u001e$LT6�4�\u0000=��[.�n�1\u000f�=�LTm�w�����c\"\t��\u0002��y�&��\u001c\u0015��ѫR��j\u001d�cM��M�`��FȐ/�޹>�h�7ZǦG\u0019\u0016�����\u000e<������_��Q'�be�\u001d���7�R�m���\f�Z��\u0000\u0000\r����t����q�z=EV�}}\f����5�OBeF�Ko6�q\f�O��O�H�c5\u001b���:�Ejz첺N��\f����~��A���q�\fZ�Lh���\u0017��y\u0000q�\u0011�4�i���`�\u0016\u000f!�K�ZG�8ܥ!H\rL\t�-�e �T���h�T>�\"�Y\u0007�Kؿ�r�\u0006M\u0015زmZ�a�*\u0006\u001f,�ֆ$\u001e�\"�����2�� w�\u0003�x��klx\u0015�_.h\u0003k�)�9j|�)�\u0017�R\u001a\t��J\u000f�\u001f/�/��E\u000fc\u0019�a�\u0015-r��lv�\u0014\u0012\"�%܊\u0018v��KQw\f�\u001a�\\\u0003�\b���M)�!\u0004�W�\u0000=\u0018%�\u0006I�^��2��@���\u0001?�\u00164���\u0000�qn���u=�\f2�&��\u000ek�@\u0005P�`\u0001�+��-�\bߤ�\r�沲����b�n$�J�\u0012ൌ�\u000e\u0007�#���Du|�`�����tY\u0011��2��\u0007֚�00`\b �؊\u001a�E��m��*���$�\u0011@C3i7�e9&�O�%=��\u0000I�/��mE�i�\u0013\u0016q���}\rh�ة�M�Y\r��;�u-��\u0005ō��ޖR���g�HҢ��M����Ϋ�a�O�\u0004V�\b��cA�Tb���un�.\u0005U*�V:<�\u000b��]��w:0>Ū�\u0004RY��3\u0012Z.Q��/���M9[Y�<��O��u=�\u0016:|:��*�D\u00023˩�\u0005uuT{(Mv�uY�ֈ�~�u=\u000e���C�q�#�^|�\u0003k~a��פՖX�\u000eU�C^}׭>G_���\u0002L��\u001ek\u001f���,Ѩ]28�R#l�=G\u0014�lyg#цk�e,�\u0013�qt�P\u000b�v��1�\u0013�үZ���\u001e�kIl�Y��\u0003�p\n\u001e��$���4�\u0007\u0006\u0011�Y=\u001aR��%r�$n2\t\u0019Ȯ��\u0010��Cu,\u000b�\u001b�\u000e�;\u0003�N�4�#{\u0004�D홭���<��\u0007V@M�\u0017*?�m��5����Εm>QS��8\u001e4|��@\u0019ɦ溈\"�$\u0001�`�<\u001a��#�t��e�\u0003��V+�\u001e�Q���\u0015�\fn\u0003\u0004Vڴ���+un���H��0�Fi3��8\u001d�B�N��D�\u0000�\u0012coҍ# ��y���n/��+��T�<�tQ8�\b45�$ݠ�8�)�w�\u0000\u0004w&G�Pvz����۵��G,-Ọ\t\u0000��j�SM��+���I�,p?�\u0004o�J\r8h{.-�\u001e6\u0012��\u0010j��˗@ׅ͹�?�f\"4\u001fS�O����\n��P�\u0014+\u001e}��QZT��uD\u0002yQ\"������aQ�\u0016:��:i�`�\u0000\u000b+�y[��W��Q�5fO�\u001es�9[f\"���I$Rq��kY�v\u000e9��\u001aA\u0014�\f�R\u001dph\u0000�\u0005�<}j~�0�EBi�p��1�?J����\u0018*XS&�F�ji�\u0015\"\u0002wqڴ;Ҹ\"���LB�姣\u0003�4��\u0006���\u0011�\u0006��j\u001c\u000f5>�MF7\u001aCD���C\u0013�\u0014����\b\u000f-J��w��\u001cз>k�A�ނ@��\u001cҎ6�5��6\u0007�5�L���Z^���*%�R\u0003�|\u001f�\u0012�7�d�\u001e�����~\u0012X\b:v[�<����t*�\u001a�Z\u0016 ����k\u000b���#-�����B�\\\"��lc�`*��i\u0016��-��L�%���I$�ߠy�����U�Լ�Qͦ\u000b7\u001e_\f/؁ޠm��}���Bv��z\u001a�y\u001d6�o�F}5��\u001ff\\�Ew\u0003C2�S���\u001dew=�����g\u0010O����j^�����\u0003\u0014�\b?��+���j��a��.\u001e�U��l��T�����G����K�\u001c�O��\u0015o`��\u0014_7)W#'�U�I�㽷���i/&\u0003�\u0010�W\u001eªV�@�oc3��Ʈ�4Ŵ�\u000f`�\nݨ�X�<\tQ\b���\u0000\u0001�8�%�\u0002\u001f\u0007��p8�,����\\��^\u001fSA'����\u001a^=��\u0015_�JV)�F\n���i,2�{�m\u0018�*�ֲ�9n�b�\u001aII�U\u0019&�����U�ᕆ\b4�\"���$MR{�\u001f�\u0010\u0007>�{����\"�I�\u0017���~��r_���j�2xh{~��4�wZ�/ɉ������5�\u0016#V��9��Z�H\u0007(��\u0000b\rX�x,��bw�\"���sQW��\u000b��V\u001eU��}\u000f44V�Ö\u0019-�e�H\u0014����E�l���Oq���r\u0014\u0019_�U\u001d�<b��V���\u000f��\u0007�\u0001^O/�Q�Oi}W��1�\\�:�\u0018���ҹz�g9�\"�ut�W\u0018��$R\u0013<�b�\u000f<�Wߞ�h꾕�hV�\u00161\u0001q����ݓ��D�յ��T��\u0004�(�Q�\u000e�� ���V�#F\u0013�[*��\u001aAڻ~;L����\u0000���\u001a������,�I�b���$_֍5][�mz��J���{\u0012\f��\u001c��v��V#^{WC��\u0016z\r5��Ԑ\u0018�-����&f\u0001I'Ҩ�\u0011ux�X�ؘ3+o|z}*��Z�z&��̇����\u0013�����K�X��d�]?\u0017���Vϥ����\u001e���\u0010T\u0005�R�=�\u0006�\u0019�\u0002\u0014\u0000�����ا\u0001�-4��($�-4y��S\u0010O��_J��V\f1ڍ�c��5\u0019,�D\"�\u0003H,{S�p��5\"\u0006dӐ���@\u001cV\u000e\r\u0000)��ӈp������ \u001a��֫��\u001e���\u0014���9\u0006G\u0019�h�ڕ[w�󊆸����MLC*�x���<й�\u0014\f��a� .A�]\u000fsHc�L���✈��4{����O\u001aS\u0001Q���(�zK��>O���#\u0005���MX�M.\u0001m�Z@1��G\u001fj.����6��V\u0012FT~��1��#>-�\f}��D]]��@ܴ�\u0015G�\u000f<�:�D�r\u0007�+�?E�t��tH]�\u0019s=�\u0003�\u0010��\u0016��J�#�\u000f�=��jN�W���K���+ɨ�OP��,䶶�R9F֒Oo��A��N�\u0019��Lg�4��2;\u001eՔ�\"�-�qm�\u0017'��ז}�u��ʹwp42v>��>�\r��\u0016q�{�\f�\u001f\u000eoG\u001f_�J�\u0007W���I��BW(H`pT�N\u001dቜ��%���f,�\f�DO�'\"�'O ]%\u000f�\u0012j�u����S\u001f��Ȭ���W\u001d%BiV�c�\u0007�ݯ�cM}!M���4�*��\u001a�-6�\u0014\u0013���\u0000�uZ�?\u0019`2t�2��w#?�5N����������'\u000f�?Z1dG\u0019V\u0004}*�KId��\u001fc^�\u0007?'F�\u0006X����#\u0005ۿ�\u001cQ?\u0010`�Ϭ'+�Vh�S�G�+����vwq�G+\u0007��\u000ei�cZ���~j�ɓhSϠ�2�`���]�\u001e܆�)P>U� W`����\u0010����~���~\u001aK��!\u001fԌ+�λ�l~a���Ϩ��[�d%�Y#���C�G8�<x'܊�_���\u0012H��1\u0011�\u001fBx�WQ��h�W��H3�\u0004`�b�@��4���fW�_\u001dq���+���t�YӔ���\u0007Kiږ��\u001b=BF��G�8��#�\u0011�\u000b�-l,b�tȼ\u001b�e_����W- �\u00112��R](yW�P\u0000`~���Q:�qchpAc#���U�}���K੭Y\u000f���ZL�a�Auൎ�!W¶\u0016�OZ���-\u000b�-Ź\f�X���3V�VY�V�+9\u0002_��kr;�\\}���J�\\��}B(�(��>�\u0003��[5��p�\u000f\u0019%��VJ���j+\u0018b�Ѣ�D��h`0x�\u0000�R77�ZX�Ԯ\u00165]�5\u001fo{\f\u0012;O*�s �\u0016<dpk�u\u000fP��\u000f%��M�9�\u0007���:�,�S�~�W\r5|v1�z����1\"\u00158�=\u0000�aޓ��4��=uƸ(G���d����\u0017�M\u001e�Gֵ�V\u0015��\u0011i��N1�b�\u0019/�A$NX�b�ZTD��q�4ƒ\u0018�\u0014�*�l�#֐Ȝ��ФSɍ�S$\u001a\b�ڔ�4�Tc>��\u0006\u001e\rmy8�:��[T#�j@\"A����Np✈s��dի/���\u001aܫ�\u0016F��G�`\u0000\u001d�T��Ts��\u0004\u000b\u001c�i� ��ሦ��h\u0010�\n���Mƿa\u00163�e\u001fޣ�⬟\u000f��g�t��@�q�*��+l�k2H��(T\u0000z\fSWW1����p�~��\u00171Z@���TW7��(u[��\u0004���#���yxU+9Gec�m��MWS{ɿˋ�_AR\u0017�%��{\u0005�ʳK\u0006|2\u0018�f�����L>\"l���_bjG5\u00077\u0019p9$ơ���~\u001cJ��֟�f��)9rŌtn����\u0002}�\u000b�\u001b�x�y\u00129\u0015�3��=�\u000b���h���\u0011�������TY\u001c����1�[��:�w��-BD>q\u001f\u001f|֧C��ŕ)�E�7e\u0010xm�#���ڥ,ѭ.n����\u0006\u0005\u0018\u001f�<���\u0016���{j�w�\u001al\u0005�\u001f/��_lt�}=\u001cB\u0018���;d�ֶk�\u0015�;\u0017e4S8<���|M�7}\u0007~\u0007x�'�V�˸.F��*7��E�N�\u0016�g|\u000e1�W:�m�/�4�f,��.A��}�)\u0015�Y���V�\u0011n�j���؏Dc���W\u0010�\\���[�bc]�S��\u0001;�6�������Q��M�ZO2�;M�-I<58��=j?��(�\u000b��R!h��@�H�ԇAK}��q�h��\u0001*\u0001l\u0010{���:���\\d��^\u0019j��d�M˙��ܰy\u0004���ǵP.d�שo���b,�$]ۂ�޺ķMg�Iss���]�� W�%�k��.�h�A+�\u0007��kF��lq\u0015�\u001d\u001d��O��X�\u0010�:��L\u0019�xJ:��'Ҫ�w�H��P�C\u001c[�\u00193�Rr*\u0007J�ԃO�!f�8R=EW5�����\n䥸>X�V��⩯�'F�U5�l\u001e\\�\u0002�Z���� s��#\u0018��\u0004�pBF1N7��\n�ո؞q�v�k�؜;l��� f��k[x��\u0004�)�1���A4�{`j�Ozy\u0001'��I�\t�\u0014�\u000f\u0014�m�\u0002($J鹎�?Z.�&\u0017���\u000bh@�<z���Lܯڢ�$U��Jo\"�s�#\u0014!�<�h�����j\r494�\u000e)��w�4�VE��\f�N1Ox��\u0014�\u000el���l\u0000M5?��70��%\u0010\f�ޕ1s\"6��8��h�)?ڌ�\u001f�sq�\u0000�f�\u0013K�\rޓ�95��h\"\"Q�\u0003��|+\u0011�W��\u0010\u0012(ى5O$m�7C��Nwb\u0000X����i�~�f�tΣ���\u0019�\u0019��\u001f\r}ϥ=�\f\rΟ\u0006����x�n���y\u0005��\u0013���ۨ�//na�oi �%q�o|Uר���\u0011,�\u000f{(H���g�U\u001a)r��M�J�\u0014+�G���I�g\u0003� m�Gc�h��\u001bl<%;���̎{��\u0004��l�\\ۏGJ5�Eg�����C\t+{�\u0019\u001b�Hjn����s��\u0005#ִؓlg��_�VS�Y\u0014Wb�\u0006ət��镲?��\u001bO�\u000eA���ƢǡIa�I%H�}�75��lP���?Y�\u0017#�&��}2X\u001e�'��\u0006+��)O\u0016~�V�ǝ�����5�>?,c\u0015m�U����\u0000/i��\u0005\u001fڧ5\u000b�e��\\��hH��J�Mo�\u000e��9#.�y�ףw?&� ��'�T�m�\u0003��t��\u0014~�a�\u0000�\u0011[J0�C�3��?��=\u001eV:x�_�m���\u0000q[��uTa$b����yoX�6���\f0c����5m��c�\u001ds�(\u001eY\u0018H����v+{���K\r��YI��T�\u0017��K����\u0004&�H�\\{�*\u0003�ݱ�\u0017�1\u0010\u001dL�2\u001d6��T�$�V��㚲i�\u0011[�\u0004w\u0016\u0004K\u0005���X�\n@᪻6���\u0006�\"^ʹ�U(\u000bc\u000ey�_�v�;�GT�4h_�.���\u0000QXW�j2��K��^?d\u000f�]di=\u0015q\u00188���+Ͽz�R�WS�ᬛ�j�KF�[��\u0003��r��\u0006a�⇑�8�A\u0018��\u001el�@!\u0018\u0016�V�8�B\u0000wQ\u0000�P�8^�$\u0013ް�i�L\u001e(@m[i��ȡ�sF���1�r�M�\u0012Qɨ�2gh&��M��f`*J8�%\n�������\u0010u�+��C\u000eƐ�\u00007��V�Glw\u0014]g�5\u001d͏\u0018!\f�r)�%�q�OG��\n}�\"\u00060\rY����l{ɧ��*\u001b\u0015�\n�!A�Ղ�\u00009ⓐ��i��)T\u0005�8�\u001d]�#�i�p)��\u0001�\u001e-.י�ޙs��\u0011`��T}jL�`��jn���S��|5\u001d���hA�*:�\u000bBXs�\u0013�2\u000f\fZ�Q�(Dv�\"�\u0017\u0006�\"4��ӡ:nY�M����p��g��\u001b�z\u000b뚀\f\b���\u001b���`�+hR(�,h0\u0000�7���^�v�ߌ�9?l��Jh:��O����P��\\��5���P��;����}̧s�o��T.������O;K�FhО#\u0007ڥ�W7Y�v�5�����r���\fYB�K\fzӉ(u\f�\u0015=������,��\u0010�}N*Z�H]\u0000�\u001c[�I�\bI���\u0015MzyN�j�;,�-U���L\u001e��\u0014{Л�7�͸�fC<AO�H���DǗ�`z��(\u001dF+�Z�k\u001b����M����֍-�����E7��[Q���M\u0014\n^Y\u0015\u0017ݎ+�k\u001a�����r�J%���ýNF�\t8�\u0016�Y�\u0013j\u0017��������\u001b�\u001bvк�H\u0014(2�0>�]���\u0012�\u0017\b�CC*Z��j�h�.��>����\u0011�'�Kc`9���\f?�94ގʺ-�^\u0007���(M_J�Q����P����\u001fs��̪�B�Ϥ�\u0016A�\r#�����<��8�\u0010*��\u0016�oa��e�h�g(r\u0015�b��A�f�s5����e'�T���\u0016��\"X��޶�<�wW�(�N�P��q�6�\u001fPY�\u0001İ�'�\rs\u001a�_\u0019-<m\u0012��\u000ea���k���\f��\u0013>�\u001blf�u�Z�+aA�~\u0011�:����0?�u�`�����5��\u0010�/u\u0014>��~���Ԟ�J��Ղ�\\�\u0014d���\u0000\u0014�%\u0018�Ō�\u0002�\u001aE���\rgTAq\u001e��r�>\t'�~��Y಴i\u0014*C\u001a\u0017お���M�&��z����0�%���q؏�I|C�};�/V�I�D\u0011\"�p=�U�Rٙ<䕸�\u0011�N��dֺ����|YI_��Dg\u0014l�\u0000��A9�5�2���`Ss\r��$#�[\r��@\rr\u000eq[/�<\u0013�a�\rL\u0005\u0006�\u001eFi)\u001b��P\u0012jR��G����ғx&���M;$I'oARj00\u0007\u0014��eR�KR���uNY�\u001fZ�8\u0004�J�]�5��\u0001�(He� ���'\u0010[��<\u0001N��0\t�*\u000e���.�T�\u0014�}jQ\\��C�(f\u0003�ܛ\u0001��AC��\u0014Aț\f8�2��\u0019h��*\u0006!�&�̈�A���\f��\u0014�\u0000j�<v\u0014��b\u001f�%�B�SA����З 0r�qR�Z&�-�zTTN�( z�ݻ�\u0000q��I�\u0001�&$書r���\r+�ln\u001d�\r;<g�V�\u0001�p�n)�l�)�e��=�\u0006a�MX\u0007G�qw\u0019����H\u0018?�U��EKr�In-�\r�'����y_+^���=g��}\t~��en�\\Ύ���^ZF\u0006K΃\u001f�tk�(o�䶙r�1���\u0017D���\u000b5���J�y�ɯU�k_��������\u000b\u001f\u000eb\u0004��sX]q<\u0007����\n^�7�.�..,͌�MB)\u0000m�����G\u0003\\O!Dj���\u0019���+�NK��՛����XM�D]���K(�MG���L跐��!�,��z69\u0003�\u0014E�\u001ba��2G������N�E��2m�\u0011\u0003�Xb��;O�����/��eш�\u001eL��?���\u001a^��1~��=dː�\u0012�)��\u0005K\u0019>�̿1�I��u�J)��\u0010\n�\u0010P�O�kĪ�\u0016z�^��\u001a�G_F\u0006Y\u0014H?C^w=�ӗ�.,慿,�T����{\t���\u0013�\u001c��k��,�\tG�r|�{Z��o\u0004w\u0004}�C�\u0007�գ�-�}2��\u0015\u0003r\u00058�Wi.2r�+�u��=M\u000e㈧�6�{WU��R�X��O�\u0011GdC��ghn3��p8�h�I\u0017�F\f\u000f�Wi�;]oQ��U}Ub�Ԕ�(1�\nG\u0002�^�\u0000\u001c~� ���4MB�Q�Wy�/\u0001\u0010(u>��R:]߭��H�%�ո�>��.�]\u000e+;�Ϛx��1�/�V�CqysrN|Y\t\u001fa���\b�;bT�o,�թ���l��\u001b�>ޕ\u0013,j}j��>��kP� �N�'�*���w\u000eEH��\u000e8���:(a�Æ\u001cVGlf|\u000f���Z4�1�?ޤR4�p�\u0002��N1\u001b��-�\n9���u�\u0006�0k5������9�V�\u001dۊ��]�1�R�%�\"�\u000f���\u0016�\b�\u000e}9����WS���O�{�j���S�aX��H]�I9���r�*p\\�2|\u000eƤ\u001c���H�\u0015������kK��YYL\u0002�\u0019@\t���O5��!\u0018\u0002��\"�F������:\u001b�u\u0005�SW\u0012�2++*\tr\u0004<�VCޛ'5��j�\u000e����/uz��\u0001\u0014�k�沲����z�d�\u001e>)i�+3YYX\r������:���M#\u00181\u001e��$�J&�\u0000X�5bD��{s�\u0018�\u000e>�������]\u0011�\u000f\b�CKT����8F\u0011q�NVVW-��Y�I.\u0011����C#.�'�״���ଆV�\u001cp\u0005\u0015֝G�t����d\\�i3�\u001c沲�Z}M��\u0010�L�j4��)N}�:���>4�Z%�\u0000\u0001ym\u0014w vG�0߭I\u0016�<VVR�\u0015�6)/�~*nU��\u001a�Y����\u0007W\b�j��\u0000VB �A\u0000��I��++����I�/�%�L�\u0014k�sI�Gb��6�O�Ҳ��\u0016O>\u0005]�ភ��\u0016��yn���(e;Ӝ�VTe\\f��$�]\u001d_R/\u000e�$^!�\u0019<%o\\���:\u001bsa3��x*\bf���VT�YR��a�]3�\n�{w\r�z�\u001f�����YY@`l�ȣ�l�bI{z-eeBL�Q$8\u0018�\u0015��ʬ�����\u0001�jk��R�ÏJ��i\u0006J��y\u000f��}k+*b\u0015�T_��VVT��#.���"}],"Page":[],"Post":[{"layout":"shoka","title":"Java并发笔记-上篇","date":"2021-11-16T00:56:30.000Z","_content":"\n# Java并发笔记\n\n## 可重入锁\n\n### 可重入锁是什么？\n\n顾名思义，就是支持重入的锁，它表示该锁能够支持一个线程对资源的重复加锁。除此之外，该锁还支持获取锁的公平与非公平性选择。\n\n### 可重入锁的代码示例-synchronized\n\n```java\n/** 证明synchronized是可重入锁 */\npublic class SynchronizedDemo {\n  static Object objectLockA = new Object();\n\n  static void m1() {\n    synchronized (objectLockA) {\n      System.out.println(Thread.currentThread().getName() + \"\\t-----外层调用\");\n      synchronized (objectLockA) {\n        System.out.println(Thread.currentThread().getName() + \"\\t-----中层调用\");\n        synchronized (objectLockA) {\n          System.out.println(Thread.currentThread().getName() + \"\\t-----内层调用\");\n        }\n      }\n    }\n  }\n\n  public static void main(String[] args) {\n    m1();\n  }\n```\n\n### 可重入锁的代码示例-ReenterantLock\n\n```java\n/** ReenterantLock也是可重入锁，加锁几次就要释放锁几次 */\npublic class ReenterantLockDemo {\n  public static Lock lockA = new ReentrantLock();\n\n  public static void main(String[] args) {\n    new Thread(\n            () -> {\n              lockA.lock();\n              try {\n                System.out.println(Thread.currentThread().getName() + \"\\t ----外层\");\n                lockA.lock();\n                try {\n                  System.out.println(Thread.currentThread().getName() + \"\\t ----内层\");\n                } finally {\n                  lockA.unlock();\n                }\n              } finally {\n                lockA.unlock();\n              }\n            },\n            \"t1\")\n        .start();\n    new Thread(\n            () -> {\n              lockA.lock();\n              try {\n                System.out.println(Thread.currentThread().getName() + \"\\t ----第二个线程获取锁\");\n              } finally {\n                lockA.unlock();\n              }\n            },\n            \"t2\")\n        .start();\n  }\n```\n\n### 公平与非公平获取锁的区别是什么？\n\n如果一个锁是公平的，那么锁的获取顺序就应该符合请求的绝对时间顺序，也就是**FIFO**。\n\n对于非公平的锁，只要CAS设置同步状态成功，则表示当前线程获取了锁。\n\n#### 产生结果\n\n公平的锁每次都是同步队列中的第一个节点获取到锁，非公平的锁会出现一个线程连续获取锁的现象。\n\n为什么会出现线程连续获取锁的情况呢？当一个线程请求锁时，只要获取了同步状态即成功获取锁。在这个前提下，刚释放锁的线程再次获取同步状态的概率非常大，使得其他线程只能在同步队列中等待。\n\n非公平的锁可能导致 **线程饥饿** ，为什么它又被设置成默认的实现呢？如果把每次不同的线程获取到锁视为一次切换，公平性的锁每次都进行切换，非公平的锁出现切换的概率大大降低，这说明非公平锁的开销非常小。引用自 **Java并发编程艺术** 一书的表5-7的例子显示，在ubuntu server 14.04 i5-3470 8GB，10个线程，每个线程获取100000次锁的场景中，公平锁与非公平锁相比，总耗时是其93.4倍，总切换次数是其133倍。这可以说明：公平性的锁保证了锁的获取按照FIFO原则，而代价是进行大量的线程切换。非公平性锁虽然可能造成 **线程饥饿**，但极少的线程切换，保证了更大的吞吐量。\n\n## LockSupport\n\n### LockSupport 是什么？\n\n[官方中文文档](https://www.apiref.com/java11-zh/java.base/java/util/concurrent/locks/LockSupport.html)\n\n#### api介绍\n\n用于创建锁和其他同步类的基本线程阻塞原语。\n\n**该类与使用它的每个线程关联一个Permit（许可证）（在[`Semaphore`](https://www.apiref.com/java11-zh/java.base/java/util/concurrent/Semaphore.html)类的意义上）。** 如果许可证可用，将立即返回`park` ，并在此过程中消费; 否则*可能会*阻止。 如果尚未提供许可，则致电`unpark`获得许可。 **（与Semaphores不同，许可证不会累积。最多只有一个。）**可靠的使用需要使用volatile（或原子）变量来控制何时停放或取消停放。 对于易失性变量访问保持对这些方法的调用的顺序，但不一定是非易失性变量访问。\n\n方法`park`和`unpark`提供了阻止和解除阻塞线程的有效方法，这些线程没有遇到导致不推荐使用的方法`Thread.suspend`和`Thread.resume`无法用于此类目的的问题：一个线程调用`park`和另一个线程尝试`unpark`将保留活跃性，由于许可证。 此外，如果调用者的线程被中断，则会返回`park` ，并且支持超时版本。 `park`方法也可以在任何其他时间返回，“无理由”，因此通常必须在返回时重新检查条件的循环内调用。 在这个意义上， `park`可以作为“忙碌等待”的优化，不会浪费太多时间旋转，但必须与`unpark`配对才能生效。\n\n三种形式的`park`每个也支持`blocker`对象参数。 在线程被阻塞时记录此对象，以允许监视和诊断工具识别线程被阻止的原因。 （此类工具可以使用方法[`getBlocker(Thread)`](https://www.apiref.com/java11-zh/java.base/java/util/concurrent/locks/LockSupport.html#getBlocker(java.lang.Thread))访问[阻止程序](https://www.apiref.com/java11-zh/java.base/java/util/concurrent/locks/LockSupport.html#getBlocker(java.lang.Thread)) 。）强烈建议使用这些表单而不是没有此参数的原始表单。 在锁实现中作为`blocker`提供的正常参数是`this` 。\n\n这些方法旨在用作创建更高级别同步实用程序的工具，并且对于大多数并发控制应用程序本身并不有用。 `park`方法仅用于以下形式的构造：\n\n```\n   while (!canProceed()) { // ensure request to unpark is visible to other threads ... LockSupport.park(this); } \n```\n\n在调用`park`之前，线程没有发布请求`park`需要锁定或阻塞。 因为每个线程只有一个许可证，所以任何中间使用`park` ，包括隐式地通过类加载，都可能导致无响应的线程（“丢失unpark”）。\n\n#### 总结\n\nLockSupport中的`park()` 和`unpark()`的作用分别是阻塞线程和解除阻塞线程，可以将其看作是线程等待唤醒机制 (wait/notify) 的改进版。\n\nLockSupport使用Permit（许可证）的概念来达到阻塞和唤醒线程的功能，每个线程都有一个许可(Permit)，Permit只有两个值1和0，默认是0。\n\nPermit可以看做成一个Semaphore，但与Semaphore不同，Permit累加上限只有1。\n\n### 三种实现线程等待唤醒的方法\n\n1. 使用Object中的`wait()`方法让线程等待，使用Object中的`notify()`方法唤醒线程\n   \n   注意条件\n   \n   1. wait和notify方法必须要在synchronized同步块或者方法里面且成对出现使用\n   2. 先wait后notify才能成功唤醒线程\n   \n   ```java\n     static Object objectLock = new Object();\n     private static void synchronizedWaitNotify() {\n       new Thread(\n               () -> {\n                 synchronized (objectLock) {\n                   System.out.println(Thread.currentThread().getName() + \"\\t\" + \"------come in\");\n                   try {\n                     objectLock.wait(); // 等待\n                   } catch (InterruptedException e) {\n                     e.printStackTrace();\n                   }\n                   System.out.println(Thread.currentThread().getName() + \"\\t\" + \"------被唤醒\");\n                 }\n               },\n               \"A\")\n           .start();\n   \n       new Thread(\n               () -> {\n                 synchronized (objectLock) {\n                   objectLock.notify(); // 唤醒\n                   System.out.println(Thread.currentThread().getName() + \"\\t\" + \"------通知\");\n                 }\n               },\n               \"B\")\n           .start();\n     }\n   ```\n   \n   ![img](locksupport代码结果1.png)\n\n2. 使用JUC包中的Condition的`await()`方法让线程等待，使用Condition的`signal()`方法唤醒线程\n   \n   注意条件\n   \n   1. 线程先要获得并持有锁，必须在锁块（synchronized或lock）中\n   2. 必须要先等待后唤醒，线程才能够被唤醒\n   \n   ```java\n     static Lock lock = new ReentrantLock();\n     static Condition condition = lock.newCondition();\n     private static void lockAwaitSignal() {\n       new Thread(\n               () -> {\n                 lock.lock();\n                 try {\n                   System.out.println(Thread.currentThread().getName() + \"\\t\" + \"------come in\");\n                   try {\n                     condition.await();\n                   } catch (InterruptedException e) {\n                     e.printStackTrace();\n                   }\n                   System.out.println(Thread.currentThread().getName() + \"\\t\" + \"------被唤醒\");\n                 } finally {\n                   lock.unlock();\n                 }\n               },\n               \"A\")\n           .start();\n   \n       new Thread(\n               () -> {\n                 lock.lock();\n                 try {\n                   condition.signal();\n                   System.out.println(Thread.currentThread().getName() + \"\\t\" + \"------通知\");\n                 } finally {\n                   lock.unlock();\n                 }\n               },\n               \"B\")\n           .start();\n     }\n   ```\n   \n   ![img](locksupport代码结果2.png)\n\n3. 使用LockSupport类阻塞当前线程以及唤醒指定的被阻塞线程\n\n### LockSupport 的主要方法\n\n#### 阻塞\n\n`park()/park(Object blocker)`\n\n作用：阻塞当前线程/阻塞传入的具体线程\n\npermit 默认是 0，所以一开始调用`park()`方法，当前线程就会阻塞，直到别的线程将当前线程的 permit 设置为 1 时，`park() `方法会被唤醒，然后会将 permit 再次设置为 0 并返回。\n\n##### park() 方法通过 Unsafe 类实现\n\n```java\n// Disables the current thread for thread scheduling purposes unless the permit is available.\npublic static void park() {\n    UNSAFE.park(false, 0L);\n}\n```\n\n#### 唤醒\n\n`unpark(Thread thread)`\n\n作用：唤醒处于阻断状态的指定线程\n\n调用`unpark(thread)`方法后，就会将 thread 线程的许可 permit 设置成 1（注意多次调用 `unpark()`方法，不会累加，permit 值还是 1），这会自动唤醒 thread 线程，即之前阻塞中的`LockSupport.park()`方法会立即返回。\n\n##### unpark() 方法通过 Unsafe 类实现\n\n```java\n// Makes available the permit for the given thread\npublic static void unpark(Thread thread) {\n    if (thread != null)\n        UNSAFE.unpark(thread);\n}\n```\n\n### LockSupport代码示例\n\n#### 正常使用 LockSupport\n\n```java\nprivate static void lockSupportParkUnpark() {\n    Thread a =\n        new Thread(\n            () -> {\n              System.out.println(Thread.currentThread().getName() + \"\\t\" + \"------come in\");\n              LockSupport.park(); // 线程 A 阻塞\n              System.out.println(Thread.currentThread().getName() + \"\\t\" + \"------被唤醒\");\n            },\n            \"A\");\n    a.start();\n\n    new Thread(\n            () -> {\n              LockSupport.unpark(a); // B 线程唤醒线程 A\n              System.out.println(Thread.currentThread().getName() + \"\\t\" + \"------通知\");\n            },\n            \"B\")\n        .start();\n  }\n```\n\n程序运行结果：A 线程先执行`LockSupport.park()`方法将通行证（permit）设置为 0， permit 初始值本来就为 0，然后 B 线程执行 `LockSupport.unpark(a) `方法将 permit 设置为 1，此时 A 线程可以通行\n\n![img](locksupport代码结果3.png)\n\n#### 先 unpark() 后 park()\n\n```java\n  private static void lockSupportUnparkPark() {\n    Thread a =\n        new Thread(\n            () -> {\n              try {\n                TimeUnit.SECONDS.sleep(3L);\n              } catch (InterruptedException e) {\n                e.printStackTrace();\n              }\n              System.out.println(\n                  Thread.currentThread().getName()\n                      + \"\\t\"\n                      + \"------come in\"\n                      + System.currentTimeMillis());\n              LockSupport.park();\n              System.out.println(\n                  Thread.currentThread().getName()\n                      + \"\\t\"\n                      + \"------被唤醒\"\n                      + System.currentTimeMillis());\n            },\n            \"A\");\n    a.start();\n\n    new Thread(\n            () -> {\n              LockSupport.unpark(a);\n              System.out.println(Thread.currentThread().getName() + \"\\t\" + \"------通知\");\n            },\n            \"B\")\n        .start();\n  }\n```\n\n程序运行结果：因为引入了通行证的概念，所以先执行`unpark()`其实并不会有什么影响，从程序运行时间戳可以看出，B 线程先放行通行证之后，A 线程执行 `LockSupport.park()` 时并没有被阻塞，相当于没有执行。\n\n![img](locksupport代码结果4.png)\n\n#### 异常情况：没有考虑到 permit 上限值为 1\n\n```java\n  private static void lockSupport2Park1Unpark() {\n    Thread a =\n        new Thread(\n            () -> {\n              try {\n                TimeUnit.SECONDS.sleep(3L);\n              } catch (InterruptedException e) {\n                e.printStackTrace();\n              }\n              System.out.println(\n                  Thread.currentThread().getName()\n                      + \"\\t\"\n                      + \"------come in\"\n                      + System.currentTimeMillis());\n              LockSupport.park();\n              LockSupport.park();\n              System.out.println(\n                  Thread.currentThread().getName()\n                      + \"\\t\"\n                      + \"------被唤醒\"\n                      + System.currentTimeMillis());\n            },\n            \"A\");\n    a.start();\n\n    new Thread(\n            () -> {\n              LockSupport.unpark(a);\n              LockSupport.unpark(a);\n              System.out.println(Thread.currentThread().getName() + \"\\t\" + \"------通知\");\n            },\n            \"B\")\n        .start();\n  }\n```\n\n程序运行结果：由于 permit 的上限值为 1，所以执行两次 `LockSupport.park()` 操作将导致 A 线程阻塞\n\n![img](locksupport代码结果5.png)\n\n### LockSupport 重点说明\n\n> **LockSupport是用来创建锁和其他同步类的基本线程阻塞原语**\n\nLockSupport是一个线程阻塞工具类，所有的方法都是静态方法，可以让线程在任意位置阻塞，阻塞之后也有对应的唤醒方法。归根结底，LockSupport调用的Unsafe中的native代码。\n\n> **LockSupport提供park()和unpark()方法实现阻塞线程和解除线程阻塞的过程**\n\nLockSupport和每个使用它的线程都有一个许可(permit)关联。permit相当于1，0的开关，默认是0，调用一次unpark就加1变成1，调用一次park会消费permit，也就是将1变成0，同时park立即返回。\n\n如再次调用park会变成阻塞(因为permit为零了会阻塞在这里，一直到permit变为1)，这时调用unpark会把permit置为1。\n\n每个线程都有一个相关的permit，permit最多只有一个，重复调用unpark也不会积累凭证。\n\n> **形象的理解**\n\n线程阻塞需要消耗凭证(permit)，这个凭证最多只有1个。\n\n1. 当调用park方法时\n   1. 如果有凭证，则会直接消耗掉这个凭证然后正常退出;\n   2. 如果无凭证，就必须阻塞等待凭证可用;\n2. 而unpark则相反，它会增加一个凭证，但凭证最多只能有1个，累加无效。\n\n### LockSupport 面试题\n\n> **为什么可以先唤醒线程后阻塞线程?**\n\n因为unpark获得了一个凭证，之后再调用park方法，就可以名正言顺的凭证消费，故不会阻塞。\n\n> **为什么唤醒两次后阻塞两次，但最终结果还会阻塞线程?**\n\n因为凭证的数量最多为1，连续调用两次unpark和调用一次unpark效果一样，只会增加一个凭证；而调用两次park却需要消费两个凭证，证不够，不能放行。\n\n## AQS初探\n\n### AQS 是什么？\n\nAQS（AbstractQueuedSynchronizer）：抽象的队列同步器\n\n一般我们说的 AQS 指的是` java.util.concurrent.locks`包下的`AbstractQueuedSynchronizer`，但其实还有另外三种抽象队列同步器：`AbstractOwnableSynchronizer`、`AbstractQueuedLongSynchronizer `和 `AbstractQueuedSynchronizer`。\n\n### AQS 是 JUC 的基石\n\n![](aqs-1.png)\n\n**举几个常见的例子**\n\n1. ReentrantLock\n   \n   ![](aqs-2.png)\n\n2. CountDownLatch\n   \n   ![](aqs-3.png)\n\n3. ReentrantReadWriteLock\n   \n   ![](aqs-4.png)\n\n4. Semaphore\n   \n   ![](aqs-5.png)\n\n> **进一步理解锁和同步器的关系**\n\n锁 -> 面向锁的使用者。定义了程序员和锁交互的使用层API，隐藏了实现细节，你调用即可，可以理解为用户层面的 API。\n\n同步器 -> 面向锁的实现者。比如Java并发大神Douglee，提出统一规范并简化了锁的实现，屏蔽了同步状态管理、阻塞线程排队和通知、唤醒机制等，Java 中有那么多的锁，就能简化锁的实现啦。\n\n### AQS 能干嘛\n\n> **AQS：加锁会导致阻塞**\n\n有阻塞就需要排队，实现排队必然需要有某种形式的队列来进行管理。\n\n抢到资源的线程直接使用办理业务，抢占不到资源的线程的必然涉及一种排队等候机制，抢占资源失败的线程继续去等待（类似办理窗口都满了，暂时没有受理窗口的顾客只能去候客区排队等候），仍然保留获取锁的可能且获取锁流程仍在继续（候客区的顾客也在等着叫号，轮到了再去受理窗口办理业务）。\n\n既然说到了排队等候机制，那么就一定 会有某种队列形成，这样的队列是什么数据结构呢？如果共享资源被占用，就需要一定的阻塞等待唤醒机制来保证锁分配。这个机制主要用的是CLH队列的变体实现的，将暂时获取不到锁的线程加入到队列中，这个队列就是AQS的抽象表现。它将请求共享资源的线程封装成队列的结点（Node） ，通过CAS、自旋以及LockSuport.park()的方式，维护state变量的状态，使并发达到同步的效果。\n\n### **AQS术语理解**\n\n![](aqs-6.png)\n\n有阻塞就需要排队，实现排队必然需要队列\n\nAQS使用一个volatile的int类型的成员变量来表示同步状态，通过内置的 FIFO队列来完成资源获取的排队工作将每条要去抢占资源的线程封装成 一个Node节点来实现锁的分配，通过CAS完成对State值的修改。\nNode 节点是啥？答：你有见过 HashMap 的 Node 节点吗？JDK 用 static class Node<K,V> implements Map.Entry<K,V> { 来封装我们传入的 KV 键值对。这里也是一样的道理，JDK 使用 Node 来封装（管理）Thread\n可以将 Node 和 Thread 类比于候客区的椅子和等待用餐的顾客\n\n![](aqs-7.png)\n\n### **AQS内部体系架构**\n\n1. AQS的int变量\n   \n   AQS的同步状态State成员变量，类似于银行办理业务的受理窗口状态：零就是没人，自由状态可以办理；大于等于1，有人占用窗口，等着去。\n   \n   ```java\n   /**\n    * The synchronization state.\n    */\n   private volatile int state;\n   ```\n\n2. AQS的CLH队列\n   \n   CLH队列（三个大牛的名字组成），为一个双向队列，类似于银行侯客区的等待顾客。\n   \n   ![](aqs-8.png)\n\n3. 内部类Node（Node类在AQS类内部）\n   \n   Node的等待状态waitState成员变量，类似于等候区其它顾客(其它线程)的等待状态，队列中每个排队的个体就是一个Node。\n   \n   ```java\n   /**\n    * Status field, taking on only the values:\n    *   SIGNAL:     The successor of this node is (or will soon be)\n    *               blocked (via park), so the current node must\n    *               unpark its successor when it releases or\n    *               cancels. To avoid races, acquire methods must\n    *               first indicate they need a signal,\n    *               then retry the atomic acquire, and then,\n    *               on failure, block.\n    *   CANCELLED:  This node is cancelled due to timeout or interrupt.\n    *               Nodes never leave this state. In particular,\n    *               a thread with cancelled node never again blocks.\n    *   CONDITION:  This node is currently on a condition queue.\n    *               It will not be used as a sync queue node\n    *               until transferred, at which time the status\n    *               will be set to 0. (Use of this value here has\n    *               nothing to do with the other uses of the\n    *               field, but simplifies mechanics.)\n    *   PROPAGATE:  A releaseShared should be propagated to other\n    *               nodes. This is set (for head node only) in\n    *               doReleaseShared to ensure propagation\n    *               continues, even if other operations have\n    *               since intervened.\n    *   0:          None of the above\n    *\n    * The values are arranged numerically to simplify use.\n    * Non-negative values mean that a node doesn't need to\n    * signal. So, most code doesn't need to check for particular\n    * values, just for sign.\n    *\n    * The field is initialized to 0 for normal sync nodes, and\n    * CONDITION for condition nodes.  It is modified using CAS\n    * (or when possible, unconditional volatile writes).\n    */\n   volatile int waitStatus;\n   ```\n   \n   Node类的内部结构\n   \n   ```java\n   static final class Node{\n       //共享\n       static final Node SHARED = new Node();\n   \n       //独占\n       static final Node EXCLUSIVE = null;\n   \n       //线程被取消了\n       static final int CANCELLED = 1;\n   \n       //后继线程需要唤醒\n       static final int SIGNAL = -1;\n   \n       //等待condition唤醒\n       static final int CONDITION = -2;\n   \n       //共享式同步状态获取将会无条件地传播下去\n       static final int PROPAGATE = -3;\n   \n       // 初始为e，状态是上面的几种\n       volatile int waitStatus;\n   \n       // 前置节点\n       volatile Node prev;\n   \n       // 后继节点\n       volatile Node next;\n   \n       // ...\n   ```\n\n4. 总结\n   \n   有阻塞就需要排队，实现排队必然需要队列，通过state 变量 + CLH双端 Node 队列实现。\n\n### **AQS同步队列的基本结构**\n\n![](aqs-9.png)\n\n### **AQS底层是怎么排队的？**\n\n通过调用 `LockSupport.park()` 来进行排队。\n\n### 从 ReentrantLock 进入 AQS\n\n#### ReentrantLock 锁\n\n`ReentrantLock` 类是 `Lock` 接口的实现类，基本上是通过【聚合】了一个【队列同步器】的子类完成线程访问控制的。\n\n**ReentrantLock 的原理**\n\n![](rel-1.png)\n\n#### 公平锁 & 非公平锁\n\n在 `ReentrantLock` 内定义了静态内部类，分别为 `NoFairSync`（非公平锁）和 `FairSync`（公平锁）\n\n![](rel-2.png)\n\n`ReentrantLock` 的构造函数：不传参数表示创建非公平锁；参数为 true 表示创建公平锁；参数为 false 表示创建非公平锁。\n\n看一下`lock()` 方法的执行流程：以 `NonfairSync` 为例\n\n![](rel-3.png)\n\n在 `ReentrantLock` 中，`NoFairSync` 和 `FairSync` 中 `tryAcquire()` 方法的区别，可以明显看出公平锁与非公平锁的`lock()`方法唯一的区别就在于公平锁在获取同步状态时多了一个限制条件:  \n\n`hasQueuedPredecessors()`\n\n![](rel-4.png)\n\n`hasQueuedPredecessors()` 方法是公平锁加锁时判断等待队列中是否存在有效节点的方法\n\n![](rel-5.png)\n\n### 公平锁与非公平锁的总结\n\n对比公平锁和非公平锁的`tryAcqure()`方法的实现代码， 其实差别就在于非公平锁获取锁时比公平锁中少了一个判断`!hasQueuedPredecessors()`，`hasQueuedPredecessors()`中判断了是否需要排队，导致公平锁和非公平锁的差异如下:\n\n公平锁：公平锁讲究先来先到，线程在获取锁时，如果这个锁的等待队列中已经有线程在等待，那么当前线程就会进入等待队列中；\n\n非公平锁：不管是否有等待队列，如果可以获取锁，则立刻占有锁对象。也就是说队列的第一 个排队线程在unpark()，之后还是需要竞争锁(存在线程竞争的情况下)\n\n![](rel-6.png)\n\n而 `acquire()` 方法最终都会调用 `tryAcquire()` 方法\n\n![](rel-7.png)\n\n在 `NonfairSync` 和 `FairSync` 中均重写了其父类 `AbstractQueuedSynchronizer` 中的 `tryAcquire()` 方法。\n\n![](rel-8.png)\n\n#### 从非公平锁的 lock() 入手\n\n我们这里举个栗子，假设 A、B、C 三个人都要去银行窗口办理业务，但是银行窗口只有一个个，我们使用 `lock.lock()` 模拟这种情况。\n\n```java\nimport java.util.concurrent.TimeUnit;\nimport java.util.concurrent.locks.ReentrantLock;\n\n/** @ClassName AQSDemo @Description TODO @Author sunq @Date 2021/11/29 11:08 */\npublic class AQSDemo {\n  public static void main(String[] args) {\n\n    ReentrantLock lock = new ReentrantLock();\n\n    // 带入一个银行办理业务的案例来模拟我们的AQS如何进行线程的管理和通知唤醒机制\n    // 3个线程模拟3个来银行网点，受理窗口办理业务的顾客\n    // A顾客就是第一个顾客，此时受理窗口没有任何人，A可以直接去办理\n    new Thread(\n            () -> {\n              lock.lock();\n              try {\n                System.out.println(\"-----A thread come in\");\n                try {\n                  TimeUnit.MINUTES.sleep(20);\n                } catch (Exception e) {\n                  e.printStackTrace();\n                }\n              } finally {\n                lock.unlock();\n              }\n            },\n            \"A\")\n        .start();\n\n    // 第二个顾客，第二个线程---》由于受理业务的窗口只有一个(只能一个线程持有锁)，此时B只能等待，\n    // 进入候客区\n    new Thread(\n            () -> {\n              lock.lock();\n              try {\n                System.out.println(\"-----B thread come in\");\n              } finally {\n                lock.unlock();\n              }\n            },\n            \"B\")\n        .start();\n\n    // 第三个顾客，第三个线程---》由于受理业务的窗口只有一个(只能一个线程持有锁)，此时C只能等待，\n    // 进入候客区\n    new Thread(\n            () -> {\n              lock.lock();\n              try {\n                System.out.println(\"-----C thread come in\");\n              } finally {\n                lock.unlock();\n              }\n            },\n            \"C\")\n        .start();\n  }\n}\n```\n\n> **先来看看线程 A（客户 A）的执行流程**\n\n之前已经讲到过，`new ReentrantLock()`不传参默认是非公平锁，调用`lock.lock()`方法最终都会执行`NonfairSync`重写后的`lock()`方法\n\n第一次执行    lock()    方法\n\n由于第一次执行`lock()`方法，`state`变量的值等于 0，表示 lock 锁没有被占用，此时执行`compareAndSetState(0, 1)`CAS 判断，可得`state == expected == 0`，因此 CAS 成功，将 state 的值修改为 1。\n\n![](rel-9.png)\n\n再来复习下 CAS：通过 Unsafe 提供的 compareAndSwapXxx() 方法保证修改操作的原子性（通过 CPU 原语保证），如果变量的值等于期望值，则修改变量的值为 update，并返回 true；若不等，则返回 false。this 代表当前对象，stateOffset 表示 state 变量在该对象中的偏移量。\n\n![](rel-10.png)\n\n再来看看 `setExclusiveOwnerThread()` 方法做了啥：将拥有 lock 锁的线程修改为线程 A。\n\n![](rel-11.png)\n\n> **再来看看线程 B（客户 B）的执行流程**\n\n第二次执行 lock() 方法\n\n由于第二次执行`lock()`方法，`state`变量的值等于 1，表示 lock 锁没有被占用，此时执行 `compareAndSetState(0, 1)`CAS 判断，可得`state != expected`，因此 CAS 失败，进入`acquire()`方法。\n\n![](rel-9.png)\n\n`acquire()` 方法主要包含如下几个方法，下面我们一个一个来查看。\n\n![](rel-12.png)\n\n#### **`tryAcquire(arg)` 方法的执行流程**\n\n先来看看 `tryAcquire()` 方法，诶，怎么抛了个异常？别着急，仔细一看是 `AbstractQueuedSynchronizer` 抽象队列同步器中定义的方法，既然抛出了异常，就证明父类强制要求子类去实现。\n\n这里以非公平锁 `NonfairSync` 为例，在 `tryAcquire()` 方法中调用了 `nonfairTryAcquire()` 方法，注意，这里传入的参数都是 1。\n\n![](rel-13.png)\n\n`nonfairTryAcquire(acquires)`正常的执行流程：\n\n在`nonfairTryAcquire()`方法中，大多数情况都是如下的执行流程：线程 B 执行`int c = getState()`时，获取到 state 变量的值为 1，表示 lock 锁正在被占用；于是执行`if (c == 0) {`发现条件不成立，接着执行下一个判断条件`else if (current ==getExclusiveOwnerThread()) {`，current 线程为线程 B，而 `getExclusiveOwnerThread()`方法返回正在占用 lock 锁的线程，为线程 A，因此 `tryAcquire()`方法最后会`return false`，表示并没有抢占到 lock 锁。\n\n![](rel-14.png)\n\n**补充**：`getExclusiveOwnerThread()` 方法返回正在占用 lock 锁的线程（排他锁，exclusive）。\n\n![](rel-15.png)\n\n> **nonfairTryAcquire(acquires) 比较特殊的执行流程：**\n\n第一种情况是，走到`int c = getState()`语句时，此时线程 A 恰好执行完成，让出了 lock 锁，那么`state`变量的值为 0，当然发生这种情况的概率很小，那么线程 B 执行 CAS 操作成功后，将占用 lock 锁的线程修改为自己，然后返回 true，表示抢占锁成功。其实这里还有一种情况，需要留到`unlock()`方法才能说清楚\n\n第二种情况为可重入锁的表现，假设 A 线程又再次抢占 lock 锁（当然示例代码里面并没有体现出来），这时`current == getExclusiveOwnerThread()`条件成立，将`state`变量的值加上`acquire`，这种情况下也应该`return true`，表示线程 A 正在占用 lock 锁。因此，`state`变量的值是可以大于 1 的。\n![](rel-14.png)\n\n> **继续往下走，执行 `addWaiter(Node.EXCLUSIVE)` 方法**\n\n在 `tryAcquire()` 方法返回 `false` 之后，进行 `!` 操作后为 `true`，那么会继续执行 `addWaiter()` 方法。\n\n![](rel-12.png)\n\n来看看 addWaiter() 方法做了些啥？\n\n之前讲过`Node`节点用于封装用户线程，这里将当前正在执行的线程通过`Node`封装起来（当前线程正是抢占 lock 锁没有抢占到的线程）。\n\n判断`tail`尾指针是否为空，双端队列此时还没有元素呢~肯定为空呀，那么执行 `enq(node)`方法，将封装了线程 B 的`Node`节点入队。\n\n![](rel-16.png)\n\n**enq(node) 方法：构建双端同步队列**\n\n也许看到这里的代码有点蒙，需要有些前置知识，在双端同步队列中，第一个节点为虚节点（也叫哨兵节点），其实并不存储任何信息，只是占位。 真正的第一个有数据的节点，是从第二个节点开始的。\n\n![](rel-17.png)\n\n**第一次执行 for 循环**：现在解释起来就不费劲了，当线程 B 进来时，双端同步队列为空，此时肯定要先构建一个哨兵节点。此时`tail == null`，因此进入`if(t == null) {`的分支，头指针指向哨兵节点，此时队列中只有一个节点，尾节点即是头结点，因此尾指针也指向该哨兵节点。\n![](rel-18.png)\n\n**第二次执行 for 循环**：现在该将装着线程 B 的节点放入双端同步队列中，此时`tail`指向了哨兵节点，并不等于 null，因此`if (t == null)`不成立，进入 else 分支。以尾插法的方式，先将`node`（装着线程 B 的节点）的`prev`指向之前的`tail`，再将`node`设置为尾节点（执行`compareAndSetTail(t, node)`），最后将`t.next`指向`node`，最后执行`return t`结束 for 循环。\n\n**补充**：`compareAndSetTail(t, node)` 方法的实现\n\n![](rel-19.png)\n\n**注意**：哨兵节点和 `nodeB` 节点的 `waitStatus` 均为 0，表示在等待队列中。\n\n**`acquireQueued()` 方法的执行**\n\n执行完 `addWaiter()` 方法之后，就该执行 `acquireQueued()` 方法了，这个方法有点东西，我们放到后面再去讲它\n\n![](rel-12.png)\n\n> **最后来看看线程 C（客户 C）的执行流程**\n\n线程 C 和线程 B 的执行流程很类似，都是执行 `acquire()` 中的方法。\n\n![](rel-12.png)\n\n但是在 `addWaiter()` 方法中，执行流程有些区别。此时 `tail != null`，因此在 `addWaiter()` 方法中就已经将 `nodeC` 添加至队尾了。\n\n![](rel-16.png)\n\n执行完 `addWaiter()` 方法后，就已经将 nodeC 挂在了双端同步队列的队尾，不需要再执行 `enq(node)` 方法。\n\n![](rel-20.png)\n\n> **补前面的坑：`acquireQueued()` 方法的执行逻辑**\n\n先来看看看看 `acquireQueued()` 方法的源代码，其实这样直接看代码有点懵逼，我们接下来举例来理解。注意看：两个 `if` 判断中的代码都放在 `for( ; ; )` 中执行，这样可以实现自旋的操作。\n\n![](rel-21.png)\n\n**线程 B 的执行流程**\n\n线程 B 执行 addWaiter() 方法之后，就进入了 acquireQueued() 方法中，此时传入的参数为封装了线程 B 的 nodeB 节点，nodeB 的前驱结点为哨兵节点，因此 final Node p = node.predecessor() 执行完后，p 将指向哨兵节点。哨兵节点满足 p == head，但是线程 B 执行 tryAcquire(arg) 方法尝试抢占 lock 锁时还是会失败，因此会执行下面 if 判断中的 shouldParkAfterFailedAcquire(p, node) 方法，该方法的代码如下：\n\n```java\nprivate static boolean shouldParkAfterFailedAcquire(Node pred, Node node) {\n    int ws = pred.waitStatus;\n    if (ws == Node.SIGNAL)\n        /*\n         * This node has already set status asking a release\n         * to signal it, so it can safely park.\n         */\n        return true;\n    if (ws > 0) {\n        /*\n         * Predecessor was cancelled. Skip over predecessors and\n         * indicate retry.\n         */\n        do {\n            node.prev = pred = pred.prev;\n        } while (pred.waitStatus > 0);\n        pred.next = node;\n    } else {\n        /*\n         * waitStatus must be 0 or PROPAGATE.  Indicate that we\n         * need a signal, but don't park yet.  Caller will need to\n         * retry to make sure it cannot acquire before parking.\n         */\n        compareAndSetWaitStatus(pred, ws, Node.SIGNAL);\n    }\n    return false;\n}\n```\n\n哨兵节点的 `waitStatus == 0`，因此执行 CAS 操作将哨兵节点的 `waitStatus` 改为 `Node.SIGNAL(-1)`。\n\n![](rel-22.png)\n\n注意：`compareAndSetWaitStatus(pred, ws, Node.SIGNAL)`调用 `unsafe.compareAndSwapInt(node, waitStatusOffset, expect, update);`实现，虽然`compareAndSwapInt()`方法内无自旋，但是在`acquireQueued()`方法中的`for( ; ; )`能保证此自选操作成功（另一种情况就是线程 B 抢占到 lock 锁）。\n\n![](rel-23.png)\n\n执行完上述操作，将哨兵节点的 `waitStatus` 设置为了 -1。\n\n![](rel-24.png)\n\n执行完毕将退出 `if` 判断，又会重新进入 `for( ; ; )` 循环，此时执行 `shouldParkAfterFailedAcquire(p, node)` 方法时会返回 `true`，因此此时会接着执行 `parkAndCheckInterrupt()` 方法。\n\n![](rel-21.png)\n\n线程 B 调用 `park()` 方法后被挂起，程序不会然续向下执行，程序就在这儿排队等待。\n\n![](rel-25.png)\n\n**线程 C 的执行流程**\n\n线程 C 最终也会执行到 `LockSupport.park(this);` 处，然后被挂起，进入等待区\n\n**总结：**\n\n如果前驱节点的`waitstatus`是`SIGNAL 状态（-1）`，即 `shouldParkAfterFailedAcquire() `方法会返回 `true`，程序会继续向下执行 `parkAndCheckInterrupt()`方法，用于将当前线程挂起。\n\n根据`park()`方法 API 描述，程序在下面三种情况会继续向下执行：\n\n1. 被`unpark`\n\n2. 被中断（interrupt）\n\n3. 其他不合逻辑的返回才会然续向下执行\n   \n   因上述三种情况程序执行至此，返回当前线程的中断状态，并清空中断状态。如果程序由于被中断，该方法会返回 true。\n\n#### 可总算要 unlock() 了\n\n> **线程 A 执行 `unlock()` 方法**\n\nA 线程终于要 `unlock()` 了吗？真不容易啊！\n\n![](rel-26.png)\n\n`unlock()` 方法调用了 `sync.release(1)` 方法。\n\n![](rel-27.png)\n\n**release() 方法的执行流程**\n\n其实主要就是看看`tryRelease(arg)`方法和`unparkSuccessor(h)`方法的执行流程，这里先大概说一下，能有个印象：线程 A 即将让出 lock 锁，因此`tryRelease()`执行后将返回 true，表示礼让成功，head 指针指向哨兵节点，并且 if 条件满足，可执行 `unparkSuccessor(h)`方法。\n\n![](rel-28.png)\n\n**`tryRelease(arg)` 方法的执行逻辑**\n\n线程 A 只加锁过一次，因此 `state` 的值为 1，参数 `release` 的值也为 1，因此 `c == 0`。将 `free` 设置为 `true`，表示当前 lock 锁已被释放，将排他锁占有的线程设置为 `null`，表示没有任何线程占用 lock 锁。\n\n![](rel-29.png)\n\n**unparkSuccessor(h) 方法的执行逻辑**\n\n在 release() 方法中获取到的头结点 h 为哨兵节点，h.waitStatus == -1，因此执行 CAS操作将哨兵节点的 waitStatus 设置为 0，并将哨兵节点的下一个节点（s = node.next = nodeB）获取出来，并唤醒 nodeB 中封装的线程（if (s == null || s.waitStatus > 0) 不成立，只有 if (s != null) 成立）。\n\n![](rel-30.png)\n\n执行完上述操作后，当前占用 lock 锁的线程为 `null`，哨兵节点的 `waitStatus` 设置为 0，`state` 的值为 0（表示当前没有任何线程占用 lock 锁）。\n\n![](rel-31.png)\n\n**杀个回马枪：继续来看 B 线程被唤醒之后的执行逻辑**\n\n再次回到 lock() 方法的执行流程中来，线程 B 被 unpark() 之后将不再阻塞，继续执行下面的程序，线程 B 正常被唤醒，因此`Thread.interrupted()`的值为 false，表示线程 B 未被中断。\n\n![](rel-25.png)\n\n回到上一层方法中，此时 lock 锁未被占用，线程 B 执行 `tryAcquire(arg)` 方法能够抢到 lock 锁，并且将 `state` 变量的值设置为 1，表示该 lock 锁已经被占用。\n\n![](rel-21.png)\n\n接着来研究下 `setHead(node)` 方法：传入的节点为 `nodeB`，头指针指向 `nodeB` 节点；将 `nodeB` 中封装的线程置为 `null`（因为已经获得锁了）；`nodeB` 不再指向其前驱节点（哨兵节点）。这一切都是为了将 `nodeB` 作为新的哨兵节点。\n\n![](rel-32.png)\n\n执行完 `setHead(node)` 方法的状态如下图所示。\n\n![](rel-33.png)\n\n将 `p.next` 设置为 `null`，这是原来的哨兵节点就是完全孤立的一个节点，此时 `nodeB` 作为新的哨兵节点\n\n![](rel-34.png)\n\n线程 C 也是类似的执行流程。\n\n### AQS 总结\n\n#### AQS 的考点\n\n第一个考点：我相信你应该看过源码了，那么AQS里面有个变量叫State，它的值有几种？\n\n答：3个状态：没占用是0，占用了是1，大于1是可重入锁\n\n第二个考点：如果锁正在被占用，AB两个线程进来了以后，请问这个总共有多少个Node节点？\n\n答：答案是3个，分别是哨兵节点、nodeA、nodeB\n\n#### AQS 源码解读案例图示\n\n![](rel-35.png)\n","source":"_posts/Java并发笔记-上篇.md","raw":"---\nlayout: shoka\ntitle: Java并发笔记-上篇\ndate: 2021-11-16 08:56:30\ntags:\n---\n\n# Java并发笔记\n\n## 可重入锁\n\n### 可重入锁是什么？\n\n顾名思义，就是支持重入的锁，它表示该锁能够支持一个线程对资源的重复加锁。除此之外，该锁还支持获取锁的公平与非公平性选择。\n\n### 可重入锁的代码示例-synchronized\n\n```java\n/** 证明synchronized是可重入锁 */\npublic class SynchronizedDemo {\n  static Object objectLockA = new Object();\n\n  static void m1() {\n    synchronized (objectLockA) {\n      System.out.println(Thread.currentThread().getName() + \"\\t-----外层调用\");\n      synchronized (objectLockA) {\n        System.out.println(Thread.currentThread().getName() + \"\\t-----中层调用\");\n        synchronized (objectLockA) {\n          System.out.println(Thread.currentThread().getName() + \"\\t-----内层调用\");\n        }\n      }\n    }\n  }\n\n  public static void main(String[] args) {\n    m1();\n  }\n```\n\n### 可重入锁的代码示例-ReenterantLock\n\n```java\n/** ReenterantLock也是可重入锁，加锁几次就要释放锁几次 */\npublic class ReenterantLockDemo {\n  public static Lock lockA = new ReentrantLock();\n\n  public static void main(String[] args) {\n    new Thread(\n            () -> {\n              lockA.lock();\n              try {\n                System.out.println(Thread.currentThread().getName() + \"\\t ----外层\");\n                lockA.lock();\n                try {\n                  System.out.println(Thread.currentThread().getName() + \"\\t ----内层\");\n                } finally {\n                  lockA.unlock();\n                }\n              } finally {\n                lockA.unlock();\n              }\n            },\n            \"t1\")\n        .start();\n    new Thread(\n            () -> {\n              lockA.lock();\n              try {\n                System.out.println(Thread.currentThread().getName() + \"\\t ----第二个线程获取锁\");\n              } finally {\n                lockA.unlock();\n              }\n            },\n            \"t2\")\n        .start();\n  }\n```\n\n### 公平与非公平获取锁的区别是什么？\n\n如果一个锁是公平的，那么锁的获取顺序就应该符合请求的绝对时间顺序，也就是**FIFO**。\n\n对于非公平的锁，只要CAS设置同步状态成功，则表示当前线程获取了锁。\n\n#### 产生结果\n\n公平的锁每次都是同步队列中的第一个节点获取到锁，非公平的锁会出现一个线程连续获取锁的现象。\n\n为什么会出现线程连续获取锁的情况呢？当一个线程请求锁时，只要获取了同步状态即成功获取锁。在这个前提下，刚释放锁的线程再次获取同步状态的概率非常大，使得其他线程只能在同步队列中等待。\n\n非公平的锁可能导致 **线程饥饿** ，为什么它又被设置成默认的实现呢？如果把每次不同的线程获取到锁视为一次切换，公平性的锁每次都进行切换，非公平的锁出现切换的概率大大降低，这说明非公平锁的开销非常小。引用自 **Java并发编程艺术** 一书的表5-7的例子显示，在ubuntu server 14.04 i5-3470 8GB，10个线程，每个线程获取100000次锁的场景中，公平锁与非公平锁相比，总耗时是其93.4倍，总切换次数是其133倍。这可以说明：公平性的锁保证了锁的获取按照FIFO原则，而代价是进行大量的线程切换。非公平性锁虽然可能造成 **线程饥饿**，但极少的线程切换，保证了更大的吞吐量。\n\n## LockSupport\n\n### LockSupport 是什么？\n\n[官方中文文档](https://www.apiref.com/java11-zh/java.base/java/util/concurrent/locks/LockSupport.html)\n\n#### api介绍\n\n用于创建锁和其他同步类的基本线程阻塞原语。\n\n**该类与使用它的每个线程关联一个Permit（许可证）（在[`Semaphore`](https://www.apiref.com/java11-zh/java.base/java/util/concurrent/Semaphore.html)类的意义上）。** 如果许可证可用，将立即返回`park` ，并在此过程中消费; 否则*可能会*阻止。 如果尚未提供许可，则致电`unpark`获得许可。 **（与Semaphores不同，许可证不会累积。最多只有一个。）**可靠的使用需要使用volatile（或原子）变量来控制何时停放或取消停放。 对于易失性变量访问保持对这些方法的调用的顺序，但不一定是非易失性变量访问。\n\n方法`park`和`unpark`提供了阻止和解除阻塞线程的有效方法，这些线程没有遇到导致不推荐使用的方法`Thread.suspend`和`Thread.resume`无法用于此类目的的问题：一个线程调用`park`和另一个线程尝试`unpark`将保留活跃性，由于许可证。 此外，如果调用者的线程被中断，则会返回`park` ，并且支持超时版本。 `park`方法也可以在任何其他时间返回，“无理由”，因此通常必须在返回时重新检查条件的循环内调用。 在这个意义上， `park`可以作为“忙碌等待”的优化，不会浪费太多时间旋转，但必须与`unpark`配对才能生效。\n\n三种形式的`park`每个也支持`blocker`对象参数。 在线程被阻塞时记录此对象，以允许监视和诊断工具识别线程被阻止的原因。 （此类工具可以使用方法[`getBlocker(Thread)`](https://www.apiref.com/java11-zh/java.base/java/util/concurrent/locks/LockSupport.html#getBlocker(java.lang.Thread))访问[阻止程序](https://www.apiref.com/java11-zh/java.base/java/util/concurrent/locks/LockSupport.html#getBlocker(java.lang.Thread)) 。）强烈建议使用这些表单而不是没有此参数的原始表单。 在锁实现中作为`blocker`提供的正常参数是`this` 。\n\n这些方法旨在用作创建更高级别同步实用程序的工具，并且对于大多数并发控制应用程序本身并不有用。 `park`方法仅用于以下形式的构造：\n\n```\n   while (!canProceed()) { // ensure request to unpark is visible to other threads ... LockSupport.park(this); } \n```\n\n在调用`park`之前，线程没有发布请求`park`需要锁定或阻塞。 因为每个线程只有一个许可证，所以任何中间使用`park` ，包括隐式地通过类加载，都可能导致无响应的线程（“丢失unpark”）。\n\n#### 总结\n\nLockSupport中的`park()` 和`unpark()`的作用分别是阻塞线程和解除阻塞线程，可以将其看作是线程等待唤醒机制 (wait/notify) 的改进版。\n\nLockSupport使用Permit（许可证）的概念来达到阻塞和唤醒线程的功能，每个线程都有一个许可(Permit)，Permit只有两个值1和0，默认是0。\n\nPermit可以看做成一个Semaphore，但与Semaphore不同，Permit累加上限只有1。\n\n### 三种实现线程等待唤醒的方法\n\n1. 使用Object中的`wait()`方法让线程等待，使用Object中的`notify()`方法唤醒线程\n   \n   注意条件\n   \n   1. wait和notify方法必须要在synchronized同步块或者方法里面且成对出现使用\n   2. 先wait后notify才能成功唤醒线程\n   \n   ```java\n     static Object objectLock = new Object();\n     private static void synchronizedWaitNotify() {\n       new Thread(\n               () -> {\n                 synchronized (objectLock) {\n                   System.out.println(Thread.currentThread().getName() + \"\\t\" + \"------come in\");\n                   try {\n                     objectLock.wait(); // 等待\n                   } catch (InterruptedException e) {\n                     e.printStackTrace();\n                   }\n                   System.out.println(Thread.currentThread().getName() + \"\\t\" + \"------被唤醒\");\n                 }\n               },\n               \"A\")\n           .start();\n   \n       new Thread(\n               () -> {\n                 synchronized (objectLock) {\n                   objectLock.notify(); // 唤醒\n                   System.out.println(Thread.currentThread().getName() + \"\\t\" + \"------通知\");\n                 }\n               },\n               \"B\")\n           .start();\n     }\n   ```\n   \n   ![img](locksupport代码结果1.png)\n\n2. 使用JUC包中的Condition的`await()`方法让线程等待，使用Condition的`signal()`方法唤醒线程\n   \n   注意条件\n   \n   1. 线程先要获得并持有锁，必须在锁块（synchronized或lock）中\n   2. 必须要先等待后唤醒，线程才能够被唤醒\n   \n   ```java\n     static Lock lock = new ReentrantLock();\n     static Condition condition = lock.newCondition();\n     private static void lockAwaitSignal() {\n       new Thread(\n               () -> {\n                 lock.lock();\n                 try {\n                   System.out.println(Thread.currentThread().getName() + \"\\t\" + \"------come in\");\n                   try {\n                     condition.await();\n                   } catch (InterruptedException e) {\n                     e.printStackTrace();\n                   }\n                   System.out.println(Thread.currentThread().getName() + \"\\t\" + \"------被唤醒\");\n                 } finally {\n                   lock.unlock();\n                 }\n               },\n               \"A\")\n           .start();\n   \n       new Thread(\n               () -> {\n                 lock.lock();\n                 try {\n                   condition.signal();\n                   System.out.println(Thread.currentThread().getName() + \"\\t\" + \"------通知\");\n                 } finally {\n                   lock.unlock();\n                 }\n               },\n               \"B\")\n           .start();\n     }\n   ```\n   \n   ![img](locksupport代码结果2.png)\n\n3. 使用LockSupport类阻塞当前线程以及唤醒指定的被阻塞线程\n\n### LockSupport 的主要方法\n\n#### 阻塞\n\n`park()/park(Object blocker)`\n\n作用：阻塞当前线程/阻塞传入的具体线程\n\npermit 默认是 0，所以一开始调用`park()`方法，当前线程就会阻塞，直到别的线程将当前线程的 permit 设置为 1 时，`park() `方法会被唤醒，然后会将 permit 再次设置为 0 并返回。\n\n##### park() 方法通过 Unsafe 类实现\n\n```java\n// Disables the current thread for thread scheduling purposes unless the permit is available.\npublic static void park() {\n    UNSAFE.park(false, 0L);\n}\n```\n\n#### 唤醒\n\n`unpark(Thread thread)`\n\n作用：唤醒处于阻断状态的指定线程\n\n调用`unpark(thread)`方法后，就会将 thread 线程的许可 permit 设置成 1（注意多次调用 `unpark()`方法，不会累加，permit 值还是 1），这会自动唤醒 thread 线程，即之前阻塞中的`LockSupport.park()`方法会立即返回。\n\n##### unpark() 方法通过 Unsafe 类实现\n\n```java\n// Makes available the permit for the given thread\npublic static void unpark(Thread thread) {\n    if (thread != null)\n        UNSAFE.unpark(thread);\n}\n```\n\n### LockSupport代码示例\n\n#### 正常使用 LockSupport\n\n```java\nprivate static void lockSupportParkUnpark() {\n    Thread a =\n        new Thread(\n            () -> {\n              System.out.println(Thread.currentThread().getName() + \"\\t\" + \"------come in\");\n              LockSupport.park(); // 线程 A 阻塞\n              System.out.println(Thread.currentThread().getName() + \"\\t\" + \"------被唤醒\");\n            },\n            \"A\");\n    a.start();\n\n    new Thread(\n            () -> {\n              LockSupport.unpark(a); // B 线程唤醒线程 A\n              System.out.println(Thread.currentThread().getName() + \"\\t\" + \"------通知\");\n            },\n            \"B\")\n        .start();\n  }\n```\n\n程序运行结果：A 线程先执行`LockSupport.park()`方法将通行证（permit）设置为 0， permit 初始值本来就为 0，然后 B 线程执行 `LockSupport.unpark(a) `方法将 permit 设置为 1，此时 A 线程可以通行\n\n![img](locksupport代码结果3.png)\n\n#### 先 unpark() 后 park()\n\n```java\n  private static void lockSupportUnparkPark() {\n    Thread a =\n        new Thread(\n            () -> {\n              try {\n                TimeUnit.SECONDS.sleep(3L);\n              } catch (InterruptedException e) {\n                e.printStackTrace();\n              }\n              System.out.println(\n                  Thread.currentThread().getName()\n                      + \"\\t\"\n                      + \"------come in\"\n                      + System.currentTimeMillis());\n              LockSupport.park();\n              System.out.println(\n                  Thread.currentThread().getName()\n                      + \"\\t\"\n                      + \"------被唤醒\"\n                      + System.currentTimeMillis());\n            },\n            \"A\");\n    a.start();\n\n    new Thread(\n            () -> {\n              LockSupport.unpark(a);\n              System.out.println(Thread.currentThread().getName() + \"\\t\" + \"------通知\");\n            },\n            \"B\")\n        .start();\n  }\n```\n\n程序运行结果：因为引入了通行证的概念，所以先执行`unpark()`其实并不会有什么影响，从程序运行时间戳可以看出，B 线程先放行通行证之后，A 线程执行 `LockSupport.park()` 时并没有被阻塞，相当于没有执行。\n\n![img](locksupport代码结果4.png)\n\n#### 异常情况：没有考虑到 permit 上限值为 1\n\n```java\n  private static void lockSupport2Park1Unpark() {\n    Thread a =\n        new Thread(\n            () -> {\n              try {\n                TimeUnit.SECONDS.sleep(3L);\n              } catch (InterruptedException e) {\n                e.printStackTrace();\n              }\n              System.out.println(\n                  Thread.currentThread().getName()\n                      + \"\\t\"\n                      + \"------come in\"\n                      + System.currentTimeMillis());\n              LockSupport.park();\n              LockSupport.park();\n              System.out.println(\n                  Thread.currentThread().getName()\n                      + \"\\t\"\n                      + \"------被唤醒\"\n                      + System.currentTimeMillis());\n            },\n            \"A\");\n    a.start();\n\n    new Thread(\n            () -> {\n              LockSupport.unpark(a);\n              LockSupport.unpark(a);\n              System.out.println(Thread.currentThread().getName() + \"\\t\" + \"------通知\");\n            },\n            \"B\")\n        .start();\n  }\n```\n\n程序运行结果：由于 permit 的上限值为 1，所以执行两次 `LockSupport.park()` 操作将导致 A 线程阻塞\n\n![img](locksupport代码结果5.png)\n\n### LockSupport 重点说明\n\n> **LockSupport是用来创建锁和其他同步类的基本线程阻塞原语**\n\nLockSupport是一个线程阻塞工具类，所有的方法都是静态方法，可以让线程在任意位置阻塞，阻塞之后也有对应的唤醒方法。归根结底，LockSupport调用的Unsafe中的native代码。\n\n> **LockSupport提供park()和unpark()方法实现阻塞线程和解除线程阻塞的过程**\n\nLockSupport和每个使用它的线程都有一个许可(permit)关联。permit相当于1，0的开关，默认是0，调用一次unpark就加1变成1，调用一次park会消费permit，也就是将1变成0，同时park立即返回。\n\n如再次调用park会变成阻塞(因为permit为零了会阻塞在这里，一直到permit变为1)，这时调用unpark会把permit置为1。\n\n每个线程都有一个相关的permit，permit最多只有一个，重复调用unpark也不会积累凭证。\n\n> **形象的理解**\n\n线程阻塞需要消耗凭证(permit)，这个凭证最多只有1个。\n\n1. 当调用park方法时\n   1. 如果有凭证，则会直接消耗掉这个凭证然后正常退出;\n   2. 如果无凭证，就必须阻塞等待凭证可用;\n2. 而unpark则相反，它会增加一个凭证，但凭证最多只能有1个，累加无效。\n\n### LockSupport 面试题\n\n> **为什么可以先唤醒线程后阻塞线程?**\n\n因为unpark获得了一个凭证，之后再调用park方法，就可以名正言顺的凭证消费，故不会阻塞。\n\n> **为什么唤醒两次后阻塞两次，但最终结果还会阻塞线程?**\n\n因为凭证的数量最多为1，连续调用两次unpark和调用一次unpark效果一样，只会增加一个凭证；而调用两次park却需要消费两个凭证，证不够，不能放行。\n\n## AQS初探\n\n### AQS 是什么？\n\nAQS（AbstractQueuedSynchronizer）：抽象的队列同步器\n\n一般我们说的 AQS 指的是` java.util.concurrent.locks`包下的`AbstractQueuedSynchronizer`，但其实还有另外三种抽象队列同步器：`AbstractOwnableSynchronizer`、`AbstractQueuedLongSynchronizer `和 `AbstractQueuedSynchronizer`。\n\n### AQS 是 JUC 的基石\n\n![](aqs-1.png)\n\n**举几个常见的例子**\n\n1. ReentrantLock\n   \n   ![](aqs-2.png)\n\n2. CountDownLatch\n   \n   ![](aqs-3.png)\n\n3. ReentrantReadWriteLock\n   \n   ![](aqs-4.png)\n\n4. Semaphore\n   \n   ![](aqs-5.png)\n\n> **进一步理解锁和同步器的关系**\n\n锁 -> 面向锁的使用者。定义了程序员和锁交互的使用层API，隐藏了实现细节，你调用即可，可以理解为用户层面的 API。\n\n同步器 -> 面向锁的实现者。比如Java并发大神Douglee，提出统一规范并简化了锁的实现，屏蔽了同步状态管理、阻塞线程排队和通知、唤醒机制等，Java 中有那么多的锁，就能简化锁的实现啦。\n\n### AQS 能干嘛\n\n> **AQS：加锁会导致阻塞**\n\n有阻塞就需要排队，实现排队必然需要有某种形式的队列来进行管理。\n\n抢到资源的线程直接使用办理业务，抢占不到资源的线程的必然涉及一种排队等候机制，抢占资源失败的线程继续去等待（类似办理窗口都满了，暂时没有受理窗口的顾客只能去候客区排队等候），仍然保留获取锁的可能且获取锁流程仍在继续（候客区的顾客也在等着叫号，轮到了再去受理窗口办理业务）。\n\n既然说到了排队等候机制，那么就一定 会有某种队列形成，这样的队列是什么数据结构呢？如果共享资源被占用，就需要一定的阻塞等待唤醒机制来保证锁分配。这个机制主要用的是CLH队列的变体实现的，将暂时获取不到锁的线程加入到队列中，这个队列就是AQS的抽象表现。它将请求共享资源的线程封装成队列的结点（Node） ，通过CAS、自旋以及LockSuport.park()的方式，维护state变量的状态，使并发达到同步的效果。\n\n### **AQS术语理解**\n\n![](aqs-6.png)\n\n有阻塞就需要排队，实现排队必然需要队列\n\nAQS使用一个volatile的int类型的成员变量来表示同步状态，通过内置的 FIFO队列来完成资源获取的排队工作将每条要去抢占资源的线程封装成 一个Node节点来实现锁的分配，通过CAS完成对State值的修改。\nNode 节点是啥？答：你有见过 HashMap 的 Node 节点吗？JDK 用 static class Node<K,V> implements Map.Entry<K,V> { 来封装我们传入的 KV 键值对。这里也是一样的道理，JDK 使用 Node 来封装（管理）Thread\n可以将 Node 和 Thread 类比于候客区的椅子和等待用餐的顾客\n\n![](aqs-7.png)\n\n### **AQS内部体系架构**\n\n1. AQS的int变量\n   \n   AQS的同步状态State成员变量，类似于银行办理业务的受理窗口状态：零就是没人，自由状态可以办理；大于等于1，有人占用窗口，等着去。\n   \n   ```java\n   /**\n    * The synchronization state.\n    */\n   private volatile int state;\n   ```\n\n2. AQS的CLH队列\n   \n   CLH队列（三个大牛的名字组成），为一个双向队列，类似于银行侯客区的等待顾客。\n   \n   ![](aqs-8.png)\n\n3. 内部类Node（Node类在AQS类内部）\n   \n   Node的等待状态waitState成员变量，类似于等候区其它顾客(其它线程)的等待状态，队列中每个排队的个体就是一个Node。\n   \n   ```java\n   /**\n    * Status field, taking on only the values:\n    *   SIGNAL:     The successor of this node is (or will soon be)\n    *               blocked (via park), so the current node must\n    *               unpark its successor when it releases or\n    *               cancels. To avoid races, acquire methods must\n    *               first indicate they need a signal,\n    *               then retry the atomic acquire, and then,\n    *               on failure, block.\n    *   CANCELLED:  This node is cancelled due to timeout or interrupt.\n    *               Nodes never leave this state. In particular,\n    *               a thread with cancelled node never again blocks.\n    *   CONDITION:  This node is currently on a condition queue.\n    *               It will not be used as a sync queue node\n    *               until transferred, at which time the status\n    *               will be set to 0. (Use of this value here has\n    *               nothing to do with the other uses of the\n    *               field, but simplifies mechanics.)\n    *   PROPAGATE:  A releaseShared should be propagated to other\n    *               nodes. This is set (for head node only) in\n    *               doReleaseShared to ensure propagation\n    *               continues, even if other operations have\n    *               since intervened.\n    *   0:          None of the above\n    *\n    * The values are arranged numerically to simplify use.\n    * Non-negative values mean that a node doesn't need to\n    * signal. So, most code doesn't need to check for particular\n    * values, just for sign.\n    *\n    * The field is initialized to 0 for normal sync nodes, and\n    * CONDITION for condition nodes.  It is modified using CAS\n    * (or when possible, unconditional volatile writes).\n    */\n   volatile int waitStatus;\n   ```\n   \n   Node类的内部结构\n   \n   ```java\n   static final class Node{\n       //共享\n       static final Node SHARED = new Node();\n   \n       //独占\n       static final Node EXCLUSIVE = null;\n   \n       //线程被取消了\n       static final int CANCELLED = 1;\n   \n       //后继线程需要唤醒\n       static final int SIGNAL = -1;\n   \n       //等待condition唤醒\n       static final int CONDITION = -2;\n   \n       //共享式同步状态获取将会无条件地传播下去\n       static final int PROPAGATE = -3;\n   \n       // 初始为e，状态是上面的几种\n       volatile int waitStatus;\n   \n       // 前置节点\n       volatile Node prev;\n   \n       // 后继节点\n       volatile Node next;\n   \n       // ...\n   ```\n\n4. 总结\n   \n   有阻塞就需要排队，实现排队必然需要队列，通过state 变量 + CLH双端 Node 队列实现。\n\n### **AQS同步队列的基本结构**\n\n![](aqs-9.png)\n\n### **AQS底层是怎么排队的？**\n\n通过调用 `LockSupport.park()` 来进行排队。\n\n### 从 ReentrantLock 进入 AQS\n\n#### ReentrantLock 锁\n\n`ReentrantLock` 类是 `Lock` 接口的实现类，基本上是通过【聚合】了一个【队列同步器】的子类完成线程访问控制的。\n\n**ReentrantLock 的原理**\n\n![](rel-1.png)\n\n#### 公平锁 & 非公平锁\n\n在 `ReentrantLock` 内定义了静态内部类，分别为 `NoFairSync`（非公平锁）和 `FairSync`（公平锁）\n\n![](rel-2.png)\n\n`ReentrantLock` 的构造函数：不传参数表示创建非公平锁；参数为 true 表示创建公平锁；参数为 false 表示创建非公平锁。\n\n看一下`lock()` 方法的执行流程：以 `NonfairSync` 为例\n\n![](rel-3.png)\n\n在 `ReentrantLock` 中，`NoFairSync` 和 `FairSync` 中 `tryAcquire()` 方法的区别，可以明显看出公平锁与非公平锁的`lock()`方法唯一的区别就在于公平锁在获取同步状态时多了一个限制条件:  \n\n`hasQueuedPredecessors()`\n\n![](rel-4.png)\n\n`hasQueuedPredecessors()` 方法是公平锁加锁时判断等待队列中是否存在有效节点的方法\n\n![](rel-5.png)\n\n### 公平锁与非公平锁的总结\n\n对比公平锁和非公平锁的`tryAcqure()`方法的实现代码， 其实差别就在于非公平锁获取锁时比公平锁中少了一个判断`!hasQueuedPredecessors()`，`hasQueuedPredecessors()`中判断了是否需要排队，导致公平锁和非公平锁的差异如下:\n\n公平锁：公平锁讲究先来先到，线程在获取锁时，如果这个锁的等待队列中已经有线程在等待，那么当前线程就会进入等待队列中；\n\n非公平锁：不管是否有等待队列，如果可以获取锁，则立刻占有锁对象。也就是说队列的第一 个排队线程在unpark()，之后还是需要竞争锁(存在线程竞争的情况下)\n\n![](rel-6.png)\n\n而 `acquire()` 方法最终都会调用 `tryAcquire()` 方法\n\n![](rel-7.png)\n\n在 `NonfairSync` 和 `FairSync` 中均重写了其父类 `AbstractQueuedSynchronizer` 中的 `tryAcquire()` 方法。\n\n![](rel-8.png)\n\n#### 从非公平锁的 lock() 入手\n\n我们这里举个栗子，假设 A、B、C 三个人都要去银行窗口办理业务，但是银行窗口只有一个个，我们使用 `lock.lock()` 模拟这种情况。\n\n```java\nimport java.util.concurrent.TimeUnit;\nimport java.util.concurrent.locks.ReentrantLock;\n\n/** @ClassName AQSDemo @Description TODO @Author sunq @Date 2021/11/29 11:08 */\npublic class AQSDemo {\n  public static void main(String[] args) {\n\n    ReentrantLock lock = new ReentrantLock();\n\n    // 带入一个银行办理业务的案例来模拟我们的AQS如何进行线程的管理和通知唤醒机制\n    // 3个线程模拟3个来银行网点，受理窗口办理业务的顾客\n    // A顾客就是第一个顾客，此时受理窗口没有任何人，A可以直接去办理\n    new Thread(\n            () -> {\n              lock.lock();\n              try {\n                System.out.println(\"-----A thread come in\");\n                try {\n                  TimeUnit.MINUTES.sleep(20);\n                } catch (Exception e) {\n                  e.printStackTrace();\n                }\n              } finally {\n                lock.unlock();\n              }\n            },\n            \"A\")\n        .start();\n\n    // 第二个顾客，第二个线程---》由于受理业务的窗口只有一个(只能一个线程持有锁)，此时B只能等待，\n    // 进入候客区\n    new Thread(\n            () -> {\n              lock.lock();\n              try {\n                System.out.println(\"-----B thread come in\");\n              } finally {\n                lock.unlock();\n              }\n            },\n            \"B\")\n        .start();\n\n    // 第三个顾客，第三个线程---》由于受理业务的窗口只有一个(只能一个线程持有锁)，此时C只能等待，\n    // 进入候客区\n    new Thread(\n            () -> {\n              lock.lock();\n              try {\n                System.out.println(\"-----C thread come in\");\n              } finally {\n                lock.unlock();\n              }\n            },\n            \"C\")\n        .start();\n  }\n}\n```\n\n> **先来看看线程 A（客户 A）的执行流程**\n\n之前已经讲到过，`new ReentrantLock()`不传参默认是非公平锁，调用`lock.lock()`方法最终都会执行`NonfairSync`重写后的`lock()`方法\n\n第一次执行    lock()    方法\n\n由于第一次执行`lock()`方法，`state`变量的值等于 0，表示 lock 锁没有被占用，此时执行`compareAndSetState(0, 1)`CAS 判断，可得`state == expected == 0`，因此 CAS 成功，将 state 的值修改为 1。\n\n![](rel-9.png)\n\n再来复习下 CAS：通过 Unsafe 提供的 compareAndSwapXxx() 方法保证修改操作的原子性（通过 CPU 原语保证），如果变量的值等于期望值，则修改变量的值为 update，并返回 true；若不等，则返回 false。this 代表当前对象，stateOffset 表示 state 变量在该对象中的偏移量。\n\n![](rel-10.png)\n\n再来看看 `setExclusiveOwnerThread()` 方法做了啥：将拥有 lock 锁的线程修改为线程 A。\n\n![](rel-11.png)\n\n> **再来看看线程 B（客户 B）的执行流程**\n\n第二次执行 lock() 方法\n\n由于第二次执行`lock()`方法，`state`变量的值等于 1，表示 lock 锁没有被占用，此时执行 `compareAndSetState(0, 1)`CAS 判断，可得`state != expected`，因此 CAS 失败，进入`acquire()`方法。\n\n![](rel-9.png)\n\n`acquire()` 方法主要包含如下几个方法，下面我们一个一个来查看。\n\n![](rel-12.png)\n\n#### **`tryAcquire(arg)` 方法的执行流程**\n\n先来看看 `tryAcquire()` 方法，诶，怎么抛了个异常？别着急，仔细一看是 `AbstractQueuedSynchronizer` 抽象队列同步器中定义的方法，既然抛出了异常，就证明父类强制要求子类去实现。\n\n这里以非公平锁 `NonfairSync` 为例，在 `tryAcquire()` 方法中调用了 `nonfairTryAcquire()` 方法，注意，这里传入的参数都是 1。\n\n![](rel-13.png)\n\n`nonfairTryAcquire(acquires)`正常的执行流程：\n\n在`nonfairTryAcquire()`方法中，大多数情况都是如下的执行流程：线程 B 执行`int c = getState()`时，获取到 state 变量的值为 1，表示 lock 锁正在被占用；于是执行`if (c == 0) {`发现条件不成立，接着执行下一个判断条件`else if (current ==getExclusiveOwnerThread()) {`，current 线程为线程 B，而 `getExclusiveOwnerThread()`方法返回正在占用 lock 锁的线程，为线程 A，因此 `tryAcquire()`方法最后会`return false`，表示并没有抢占到 lock 锁。\n\n![](rel-14.png)\n\n**补充**：`getExclusiveOwnerThread()` 方法返回正在占用 lock 锁的线程（排他锁，exclusive）。\n\n![](rel-15.png)\n\n> **nonfairTryAcquire(acquires) 比较特殊的执行流程：**\n\n第一种情况是，走到`int c = getState()`语句时，此时线程 A 恰好执行完成，让出了 lock 锁，那么`state`变量的值为 0，当然发生这种情况的概率很小，那么线程 B 执行 CAS 操作成功后，将占用 lock 锁的线程修改为自己，然后返回 true，表示抢占锁成功。其实这里还有一种情况，需要留到`unlock()`方法才能说清楚\n\n第二种情况为可重入锁的表现，假设 A 线程又再次抢占 lock 锁（当然示例代码里面并没有体现出来），这时`current == getExclusiveOwnerThread()`条件成立，将`state`变量的值加上`acquire`，这种情况下也应该`return true`，表示线程 A 正在占用 lock 锁。因此，`state`变量的值是可以大于 1 的。\n![](rel-14.png)\n\n> **继续往下走，执行 `addWaiter(Node.EXCLUSIVE)` 方法**\n\n在 `tryAcquire()` 方法返回 `false` 之后，进行 `!` 操作后为 `true`，那么会继续执行 `addWaiter()` 方法。\n\n![](rel-12.png)\n\n来看看 addWaiter() 方法做了些啥？\n\n之前讲过`Node`节点用于封装用户线程，这里将当前正在执行的线程通过`Node`封装起来（当前线程正是抢占 lock 锁没有抢占到的线程）。\n\n判断`tail`尾指针是否为空，双端队列此时还没有元素呢~肯定为空呀，那么执行 `enq(node)`方法，将封装了线程 B 的`Node`节点入队。\n\n![](rel-16.png)\n\n**enq(node) 方法：构建双端同步队列**\n\n也许看到这里的代码有点蒙，需要有些前置知识，在双端同步队列中，第一个节点为虚节点（也叫哨兵节点），其实并不存储任何信息，只是占位。 真正的第一个有数据的节点，是从第二个节点开始的。\n\n![](rel-17.png)\n\n**第一次执行 for 循环**：现在解释起来就不费劲了，当线程 B 进来时，双端同步队列为空，此时肯定要先构建一个哨兵节点。此时`tail == null`，因此进入`if(t == null) {`的分支，头指针指向哨兵节点，此时队列中只有一个节点，尾节点即是头结点，因此尾指针也指向该哨兵节点。\n![](rel-18.png)\n\n**第二次执行 for 循环**：现在该将装着线程 B 的节点放入双端同步队列中，此时`tail`指向了哨兵节点，并不等于 null，因此`if (t == null)`不成立，进入 else 分支。以尾插法的方式，先将`node`（装着线程 B 的节点）的`prev`指向之前的`tail`，再将`node`设置为尾节点（执行`compareAndSetTail(t, node)`），最后将`t.next`指向`node`，最后执行`return t`结束 for 循环。\n\n**补充**：`compareAndSetTail(t, node)` 方法的实现\n\n![](rel-19.png)\n\n**注意**：哨兵节点和 `nodeB` 节点的 `waitStatus` 均为 0，表示在等待队列中。\n\n**`acquireQueued()` 方法的执行**\n\n执行完 `addWaiter()` 方法之后，就该执行 `acquireQueued()` 方法了，这个方法有点东西，我们放到后面再去讲它\n\n![](rel-12.png)\n\n> **最后来看看线程 C（客户 C）的执行流程**\n\n线程 C 和线程 B 的执行流程很类似，都是执行 `acquire()` 中的方法。\n\n![](rel-12.png)\n\n但是在 `addWaiter()` 方法中，执行流程有些区别。此时 `tail != null`，因此在 `addWaiter()` 方法中就已经将 `nodeC` 添加至队尾了。\n\n![](rel-16.png)\n\n执行完 `addWaiter()` 方法后，就已经将 nodeC 挂在了双端同步队列的队尾，不需要再执行 `enq(node)` 方法。\n\n![](rel-20.png)\n\n> **补前面的坑：`acquireQueued()` 方法的执行逻辑**\n\n先来看看看看 `acquireQueued()` 方法的源代码，其实这样直接看代码有点懵逼，我们接下来举例来理解。注意看：两个 `if` 判断中的代码都放在 `for( ; ; )` 中执行，这样可以实现自旋的操作。\n\n![](rel-21.png)\n\n**线程 B 的执行流程**\n\n线程 B 执行 addWaiter() 方法之后，就进入了 acquireQueued() 方法中，此时传入的参数为封装了线程 B 的 nodeB 节点，nodeB 的前驱结点为哨兵节点，因此 final Node p = node.predecessor() 执行完后，p 将指向哨兵节点。哨兵节点满足 p == head，但是线程 B 执行 tryAcquire(arg) 方法尝试抢占 lock 锁时还是会失败，因此会执行下面 if 判断中的 shouldParkAfterFailedAcquire(p, node) 方法，该方法的代码如下：\n\n```java\nprivate static boolean shouldParkAfterFailedAcquire(Node pred, Node node) {\n    int ws = pred.waitStatus;\n    if (ws == Node.SIGNAL)\n        /*\n         * This node has already set status asking a release\n         * to signal it, so it can safely park.\n         */\n        return true;\n    if (ws > 0) {\n        /*\n         * Predecessor was cancelled. Skip over predecessors and\n         * indicate retry.\n         */\n        do {\n            node.prev = pred = pred.prev;\n        } while (pred.waitStatus > 0);\n        pred.next = node;\n    } else {\n        /*\n         * waitStatus must be 0 or PROPAGATE.  Indicate that we\n         * need a signal, but don't park yet.  Caller will need to\n         * retry to make sure it cannot acquire before parking.\n         */\n        compareAndSetWaitStatus(pred, ws, Node.SIGNAL);\n    }\n    return false;\n}\n```\n\n哨兵节点的 `waitStatus == 0`，因此执行 CAS 操作将哨兵节点的 `waitStatus` 改为 `Node.SIGNAL(-1)`。\n\n![](rel-22.png)\n\n注意：`compareAndSetWaitStatus(pred, ws, Node.SIGNAL)`调用 `unsafe.compareAndSwapInt(node, waitStatusOffset, expect, update);`实现，虽然`compareAndSwapInt()`方法内无自旋，但是在`acquireQueued()`方法中的`for( ; ; )`能保证此自选操作成功（另一种情况就是线程 B 抢占到 lock 锁）。\n\n![](rel-23.png)\n\n执行完上述操作，将哨兵节点的 `waitStatus` 设置为了 -1。\n\n![](rel-24.png)\n\n执行完毕将退出 `if` 判断，又会重新进入 `for( ; ; )` 循环，此时执行 `shouldParkAfterFailedAcquire(p, node)` 方法时会返回 `true`，因此此时会接着执行 `parkAndCheckInterrupt()` 方法。\n\n![](rel-21.png)\n\n线程 B 调用 `park()` 方法后被挂起，程序不会然续向下执行，程序就在这儿排队等待。\n\n![](rel-25.png)\n\n**线程 C 的执行流程**\n\n线程 C 最终也会执行到 `LockSupport.park(this);` 处，然后被挂起，进入等待区\n\n**总结：**\n\n如果前驱节点的`waitstatus`是`SIGNAL 状态（-1）`，即 `shouldParkAfterFailedAcquire() `方法会返回 `true`，程序会继续向下执行 `parkAndCheckInterrupt()`方法，用于将当前线程挂起。\n\n根据`park()`方法 API 描述，程序在下面三种情况会继续向下执行：\n\n1. 被`unpark`\n\n2. 被中断（interrupt）\n\n3. 其他不合逻辑的返回才会然续向下执行\n   \n   因上述三种情况程序执行至此，返回当前线程的中断状态，并清空中断状态。如果程序由于被中断，该方法会返回 true。\n\n#### 可总算要 unlock() 了\n\n> **线程 A 执行 `unlock()` 方法**\n\nA 线程终于要 `unlock()` 了吗？真不容易啊！\n\n![](rel-26.png)\n\n`unlock()` 方法调用了 `sync.release(1)` 方法。\n\n![](rel-27.png)\n\n**release() 方法的执行流程**\n\n其实主要就是看看`tryRelease(arg)`方法和`unparkSuccessor(h)`方法的执行流程，这里先大概说一下，能有个印象：线程 A 即将让出 lock 锁，因此`tryRelease()`执行后将返回 true，表示礼让成功，head 指针指向哨兵节点，并且 if 条件满足，可执行 `unparkSuccessor(h)`方法。\n\n![](rel-28.png)\n\n**`tryRelease(arg)` 方法的执行逻辑**\n\n线程 A 只加锁过一次，因此 `state` 的值为 1，参数 `release` 的值也为 1，因此 `c == 0`。将 `free` 设置为 `true`，表示当前 lock 锁已被释放，将排他锁占有的线程设置为 `null`，表示没有任何线程占用 lock 锁。\n\n![](rel-29.png)\n\n**unparkSuccessor(h) 方法的执行逻辑**\n\n在 release() 方法中获取到的头结点 h 为哨兵节点，h.waitStatus == -1，因此执行 CAS操作将哨兵节点的 waitStatus 设置为 0，并将哨兵节点的下一个节点（s = node.next = nodeB）获取出来，并唤醒 nodeB 中封装的线程（if (s == null || s.waitStatus > 0) 不成立，只有 if (s != null) 成立）。\n\n![](rel-30.png)\n\n执行完上述操作后，当前占用 lock 锁的线程为 `null`，哨兵节点的 `waitStatus` 设置为 0，`state` 的值为 0（表示当前没有任何线程占用 lock 锁）。\n\n![](rel-31.png)\n\n**杀个回马枪：继续来看 B 线程被唤醒之后的执行逻辑**\n\n再次回到 lock() 方法的执行流程中来，线程 B 被 unpark() 之后将不再阻塞，继续执行下面的程序，线程 B 正常被唤醒，因此`Thread.interrupted()`的值为 false，表示线程 B 未被中断。\n\n![](rel-25.png)\n\n回到上一层方法中，此时 lock 锁未被占用，线程 B 执行 `tryAcquire(arg)` 方法能够抢到 lock 锁，并且将 `state` 变量的值设置为 1，表示该 lock 锁已经被占用。\n\n![](rel-21.png)\n\n接着来研究下 `setHead(node)` 方法：传入的节点为 `nodeB`，头指针指向 `nodeB` 节点；将 `nodeB` 中封装的线程置为 `null`（因为已经获得锁了）；`nodeB` 不再指向其前驱节点（哨兵节点）。这一切都是为了将 `nodeB` 作为新的哨兵节点。\n\n![](rel-32.png)\n\n执行完 `setHead(node)` 方法的状态如下图所示。\n\n![](rel-33.png)\n\n将 `p.next` 设置为 `null`，这是原来的哨兵节点就是完全孤立的一个节点，此时 `nodeB` 作为新的哨兵节点\n\n![](rel-34.png)\n\n线程 C 也是类似的执行流程。\n\n### AQS 总结\n\n#### AQS 的考点\n\n第一个考点：我相信你应该看过源码了，那么AQS里面有个变量叫State，它的值有几种？\n\n答：3个状态：没占用是0，占用了是1，大于1是可重入锁\n\n第二个考点：如果锁正在被占用，AB两个线程进来了以后，请问这个总共有多少个Node节点？\n\n答：答案是3个，分别是哨兵节点、nodeA、nodeB\n\n#### AQS 源码解读案例图示\n\n![](rel-35.png)\n","slug":"Java并发笔记-上篇","published":1,"updated":"2021-11-29T07:34:29.033Z","_id":"ckw1i535800009syr7qal3a3p","comments":1,"photos":[],"link":"","content":"<h1 id=\"java并发笔记\"><a class=\"markdownIt-Anchor\" href=\"#java并发笔记\">#</a> Java 并发笔记</h1>\n<h2 id=\"可重入锁\"><a class=\"markdownIt-Anchor\" href=\"#可重入锁\">#</a> 可重入锁</h2>\n<h3 id=\"可重入锁是什么\"><a class=\"markdownIt-Anchor\" href=\"#可重入锁是什么\">#</a> 可重入锁是什么？</h3>\n<p>顾名思义，就是支持重入的锁，它表示该锁能够支持一个线程对资源的重复加锁。除此之外，该锁还支持获取锁的公平与非公平性选择。</p>\n<h3 id=\"可重入锁的代码示例-synchronized\"><a class=\"markdownIt-Anchor\" href=\"#可重入锁的代码示例-synchronized\">#</a> 可重入锁的代码示例 - synchronized</h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/** 证明synchronized是可重入锁 */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SynchronizedDemo</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">static</span> Object objectLockA = <span class=\"keyword\">new</span> Object();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">m1</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">synchronized</span> (objectLockA) &#123;</span><br><span class=\"line\">      System.out.println(Thread.currentThread().getName() + <span class=\"string\">&quot;\\t-----外层调用&quot;</span>);</span><br><span class=\"line\">      <span class=\"keyword\">synchronized</span> (objectLockA) &#123;</span><br><span class=\"line\">        System.out.println(Thread.currentThread().getName() + <span class=\"string\">&quot;\\t-----中层调用&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">synchronized</span> (objectLockA) &#123;</span><br><span class=\"line\">          System.out.println(Thread.currentThread().getName() + <span class=\"string\">&quot;\\t-----内层调用&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    m1();</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"可重入锁的代码示例-reenterantlock\"><a class=\"markdownIt-Anchor\" href=\"#可重入锁的代码示例-reenterantlock\">#</a> 可重入锁的代码示例 - ReenterantLock</h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/** ReenterantLock也是可重入锁，加锁几次就要释放锁几次 */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ReenterantLockDemo</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Lock lockA = <span class=\"keyword\">new</span> ReentrantLock();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">new</span> Thread(</span><br><span class=\"line\">            () -&gt; &#123;</span><br><span class=\"line\">              lockA.lock();</span><br><span class=\"line\">              <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                System.out.println(Thread.currentThread().getName() + <span class=\"string\">&quot;\\t ----外层&quot;</span>);</span><br><span class=\"line\">                lockA.lock();</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                  System.out.println(Thread.currentThread().getName() + <span class=\"string\">&quot;\\t ----内层&quot;</span>);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">                  lockA.unlock();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">              &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">                lockA.unlock();</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            <span class=\"string\">&quot;t1&quot;</span>)</span><br><span class=\"line\">        .start();</span><br><span class=\"line\">    <span class=\"keyword\">new</span> Thread(</span><br><span class=\"line\">            () -&gt; &#123;</span><br><span class=\"line\">              lockA.lock();</span><br><span class=\"line\">              <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                System.out.println(Thread.currentThread().getName() + <span class=\"string\">&quot;\\t ----第二个线程获取锁&quot;</span>);</span><br><span class=\"line\">              &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">                lockA.unlock();</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            <span class=\"string\">&quot;t2&quot;</span>)</span><br><span class=\"line\">        .start();</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"公平与非公平获取锁的区别是什么\"><a class=\"markdownIt-Anchor\" href=\"#公平与非公平获取锁的区别是什么\">#</a> 公平与非公平获取锁的区别是什么？</h3>\n<p>如果一个锁是公平的，那么锁的获取顺序就应该符合请求的绝对时间顺序，也就是<strong> FIFO</strong>。</p>\n<p>对于非公平的锁，只要 CAS 设置同步状态成功，则表示当前线程获取了锁。</p>\n<h4 id=\"产生结果\"><a class=\"markdownIt-Anchor\" href=\"#产生结果\">#</a> 产生结果</h4>\n<p>公平的锁每次都是同步队列中的第一个节点获取到锁，非公平的锁会出现一个线程连续获取锁的现象。</p>\n<p>为什么会出现线程连续获取锁的情况呢？当一个线程请求锁时，只要获取了同步状态即成功获取锁。在这个前提下，刚释放锁的线程再次获取同步状态的概率非常大，使得其他线程只能在同步队列中等待。</p>\n<p>非公平的锁可能导致 <strong>线程饥饿</strong> ，为什么它又被设置成默认的实现呢？如果把每次不同的线程获取到锁视为一次切换，公平性的锁每次都进行切换，非公平的锁出现切换的概率大大降低，这说明非公平锁的开销非常小。引用自 <strong>Java 并发编程艺术</strong> 一书的表 5-7 的例子显示，在 ubuntu server 14.04 i5-3470 8GB，10 个线程，每个线程获取 100000 次锁的场景中，公平锁与非公平锁相比，总耗时是其 93.4 倍，总切换次数是其 133 倍。这可以说明：公平性的锁保证了锁的获取按照 FIFO 原则，而代价是进行大量的线程切换。非公平性锁虽然可能造成 <strong>线程饥饿</strong>，但极少的线程切换，保证了更大的吞吐量。</p>\n<h2 id=\"locksupport\"><a class=\"markdownIt-Anchor\" href=\"#locksupport\">#</a> LockSupport</h2>\n<h3 id=\"locksupport-是什么\"><a class=\"markdownIt-Anchor\" href=\"#locksupport-是什么\">#</a> LockSupport 是什么？</h3>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYXBpcmVmLmNvbS9qYXZhMTEtemgvamF2YS5iYXNlL2phdmEvdXRpbC9jb25jdXJyZW50L2xvY2tzL0xvY2tTdXBwb3J0Lmh0bWw=\">官方中文文档</span></p>\n<h4 id=\"api介绍\"><a class=\"markdownIt-Anchor\" href=\"#api介绍\">#</a> api 介绍</h4>\n<p>用于创建锁和其他同步类的基本线程阻塞原语。</p>\n<p><strong>该类与使用它的每个线程关联一个 Permit（许可证）（在<a href=\"https://www.apiref.com/java11-zh/java.base/java/util/concurrent/Semaphore.html\"> <code>Semaphore</code> </a> 类的意义上）。</strong> 如果许可证可用，将立即返回 <code>park</code>  ，并在此过程中消费；否则<em>可能会</em>阻止。 如果尚未提供许可，则致电 <code>unpark</code>  获得许可。 **（与 Semaphores 不同，许可证不会累积。最多只有一个。）** 可靠的使用需要使用 volatile（或原子）变量来控制何时停放或取消停放。 对于易失性变量访问保持对这些方法的调用的顺序，但不一定是非易失性变量访问。</p>\n<p>方法 <code>park</code>  和 <code>unpark</code>  提供了阻止和解除阻塞线程的有效方法，这些线程没有遇到导致不推荐使用的方法 <code>Thread.suspend</code>  和 <code>Thread.resume</code>  无法用于此类目的的问题：一个线程调用 <code>park</code>  和另一个线程尝试 <code>unpark</code>  将保留活跃性，由于许可证。 此外，如果调用者的线程被中断，则会返回 <code>park</code>  ，并且支持超时版本。  <code>park</code>  方法也可以在任何其他时间返回，“无理由”，因此通常必须在返回时重新检查条件的循环内调用。 在这个意义上，  <code>park</code>  可以作为 “忙碌等待” 的优化，不会浪费太多时间旋转，但必须与 <code>unpark</code>  配对才能生效。</p>\n<p>三种形式的 <code>park</code>  每个也支持 <code>blocker</code>  对象参数。 在线程被阻塞时记录此对象，以允许监视和诊断工具识别线程被阻止的原因。 （此类工具可以使用方法<a href=\"https://www.apiref.com/java11-zh/java.base/java/util/concurrent/locks/LockSupport.html#getBlocker(java.lang.Thread)\"> <code>getBlocker(Thread)</code> </a> 访问<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYXBpcmVmLmNvbS9qYXZhMTEtemgvamF2YS5iYXNlL2phdmEvdXRpbC9jb25jdXJyZW50L2xvY2tzL0xvY2tTdXBwb3J0Lmh0bWwjZ2V0QmxvY2tlcihqYXZhLmxhbmcuVGhyZWFkKQ==\">阻止程序</span> 。）强烈建议使用这些表单而不是没有此参数的原始表单。 在锁实现中作为 <code>blocker</code>  提供的正常参数是 <code>this</code>  。</p>\n<p>这些方法旨在用作创建更高级别同步实用程序的工具，并且对于大多数并发控制应用程序本身并不有用。  <code>park</code>  方法仅用于以下形式的构造：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">while (!canProceed()) &#123; // ensure request to unpark is visible to other threads ... LockSupport.park(this); &#125; </span><br></pre></td></tr></table></figure>\n<p>在调用 <code>park</code>  之前，线程没有发布请求 <code>park</code>  需要锁定或阻塞。 因为每个线程只有一个许可证，所以任何中间使用 <code>park</code>  ，包括隐式地通过类加载，都可能导致无响应的线程（“丢失 unpark”）。</p>\n<h4 id=\"总结\"><a class=\"markdownIt-Anchor\" href=\"#总结\">#</a> 总结</h4>\n<p>LockSupport 中的 <code>park()</code>  和 <code>unpark()</code>  的作用分别是阻塞线程和解除阻塞线程，可以将其看作是线程等待唤醒机制 (wait/notify) 的改进版。</p>\n<p>LockSupport 使用 Permit（许可证）的概念来达到阻塞和唤醒线程的功能，每个线程都有一个许可 (Permit)，Permit 只有两个值 1 和 0，默认是 0。</p>\n<p>Permit 可以看做成一个 Semaphore，但与 Semaphore 不同，Permit 累加上限只有 1。</p>\n<h3 id=\"三种实现线程等待唤醒的方法\"><a class=\"markdownIt-Anchor\" href=\"#三种实现线程等待唤醒的方法\">#</a> 三种实现线程等待唤醒的方法</h3>\n<ol>\n<li>\n<p>使用 Object 中的 <code>wait()</code>  方法让线程等待，使用 Object 中的 <code>notify()</code>  方法唤醒线程</p>\n<p>注意条件</p>\n<ol>\n<li>wait 和 notify 方法必须要在 synchronized 同步块或者方法里面且成对出现使用</li>\n<li>先 wait 后 notify 才能成功唤醒线程</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> Object objectLock = <span class=\"keyword\">new</span> Object();</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">synchronizedWaitNotify</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">new</span> Thread(</span><br><span class=\"line\">          () -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">synchronized</span> (objectLock) &#123;</span><br><span class=\"line\">              System.out.println(Thread.currentThread().getName() + <span class=\"string\">&quot;\\t&quot;</span> + <span class=\"string\">&quot;------come in&quot;</span>);</span><br><span class=\"line\">              <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                objectLock.wait(); <span class=\"comment\">// 等待</span></span><br><span class=\"line\">              &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">              System.out.println(Thread.currentThread().getName() + <span class=\"string\">&quot;\\t&quot;</span> + <span class=\"string\">&quot;------被唤醒&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">          <span class=\"string\">&quot;A&quot;</span>)</span><br><span class=\"line\">      .start();</span><br><span class=\"line\">   </span><br><span class=\"line\">  <span class=\"keyword\">new</span> Thread(</span><br><span class=\"line\">          () -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">synchronized</span> (objectLock) &#123;</span><br><span class=\"line\">              objectLock.notify(); <span class=\"comment\">// 唤醒</span></span><br><span class=\"line\">              System.out.println(Thread.currentThread().getName() + <span class=\"string\">&quot;\\t&quot;</span> + <span class=\"string\">&quot;------通知&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">          <span class=\"string\">&quot;B&quot;</span>)</span><br><span class=\"line\">      .start();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img data-src=\"locksupport%E4%BB%A3%E7%A0%81%E7%BB%93%E6%9E%9C1.png\" alt=\"img\"></p>\n</li>\n<li>\n<p>使用 JUC 包中的 Condition 的 <code>await()</code>  方法让线程等待，使用 Condition 的 <code>signal()</code>  方法唤醒线程</p>\n<p>注意条件</p>\n<ol>\n<li>线程先要获得并持有锁，必须在锁块（synchronized 或 lock）中</li>\n<li>必须要先等待后唤醒，线程才能够被唤醒</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> Lock lock = <span class=\"keyword\">new</span> ReentrantLock();</span><br><span class=\"line\"><span class=\"keyword\">static</span> Condition condition = lock.newCondition();</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">lockAwaitSignal</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">new</span> Thread(</span><br><span class=\"line\">          () -&gt; &#123;</span><br><span class=\"line\">            lock.lock();</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">              System.out.println(Thread.currentThread().getName() + <span class=\"string\">&quot;\\t&quot;</span> + <span class=\"string\">&quot;------come in&quot;</span>);</span><br><span class=\"line\">              <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                condition.await();</span><br><span class=\"line\">              &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">              System.out.println(Thread.currentThread().getName() + <span class=\"string\">&quot;\\t&quot;</span> + <span class=\"string\">&quot;------被唤醒&quot;</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">              lock.unlock();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">          <span class=\"string\">&quot;A&quot;</span>)</span><br><span class=\"line\">      .start();</span><br><span class=\"line\">   </span><br><span class=\"line\">  <span class=\"keyword\">new</span> Thread(</span><br><span class=\"line\">          () -&gt; &#123;</span><br><span class=\"line\">            lock.lock();</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">              condition.signal();</span><br><span class=\"line\">              System.out.println(Thread.currentThread().getName() + <span class=\"string\">&quot;\\t&quot;</span> + <span class=\"string\">&quot;------通知&quot;</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">              lock.unlock();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">          <span class=\"string\">&quot;B&quot;</span>)</span><br><span class=\"line\">      .start();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img data-src=\"locksupport%E4%BB%A3%E7%A0%81%E7%BB%93%E6%9E%9C2.png\" alt=\"img\"></p>\n</li>\n<li>\n<p>使用 LockSupport 类阻塞当前线程以及唤醒指定的被阻塞线程</p>\n</li>\n</ol>\n<h3 id=\"locksupport-的主要方法\"><a class=\"markdownIt-Anchor\" href=\"#locksupport-的主要方法\">#</a> LockSupport 的主要方法</h3>\n<h4 id=\"阻塞\"><a class=\"markdownIt-Anchor\" href=\"#阻塞\">#</a> 阻塞</h4>\n<p><code>park()/park(Object blocker)</code></p>\n<p>作用：阻塞当前线程 / 阻塞传入的具体线程</p>\n<p>permit 默认是 0，所以一开始调用 <code>park()</code>  方法，当前线程就会阻塞，直到别的线程将当前线程的 permit 设置为 1 时， <code>park() </code> 方法会被唤醒，然后会将 permit 再次设置为 0 并返回。</p>\n<h5 id=\"park-方法通过-unsafe-类实现\"><a class=\"markdownIt-Anchor\" href=\"#park-方法通过-unsafe-类实现\">#</a> park () 方法通过 Unsafe 类实现</h5>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Disables the current thread for thread scheduling purposes unless the permit is available.</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">park</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    UNSAFE.park(<span class=\"keyword\">false</span>, <span class=\"number\">0L</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"唤醒\"><a class=\"markdownIt-Anchor\" href=\"#唤醒\">#</a> 唤醒</h4>\n<p><code>unpark(Thread thread)</code></p>\n<p>作用：唤醒处于阻断状态的指定线程</p>\n<p>调用 <code>unpark(thread)</code>  方法后，就会将 thread 线程的许可 permit 设置成 1（注意多次调用  <code>unpark()</code>  方法，不会累加，permit 值还是 1），这会自动唤醒 thread 线程，即之前阻塞中的 <code>LockSupport.park()</code>  方法会立即返回。</p>\n<h5 id=\"unpark-方法通过-unsafe-类实现\"><a class=\"markdownIt-Anchor\" href=\"#unpark-方法通过-unsafe-类实现\">#</a> unpark () 方法通过 Unsafe 类实现</h5>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Makes available the permit for the given thread</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">unpark</span><span class=\"params\">(Thread thread)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (thread != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">        UNSAFE.unpark(thread);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"locksupport代码示例\"><a class=\"markdownIt-Anchor\" href=\"#locksupport代码示例\">#</a> LockSupport 代码示例</h3>\n<h4 id=\"正常使用-locksupport\"><a class=\"markdownIt-Anchor\" href=\"#正常使用-locksupport\">#</a> 正常使用 LockSupport</h4>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">lockSupportParkUnpark</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    Thread a =</span><br><span class=\"line\">        <span class=\"keyword\">new</span> Thread(</span><br><span class=\"line\">            () -&gt; &#123;</span><br><span class=\"line\">              System.out.println(Thread.currentThread().getName() + <span class=\"string\">&quot;\\t&quot;</span> + <span class=\"string\">&quot;------come in&quot;</span>);</span><br><span class=\"line\">              LockSupport.park(); <span class=\"comment\">// 线程 A 阻塞</span></span><br><span class=\"line\">              System.out.println(Thread.currentThread().getName() + <span class=\"string\">&quot;\\t&quot;</span> + <span class=\"string\">&quot;------被唤醒&quot;</span>);</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            <span class=\"string\">&quot;A&quot;</span>);</span><br><span class=\"line\">    a.start();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">new</span> Thread(</span><br><span class=\"line\">            () -&gt; &#123;</span><br><span class=\"line\">              LockSupport.unpark(a); <span class=\"comment\">// B 线程唤醒线程 A</span></span><br><span class=\"line\">              System.out.println(Thread.currentThread().getName() + <span class=\"string\">&quot;\\t&quot;</span> + <span class=\"string\">&quot;------通知&quot;</span>);</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            <span class=\"string\">&quot;B&quot;</span>)</span><br><span class=\"line\">        .start();</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p>程序运行结果：A 线程先执行 <code>LockSupport.park()</code>  方法将通行证（permit）设置为 0， permit 初始值本来就为 0，然后 B 线程执行  <code>LockSupport.unpark(a) </code> 方法将 permit 设置为 1，此时 A 线程可以通行</p>\n<p><img data-src=\"locksupport%E4%BB%A3%E7%A0%81%E7%BB%93%E6%9E%9C3.png\" alt=\"img\"></p>\n<h4 id=\"先-unpark-后-park\"><a class=\"markdownIt-Anchor\" href=\"#先-unpark-后-park\">#</a> 先 unpark () 后 park ()</h4>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">lockSupportUnparkPark</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  Thread a =</span><br><span class=\"line\">      <span class=\"keyword\">new</span> Thread(</span><br><span class=\"line\">          () -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">              TimeUnit.SECONDS.sleep(<span class=\"number\">3L</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">              e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            System.out.println(</span><br><span class=\"line\">                Thread.currentThread().getName()</span><br><span class=\"line\">                    + <span class=\"string\">&quot;\\t&quot;</span></span><br><span class=\"line\">                    + <span class=\"string\">&quot;------come in&quot;</span></span><br><span class=\"line\">                    + System.currentTimeMillis());</span><br><span class=\"line\">            LockSupport.park();</span><br><span class=\"line\">            System.out.println(</span><br><span class=\"line\">                Thread.currentThread().getName()</span><br><span class=\"line\">                    + <span class=\"string\">&quot;\\t&quot;</span></span><br><span class=\"line\">                    + <span class=\"string\">&quot;------被唤醒&quot;</span></span><br><span class=\"line\">                    + System.currentTimeMillis());</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">          <span class=\"string\">&quot;A&quot;</span>);</span><br><span class=\"line\">  a.start();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">new</span> Thread(</span><br><span class=\"line\">          () -&gt; &#123;</span><br><span class=\"line\">            LockSupport.unpark(a);</span><br><span class=\"line\">            System.out.println(Thread.currentThread().getName() + <span class=\"string\">&quot;\\t&quot;</span> + <span class=\"string\">&quot;------通知&quot;</span>);</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">          <span class=\"string\">&quot;B&quot;</span>)</span><br><span class=\"line\">      .start();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>程序运行结果：因为引入了通行证的概念，所以先执行 <code>unpark()</code>  其实并不会有什么影响，从程序运行时间戳可以看出，B 线程先放行通行证之后，A 线程执行  <code>LockSupport.park()</code>  时并没有被阻塞，相当于没有执行。</p>\n<p><img data-src=\"locksupport%E4%BB%A3%E7%A0%81%E7%BB%93%E6%9E%9C4.png\" alt=\"img\"></p>\n<h4 id=\"异常情况没有考虑到-permit-上限值为-1\"><a class=\"markdownIt-Anchor\" href=\"#异常情况没有考虑到-permit-上限值为-1\">#</a> 异常情况：没有考虑到 permit 上限值为 1</h4>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">lockSupport2Park1Unpark</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  Thread a =</span><br><span class=\"line\">      <span class=\"keyword\">new</span> Thread(</span><br><span class=\"line\">          () -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">              TimeUnit.SECONDS.sleep(<span class=\"number\">3L</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">              e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            System.out.println(</span><br><span class=\"line\">                Thread.currentThread().getName()</span><br><span class=\"line\">                    + <span class=\"string\">&quot;\\t&quot;</span></span><br><span class=\"line\">                    + <span class=\"string\">&quot;------come in&quot;</span></span><br><span class=\"line\">                    + System.currentTimeMillis());</span><br><span class=\"line\">            LockSupport.park();</span><br><span class=\"line\">            LockSupport.park();</span><br><span class=\"line\">            System.out.println(</span><br><span class=\"line\">                Thread.currentThread().getName()</span><br><span class=\"line\">                    + <span class=\"string\">&quot;\\t&quot;</span></span><br><span class=\"line\">                    + <span class=\"string\">&quot;------被唤醒&quot;</span></span><br><span class=\"line\">                    + System.currentTimeMillis());</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">          <span class=\"string\">&quot;A&quot;</span>);</span><br><span class=\"line\">  a.start();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">new</span> Thread(</span><br><span class=\"line\">          () -&gt; &#123;</span><br><span class=\"line\">            LockSupport.unpark(a);</span><br><span class=\"line\">            LockSupport.unpark(a);</span><br><span class=\"line\">            System.out.println(Thread.currentThread().getName() + <span class=\"string\">&quot;\\t&quot;</span> + <span class=\"string\">&quot;------通知&quot;</span>);</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">          <span class=\"string\">&quot;B&quot;</span>)</span><br><span class=\"line\">      .start();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>程序运行结果：由于 permit 的上限值为 1，所以执行两次  <code>LockSupport.park()</code>  操作将导致 A 线程阻塞</p>\n<p><img data-src=\"locksupport%E4%BB%A3%E7%A0%81%E7%BB%93%E6%9E%9C5.png\" alt=\"img\"></p>\n<h3 id=\"locksupport-重点说明\"><a class=\"markdownIt-Anchor\" href=\"#locksupport-重点说明\">#</a> LockSupport 重点说明</h3>\n<blockquote>\n<p><strong>LockSupport 是用来创建锁和其他同步类的基本线程阻塞原语</strong></p>\n</blockquote>\n<p>LockSupport 是一个线程阻塞工具类，所有的方法都是静态方法，可以让线程在任意位置阻塞，阻塞之后也有对应的唤醒方法。归根结底，LockSupport 调用的 Unsafe 中的 native 代码。</p>\n<blockquote>\n<p><strong>LockSupport 提供 park () 和 unpark () 方法实现阻塞线程和解除线程阻塞的过程</strong></p>\n</blockquote>\n<p>LockSupport 和每个使用它的线程都有一个许可 (permit) 关联。permit 相当于 1，0 的开关，默认是 0，调用一次 unpark 就加 1 变成 1，调用一次 park 会消费 permit，也就是将 1 变成 0，同时 park 立即返回。</p>\n<p>如再次调用 park 会变成阻塞 (因为 permit 为零了会阻塞在这里，一直到 permit 变为 1)，这时调用 unpark 会把 permit 置为 1。</p>\n<p>每个线程都有一个相关的 permit，permit 最多只有一个，重复调用 unpark 也不会积累凭证。</p>\n<blockquote>\n<p><strong>形象的理解</strong></p>\n</blockquote>\n<p>线程阻塞需要消耗凭证 (permit)，这个凭证最多只有 1 个。</p>\n<ol>\n<li>当调用 park 方法时\n<ol>\n<li>如果有凭证，则会直接消耗掉这个凭证然后正常退出；</li>\n<li>如果无凭证，就必须阻塞等待凭证可用；</li>\n</ol>\n</li>\n<li>而 unpark 则相反，它会增加一个凭证，但凭证最多只能有 1 个，累加无效。</li>\n</ol>\n<h3 id=\"locksupport-面试题\"><a class=\"markdownIt-Anchor\" href=\"#locksupport-面试题\">#</a> LockSupport 面试题</h3>\n<blockquote>\n<p><strong>为什么可以先唤醒线程后阻塞线程？</strong></p>\n</blockquote>\n<p>因为 unpark 获得了一个凭证，之后再调用 park 方法，就可以名正言顺的凭证消费，故不会阻塞。</p>\n<blockquote>\n<p><strong>为什么唤醒两次后阻塞两次，但最终结果还会阻塞线程？</strong></p>\n</blockquote>\n<p>因为凭证的数量最多为 1，连续调用两次 unpark 和调用一次 unpark 效果一样，只会增加一个凭证；而调用两次 park 却需要消费两个凭证，证不够，不能放行。</p>\n<h2 id=\"aqs初探\"><a class=\"markdownIt-Anchor\" href=\"#aqs初探\">#</a> AQS 初探</h2>\n<h3 id=\"aqs-是什么\"><a class=\"markdownIt-Anchor\" href=\"#aqs-是什么\">#</a> AQS 是什么？</h3>\n<p>AQS（AbstractQueuedSynchronizer）：抽象的队列同步器</p>\n<p>一般我们说的 AQS 指的是 <code> java.util.concurrent.locks</code>  包下的 <code>AbstractQueuedSynchronizer</code> ，但其实还有另外三种抽象队列同步器： <code>AbstractOwnableSynchronizer</code> 、 <code>AbstractQueuedLongSynchronizer </code> 和  <code>AbstractQueuedSynchronizer</code> 。</p>\n<h3 id=\"aqs-是-juc-的基石\"><a class=\"markdownIt-Anchor\" href=\"#aqs-是-juc-的基石\">#</a> AQS 是 JUC 的基石</h3>\n<p><img data-src=\"aqs-1.png\" alt=\"\"></p>\n<p><strong>举几个常见的例子</strong></p>\n<ol>\n<li>\n<p>ReentrantLock</p>\n<p><img data-src=\"aqs-2.png\" alt=\"\"></p>\n</li>\n<li>\n<p>CountDownLatch</p>\n<p><img data-src=\"aqs-3.png\" alt=\"\"></p>\n</li>\n<li>\n<p>ReentrantReadWriteLock</p>\n<p><img data-src=\"aqs-4.png\" alt=\"\"></p>\n</li>\n<li>\n<p>Semaphore</p>\n<p><img data-src=\"aqs-5.png\" alt=\"\"></p>\n</li>\n</ol>\n<blockquote>\n<p><strong>进一步理解锁和同步器的关系</strong></p>\n</blockquote>\n<p>锁 -&gt; 面向锁的使用者。定义了程序员和锁交互的使用层 API，隐藏了实现细节，你调用即可，可以理解为用户层面的 API。</p>\n<p>同步器 -&gt; 面向锁的实现者。比如 Java 并发大神 Douglee，提出统一规范并简化了锁的实现，屏蔽了同步状态管理、阻塞线程排队和通知、唤醒机制等，Java 中有那么多的锁，就能简化锁的实现啦。</p>\n<h3 id=\"aqs-能干嘛\"><a class=\"markdownIt-Anchor\" href=\"#aqs-能干嘛\">#</a> AQS 能干嘛</h3>\n<blockquote>\n<p><strong>AQS：加锁会导致阻塞</strong></p>\n</blockquote>\n<p>有阻塞就需要排队，实现排队必然需要有某种形式的队列来进行管理。</p>\n<p>抢到资源的线程直接使用办理业务，抢占不到资源的线程的必然涉及一种排队等候机制，抢占资源失败的线程继续去等待（类似办理窗口都满了，暂时没有受理窗口的顾客只能去候客区排队等候），仍然保留获取锁的可能且获取锁流程仍在继续（候客区的顾客也在等着叫号，轮到了再去受理窗口办理业务）。</p>\n<p>既然说到了排队等候机制，那么就一定 会有某种队列形成，这样的队列是什么数据结构呢？如果共享资源被占用，就需要一定的阻塞等待唤醒机制来保证锁分配。这个机制主要用的是 CLH 队列的变体实现的，将暂时获取不到锁的线程加入到队列中，这个队列就是 AQS 的抽象表现。它将请求共享资源的线程封装成队列的结点（Node） ，通过 CAS、自旋以及 LockSuport.park () 的方式，维护 state 变量的状态，使并发达到同步的效果。</p>\n<h3 id=\"aqs术语理解\"><a class=\"markdownIt-Anchor\" href=\"#aqs术语理解\">#</a> <strong>AQS 术语理解</strong></h3>\n<p><img data-src=\"aqs-6.png\" alt=\"\"></p>\n<p>有阻塞就需要排队，实现排队必然需要队列</p>\n<p>AQS 使用一个 volatile 的 int 类型的成员变量来表示同步状态，通过内置的 FIFO 队列来完成资源获取的排队工作将每条要去抢占资源的线程封装成 一个 Node 节点来实现锁的分配，通过 CAS 完成对 State 值的修改。<br>\nNode 节点是啥？答：你有见过 HashMap 的 Node 节点吗？JDK 用 static class Node&lt;K,V&gt; implements Map.Entry&lt;K,V&gt; { 来封装我们传入的 KV 键值对。这里也是一样的道理，JDK 使用 Node 来封装（管理）Thread<br>\n 可以将 Node 和 Thread 类比于候客区的椅子和等待用餐的顾客</p>\n<p><img data-src=\"aqs-7.png\" alt=\"\"></p>\n<h3 id=\"aqs内部体系架构\"><a class=\"markdownIt-Anchor\" href=\"#aqs内部体系架构\">#</a> <strong>AQS 内部体系架构</strong></h3>\n<ol>\n<li>\n<p>AQS 的 int 变量</p>\n<p>AQS 的同步状态 State 成员变量，类似于银行办理业务的受理窗口状态：零就是没人，自由状态可以办理；大于等于 1，有人占用窗口，等着去。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * The synchronization state.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">volatile</span> <span class=\"keyword\">int</span> state;</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>AQS 的 CLH 队列</p>\n<p>CLH 队列（三个大牛的名字组成），为一个双向队列，类似于银行侯客区的等待顾客。</p>\n<p><img data-src=\"aqs-8.png\" alt=\"\"></p>\n</li>\n<li>\n<p>内部类 Node（Node 类在 AQS 类内部）</p>\n<p>Node 的等待状态 waitState 成员变量，类似于等候区其它顾客 (其它线程) 的等待状态，队列中每个排队的个体就是一个 Node。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Status field, taking on only the values:</span></span><br><span class=\"line\"><span class=\"comment\"> *   SIGNAL:     The successor of this node is (or will soon be)</span></span><br><span class=\"line\"><span class=\"comment\"> *               blocked (via park), so the current node must</span></span><br><span class=\"line\"><span class=\"comment\"> *               unpark its successor when it releases or</span></span><br><span class=\"line\"><span class=\"comment\"> *               cancels. To avoid races, acquire methods must</span></span><br><span class=\"line\"><span class=\"comment\"> *               first indicate they need a signal,</span></span><br><span class=\"line\"><span class=\"comment\"> *               then retry the atomic acquire, and then,</span></span><br><span class=\"line\"><span class=\"comment\"> *               on failure, block.</span></span><br><span class=\"line\"><span class=\"comment\"> *   CANCELLED:  This node is cancelled due to timeout or interrupt.</span></span><br><span class=\"line\"><span class=\"comment\"> *               Nodes never leave this state. In particular,</span></span><br><span class=\"line\"><span class=\"comment\"> *               a thread with cancelled node never again blocks.</span></span><br><span class=\"line\"><span class=\"comment\"> *   CONDITION:  This node is currently on a condition queue.</span></span><br><span class=\"line\"><span class=\"comment\"> *               It will not be used as a sync queue node</span></span><br><span class=\"line\"><span class=\"comment\"> *               until transferred, at which time the status</span></span><br><span class=\"line\"><span class=\"comment\"> *               will be set to 0. (Use of this value here has</span></span><br><span class=\"line\"><span class=\"comment\"> *               nothing to do with the other uses of the</span></span><br><span class=\"line\"><span class=\"comment\"> *               field, but simplifies mechanics.)</span></span><br><span class=\"line\"><span class=\"comment\"> *   PROPAGATE:  A releaseShared should be propagated to other</span></span><br><span class=\"line\"><span class=\"comment\"> *               nodes. This is set (for head node only) in</span></span><br><span class=\"line\"><span class=\"comment\"> *               doReleaseShared to ensure propagation</span></span><br><span class=\"line\"><span class=\"comment\"> *               continues, even if other operations have</span></span><br><span class=\"line\"><span class=\"comment\"> *               since intervened.</span></span><br><span class=\"line\"><span class=\"comment\"> *   0:          None of the above</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * The values are arranged numerically to simplify use.</span></span><br><span class=\"line\"><span class=\"comment\"> * Non-negative values mean that a node doesn&#x27;t need to</span></span><br><span class=\"line\"><span class=\"comment\"> * signal. So, most code doesn&#x27;t need to check for particular</span></span><br><span class=\"line\"><span class=\"comment\"> * values, just for sign.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * The field is initialized to 0 for normal sync nodes, and</span></span><br><span class=\"line\"><span class=\"comment\"> * CONDITION for condition nodes.  It is modified using CAS</span></span><br><span class=\"line\"><span class=\"comment\"> * (or when possible, unconditional volatile writes).</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">volatile</span> <span class=\"keyword\">int</span> waitStatus;</span><br></pre></td></tr></table></figure>\n<p>Node 类的内部结构</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Node</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//共享</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Node SHARED = <span class=\"keyword\">new</span> Node();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//独占</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Node EXCLUSIVE = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//线程被取消了</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> CANCELLED = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//后继线程需要唤醒</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> SIGNAL = -<span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//等待condition唤醒</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> CONDITION = -<span class=\"number\">2</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//共享式同步状态获取将会无条件地传播下去</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> PROPAGATE = -<span class=\"number\">3</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 初始为e，状态是上面的几种</span></span><br><span class=\"line\">    <span class=\"keyword\">volatile</span> <span class=\"keyword\">int</span> waitStatus;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 前置节点</span></span><br><span class=\"line\">    <span class=\"keyword\">volatile</span> Node prev;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 后继节点</span></span><br><span class=\"line\">    <span class=\"keyword\">volatile</span> Node next;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>总结</p>\n<p>有阻塞就需要排队，实现排队必然需要队列，通过 state 变量 + CLH 双端 Node 队列实现。</p>\n</li>\n</ol>\n<h3 id=\"aqs同步队列的基本结构\"><a class=\"markdownIt-Anchor\" href=\"#aqs同步队列的基本结构\">#</a> <strong>AQS 同步队列的基本结构</strong></h3>\n<p><img data-src=\"aqs-9.png\" alt=\"\"></p>\n<h3 id=\"aqs底层是怎么排队的\"><a class=\"markdownIt-Anchor\" href=\"#aqs底层是怎么排队的\">#</a> <strong>AQS 底层是怎么排队的？</strong></h3>\n<p>通过调用  <code>LockSupport.park()</code>  来进行排队。</p>\n<h3 id=\"从-reentrantlock-进入-aqs\"><a class=\"markdownIt-Anchor\" href=\"#从-reentrantlock-进入-aqs\">#</a> 从 ReentrantLock 进入 AQS</h3>\n<h4 id=\"reentrantlock-锁\"><a class=\"markdownIt-Anchor\" href=\"#reentrantlock-锁\">#</a> ReentrantLock 锁</h4>\n<p><code>ReentrantLock</code>  类是  <code>Lock</code>  接口的实现类，基本上是通过【聚合】了一个【队列同步器】的子类完成线程访问控制的。</p>\n<p><strong>ReentrantLock 的原理</strong></p>\n<p><img data-src=\"rel-1.png\" alt=\"\"></p>\n<h4 id=\"公平锁-非公平锁\"><a class=\"markdownIt-Anchor\" href=\"#公平锁-非公平锁\">#</a> 公平锁 &amp; 非公平锁</h4>\n<p>在  <code>ReentrantLock</code>  内定义了静态内部类，分别为  <code>NoFairSync</code> （非公平锁）和  <code>FairSync</code> （公平锁）</p>\n<p><img data-src=\"rel-2.png\" alt=\"\"></p>\n<p><code>ReentrantLock</code>  的构造函数：不传参数表示创建非公平锁；参数为 true 表示创建公平锁；参数为 false 表示创建非公平锁。</p>\n<p>看一下 <code>lock()</code>  方法的执行流程：以  <code>NonfairSync</code>  为例</p>\n<p><img data-src=\"rel-3.png\" alt=\"\"></p>\n<p>在  <code>ReentrantLock</code>  中， <code>NoFairSync</code>  和  <code>FairSync</code>  中  <code>tryAcquire()</code>  方法的区别，可以明显看出公平锁与非公平锁的 <code>lock()</code>  方法唯一的区别就在于公平锁在获取同步状态时多了一个限制条件:</p>\n<p><code>hasQueuedPredecessors()</code></p>\n<p><img data-src=\"rel-4.png\" alt=\"\"></p>\n<p><code>hasQueuedPredecessors()</code>  方法是公平锁加锁时判断等待队列中是否存在有效节点的方法</p>\n<p><img data-src=\"rel-5.png\" alt=\"\"></p>\n<h3 id=\"公平锁与非公平锁的总结\"><a class=\"markdownIt-Anchor\" href=\"#公平锁与非公平锁的总结\">#</a> 公平锁与非公平锁的总结</h3>\n<p>对比公平锁和非公平锁的 <code>tryAcqure()</code>  方法的实现代码， 其实差别就在于非公平锁获取锁时比公平锁中少了一个判断 <code>!hasQueuedPredecessors()</code> ， <code>hasQueuedPredecessors()</code>  中判断了是否需要排队，导致公平锁和非公平锁的差异如下:</p>\n<p>公平锁：公平锁讲究先来先到，线程在获取锁时，如果这个锁的等待队列中已经有线程在等待，那么当前线程就会进入等待队列中；</p>\n<p>非公平锁：不管是否有等待队列，如果可以获取锁，则立刻占有锁对象。也就是说队列的第一 个排队线程在 unpark ()，之后还是需要竞争锁 (存在线程竞争的情况下)</p>\n<p><img data-src=\"rel-6.png\" alt=\"\"></p>\n<p>而  <code>acquire()</code>  方法最终都会调用  <code>tryAcquire()</code>  方法</p>\n<p><img data-src=\"rel-7.png\" alt=\"\"></p>\n<p>在  <code>NonfairSync</code>  和  <code>FairSync</code>  中均重写了其父类  <code>AbstractQueuedSynchronizer</code>  中的  <code>tryAcquire()</code>  方法。</p>\n<p><img data-src=\"rel-8.png\" alt=\"\"></p>\n<h4 id=\"从非公平锁的-lock-入手\"><a class=\"markdownIt-Anchor\" href=\"#从非公平锁的-lock-入手\">#</a> 从非公平锁的 lock () 入手</h4>\n<p>我们这里举个栗子，假设 A、B、C 三个人都要去银行窗口办理业务，但是银行窗口只有一个个，我们使用  <code>lock.lock()</code>  模拟这种情况。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.TimeUnit;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.locks.ReentrantLock;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/** <span class=\"doctag\">@ClassName</span> AQSDemo <span class=\"doctag\">@Description</span> TODO <span class=\"doctag\">@Author</span> sunq <span class=\"doctag\">@Date</span> 2021/11/29 11:08 */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AQSDemo</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    ReentrantLock lock = <span class=\"keyword\">new</span> ReentrantLock();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 带入一个银行办理业务的案例来模拟我们的AQS如何进行线程的管理和通知唤醒机制</span></span><br><span class=\"line\">    <span class=\"comment\">// 3个线程模拟3个来银行网点，受理窗口办理业务的顾客</span></span><br><span class=\"line\">    <span class=\"comment\">// A顾客就是第一个顾客，此时受理窗口没有任何人，A可以直接去办理</span></span><br><span class=\"line\">    <span class=\"keyword\">new</span> Thread(</span><br><span class=\"line\">            () -&gt; &#123;</span><br><span class=\"line\">              lock.lock();</span><br><span class=\"line\">              <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;-----A thread come in&quot;</span>);</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                  TimeUnit.MINUTES.sleep(<span class=\"number\">20</span>);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">                  e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">              &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">                lock.unlock();</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            <span class=\"string\">&quot;A&quot;</span>)</span><br><span class=\"line\">        .start();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 第二个顾客，第二个线程---》由于受理业务的窗口只有一个(只能一个线程持有锁)，此时B只能等待，</span></span><br><span class=\"line\">    <span class=\"comment\">// 进入候客区</span></span><br><span class=\"line\">    <span class=\"keyword\">new</span> Thread(</span><br><span class=\"line\">            () -&gt; &#123;</span><br><span class=\"line\">              lock.lock();</span><br><span class=\"line\">              <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;-----B thread come in&quot;</span>);</span><br><span class=\"line\">              &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">                lock.unlock();</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            <span class=\"string\">&quot;B&quot;</span>)</span><br><span class=\"line\">        .start();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 第三个顾客，第三个线程---》由于受理业务的窗口只有一个(只能一个线程持有锁)，此时C只能等待，</span></span><br><span class=\"line\">    <span class=\"comment\">// 进入候客区</span></span><br><span class=\"line\">    <span class=\"keyword\">new</span> Thread(</span><br><span class=\"line\">            () -&gt; &#123;</span><br><span class=\"line\">              lock.lock();</span><br><span class=\"line\">              <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;-----C thread come in&quot;</span>);</span><br><span class=\"line\">              &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">                lock.unlock();</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            <span class=\"string\">&quot;C&quot;</span>)</span><br><span class=\"line\">        .start();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><strong>先来看看线程 A（客户 A）的执行流程</strong></p>\n</blockquote>\n<p>之前已经讲到过， <code>new ReentrantLock()</code>  不传参默认是非公平锁，调用 <code>lock.lock()</code>  方法最终都会执行 <code>NonfairSync</code>  重写后的 <code>lock()</code>  方法</p>\n<p>第一次执行    lock ()    方法</p>\n<p>由于第一次执行 <code>lock()</code>  方法， <code>state</code>  变量的值等于 0，表示 lock 锁没有被占用，此时执行 <code>compareAndSetState(0, 1)</code>  CAS 判断，可得 <code>state == expected == 0</code> ，因此 CAS 成功，将 state 的值修改为 1。</p>\n<p><img data-src=\"rel-9.png\" alt=\"\"></p>\n<p>再来复习下 CAS：通过 Unsafe 提供的 compareAndSwapXxx () 方法保证修改操作的原子性（通过 CPU 原语保证），如果变量的值等于期望值，则修改变量的值为 update，并返回 true；若不等，则返回 false。this 代表当前对象，stateOffset 表示 state 变量在该对象中的偏移量。</p>\n<p><img data-src=\"rel-10.png\" alt=\"\"></p>\n<p>再来看看  <code>setExclusiveOwnerThread()</code>  方法做了啥：将拥有 lock 锁的线程修改为线程 A。</p>\n<p><img data-src=\"rel-11.png\" alt=\"\"></p>\n<blockquote>\n<p><strong>再来看看线程 B（客户 B）的执行流程</strong></p>\n</blockquote>\n<p>第二次执行 lock () 方法</p>\n<p>由于第二次执行 <code>lock()</code>  方法， <code>state</code>  变量的值等于 1，表示 lock 锁没有被占用，此时执行  <code>compareAndSetState(0, 1)</code>  CAS 判断，可得 <code>state != expected</code> ，因此 CAS 失败，进入 <code>acquire()</code>  方法。</p>\n<p><img data-src=\"rel-9.png\" alt=\"\"></p>\n<p><code>acquire()</code>  方法主要包含如下几个方法，下面我们一个一个来查看。</p>\n<p><img data-src=\"rel-12.png\" alt=\"\"></p>\n<h4 id=\"tryacquirearg-方法的执行流程\"><a class=\"markdownIt-Anchor\" href=\"#tryacquirearg-方法的执行流程\">#</a> <strong> <code>tryAcquire(arg)</code>  方法的执行流程</strong></h4>\n<p>先来看看  <code>tryAcquire()</code>  方法，诶，怎么抛了个异常？别着急，仔细一看是  <code>AbstractQueuedSynchronizer</code>  抽象队列同步器中定义的方法，既然抛出了异常，就证明父类强制要求子类去实现。</p>\n<p>这里以非公平锁  <code>NonfairSync</code>  为例，在  <code>tryAcquire()</code>  方法中调用了  <code>nonfairTryAcquire()</code>  方法，注意，这里传入的参数都是 1。</p>\n<p><img data-src=\"rel-13.png\" alt=\"\"></p>\n<p><code>nonfairTryAcquire(acquires)</code>  正常的执行流程：</p>\n<p>在 <code>nonfairTryAcquire()</code>  方法中，大多数情况都是如下的执行流程：线程 B 执行 <code>int c = getState()</code>  时，获取到 state 变量的值为 1，表示 lock 锁正在被占用；于是执行 <code>if (c == 0) &#123;</code> 发现条件不成立，接着执行下一个判断条件 <code>else if (current ==getExclusiveOwnerThread()) &#123;</code> ，current 线程为线程 B，而  <code>getExclusiveOwnerThread()</code>  方法返回正在占用 lock 锁的线程，为线程 A，因此  <code>tryAcquire()</code>  方法最后会 <code>return false</code> ，表示并没有抢占到 lock 锁。</p>\n<p><img data-src=\"rel-14.png\" alt=\"\"></p>\n<p><strong>补充</strong>： <code>getExclusiveOwnerThread()</code>  方法返回正在占用 lock 锁的线程（排他锁，exclusive）。</p>\n<p><img data-src=\"rel-15.png\" alt=\"\"></p>\n<blockquote>\n<p><strong>nonfairTryAcquire (acquires) 比较特殊的执行流程：</strong></p>\n</blockquote>\n<p>第一种情况是，走到 <code>int c = getState()</code>  语句时，此时线程 A 恰好执行完成，让出了 lock 锁，那么 <code>state</code>  变量的值为 0，当然发生这种情况的概率很小，那么线程 B 执行 CAS 操作成功后，将占用 lock 锁的线程修改为自己，然后返回 true，表示抢占锁成功。其实这里还有一种情况，需要留到 <code>unlock()</code>  方法才能说清楚</p>\n<p>第二种情况为可重入锁的表现，假设 A 线程又再次抢占 lock 锁（当然示例代码里面并没有体现出来），这时 <code>current == getExclusiveOwnerThread()</code>  条件成立，将 <code>state</code>  变量的值加上 <code>acquire</code> ，这种情况下也应该 <code>return true</code> ，表示线程 A 正在占用 lock 锁。因此， <code>state</code>  变量的值是可以大于 1 的。<br>\n<img data-src=\"rel-14.png\" alt=\"\"></p>\n<blockquote>\n<p><strong>继续往下走，执行  <code>addWaiter(Node.EXCLUSIVE)</code>  方法</strong></p>\n</blockquote>\n<p>在  <code>tryAcquire()</code>  方法返回  <code>false</code>  之后，进行  <code>!</code>  操作后为  <code>true</code> ，那么会继续执行  <code>addWaiter()</code>  方法。</p>\n<p><img data-src=\"rel-12.png\" alt=\"\"></p>\n<p>来看看 addWaiter () 方法做了些啥？</p>\n<p>之前讲过 <code>Node</code>  节点用于封装用户线程，这里将当前正在执行的线程通过 <code>Node</code>  封装起来（当前线程正是抢占 lock 锁没有抢占到的线程）。</p>\n<p>判断 <code>tail</code>  尾指针是否为空，双端队列此时还没有元素呢～肯定为空呀，那么执行  <code>enq(node)</code>  方法，将封装了线程 B 的 <code>Node</code>  节点入队。</p>\n<p><img data-src=\"rel-16.png\" alt=\"\"></p>\n<p><strong>enq (node) 方法：构建双端同步队列</strong></p>\n<p>也许看到这里的代码有点蒙，需要有些前置知识，在双端同步队列中，第一个节点为虚节点（也叫哨兵节点），其实并不存储任何信息，只是占位。 真正的第一个有数据的节点，是从第二个节点开始的。</p>\n<p><img data-src=\"rel-17.png\" alt=\"\"></p>\n<p><strong>第一次执行 for 循环</strong>：现在解释起来就不费劲了，当线程 B 进来时，双端同步队列为空，此时肯定要先构建一个哨兵节点。此时 <code>tail == null</code> ，因此进入 <code>if(t == null) &#123;</code> 的分支，头指针指向哨兵节点，此时队列中只有一个节点，尾节点即是头结点，因此尾指针也指向该哨兵节点。<br>\n<img data-src=\"rel-18.png\" alt=\"\"></p>\n<p><strong>第二次执行 for 循环</strong>：现在该将装着线程 B 的节点放入双端同步队列中，此时 <code>tail</code>  指向了哨兵节点，并不等于 null，因此 <code>if (t == null)</code>  不成立，进入 else 分支。以尾插法的方式，先将 <code>node</code> （装着线程 B 的节点）的 <code>prev</code>  指向之前的 <code>tail</code> ，再将 <code>node</code>  设置为尾节点（执行 <code>compareAndSetTail(t, node)</code> ），最后将 <code>t.next</code>  指向 <code>node</code> ，最后执行 <code>return t</code>  结束 for 循环。</p>\n<p><strong>补充</strong>： <code>compareAndSetTail(t, node)</code>  方法的实现</p>\n<p><img data-src=\"rel-19.png\" alt=\"\"></p>\n<p><strong>注意</strong>：哨兵节点和  <code>nodeB</code>  节点的  <code>waitStatus</code>  均为 0，表示在等待队列中。</p>\n<p><strong> <code>acquireQueued()</code>  方法的执行</strong></p>\n<p>执行完  <code>addWaiter()</code>  方法之后，就该执行  <code>acquireQueued()</code>  方法了，这个方法有点东西，我们放到后面再去讲它</p>\n<p><img data-src=\"rel-12.png\" alt=\"\"></p>\n<blockquote>\n<p><strong>最后来看看线程 C（客户 C）的执行流程</strong></p>\n</blockquote>\n<p>线程 C 和线程 B 的执行流程很类似，都是执行  <code>acquire()</code>  中的方法。</p>\n<p><img data-src=\"rel-12.png\" alt=\"\"></p>\n<p>但是在  <code>addWaiter()</code>  方法中，执行流程有些区别。此时  <code>tail != null</code> ，因此在  <code>addWaiter()</code>  方法中就已经将  <code>nodeC</code>  添加至队尾了。</p>\n<p><img data-src=\"rel-16.png\" alt=\"\"></p>\n<p>执行完  <code>addWaiter()</code>  方法后，就已经将 nodeC 挂在了双端同步队列的队尾，不需要再执行  <code>enq(node)</code>  方法。</p>\n<p><img data-src=\"rel-20.png\" alt=\"\"></p>\n<blockquote>\n<p><strong>补前面的坑： <code>acquireQueued()</code>  方法的执行逻辑</strong></p>\n</blockquote>\n<p>先来看看看看  <code>acquireQueued()</code>  方法的源代码，其实这样直接看代码有点懵逼，我们接下来举例来理解。注意看：两个  <code>if</code>  判断中的代码都放在  <code>for( ; ; )</code>  中执行，这样可以实现自旋的操作。</p>\n<p><img data-src=\"rel-21.png\" alt=\"\"></p>\n<p><strong>线程 B 的执行流程</strong></p>\n<p>线程 B 执行 addWaiter () 方法之后，就进入了 acquireQueued () 方法中，此时传入的参数为封装了线程 B 的 nodeB 节点，nodeB 的前驱结点为哨兵节点，因此 final Node p = node.predecessor () 执行完后，p 将指向哨兵节点。哨兵节点满足 p == head，但是线程 B 执行 tryAcquire (arg) 方法尝试抢占 lock 锁时还是会失败，因此会执行下面 if 判断中的 shouldParkAfterFailedAcquire (p, node) 方法，该方法的代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">shouldParkAfterFailedAcquire</span><span class=\"params\">(Node pred, Node node)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> ws = pred.waitStatus;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ws == Node.SIGNAL)</span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">         * This node has already set status asking a release</span></span><br><span class=\"line\"><span class=\"comment\">         * to signal it, so it can safely park.</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ws &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">         * Predecessor was cancelled. Skip over predecessors and</span></span><br><span class=\"line\"><span class=\"comment\">         * indicate retry.</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">            node.prev = pred = pred.prev;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">while</span> (pred.waitStatus &gt; <span class=\"number\">0</span>);</span><br><span class=\"line\">        pred.next = node;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">         * waitStatus must be 0 or PROPAGATE.  Indicate that we</span></span><br><span class=\"line\"><span class=\"comment\">         * need a signal, but don&#x27;t park yet.  Caller will need to</span></span><br><span class=\"line\"><span class=\"comment\">         * retry to make sure it cannot acquire before parking.</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        compareAndSetWaitStatus(pred, ws, Node.SIGNAL);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>哨兵节点的  <code>waitStatus == 0</code> ，因此执行 CAS 操作将哨兵节点的  <code>waitStatus</code>  改为  <code>Node.SIGNAL(-1)</code> 。</p>\n<p><img data-src=\"rel-22.png\" alt=\"\"></p>\n<p>注意： <code>compareAndSetWaitStatus(pred, ws, Node.SIGNAL)</code>  调用  <code>unsafe.compareAndSwapInt(node, waitStatusOffset, expect, update);</code>  实现，虽然 <code>compareAndSwapInt()</code>  方法内无自旋，但是在 <code>acquireQueued()</code>  方法中的 <code>for( ; ; )</code>  能保证此自选操作成功（另一种情况就是线程 B 抢占到 lock 锁）。</p>\n<p><img data-src=\"rel-23.png\" alt=\"\"></p>\n<p>执行完上述操作，将哨兵节点的  <code>waitStatus</code>  设置为了 -1。</p>\n<p><img data-src=\"rel-24.png\" alt=\"\"></p>\n<p>执行完毕将退出  <code>if</code>  判断，又会重新进入  <code>for( ; ; )</code>  循环，此时执行  <code>shouldParkAfterFailedAcquire(p, node)</code>  方法时会返回  <code>true</code> ，因此此时会接着执行  <code>parkAndCheckInterrupt()</code>  方法。</p>\n<p><img data-src=\"rel-21.png\" alt=\"\"></p>\n<p>线程 B 调用  <code>park()</code>  方法后被挂起，程序不会然续向下执行，程序就在这儿排队等待。</p>\n<p><img data-src=\"rel-25.png\" alt=\"\"></p>\n<p><strong>线程 C 的执行流程</strong></p>\n<p>线程 C 最终也会执行到  <code>LockSupport.park(this);</code>  处，然后被挂起，进入等待区</p>\n<p><strong>总结：</strong></p>\n<p>如果前驱节点的 <code>waitstatus</code>  是 <code>SIGNAL 状态（-1）</code> ，即  <code>shouldParkAfterFailedAcquire() </code> 方法会返回  <code>true</code> ，程序会继续向下执行  <code>parkAndCheckInterrupt()</code>  方法，用于将当前线程挂起。</p>\n<p>根据 <code>park()</code>  方法 API 描述，程序在下面三种情况会继续向下执行：</p>\n<ol>\n<li>\n<p>被 <code>unpark</code></p>\n</li>\n<li>\n<p>被中断（interrupt）</p>\n</li>\n<li>\n<p>其他不合逻辑的返回才会然续向下执行</p>\n<p>因上述三种情况程序执行至此，返回当前线程的中断状态，并清空中断状态。如果程序由于被中断，该方法会返回 true。</p>\n</li>\n</ol>\n<h4 id=\"可总算要-unlock-了\"><a class=\"markdownIt-Anchor\" href=\"#可总算要-unlock-了\">#</a> 可总算要 unlock () 了</h4>\n<blockquote>\n<p><strong>线程 A 执行  <code>unlock()</code>  方法</strong></p>\n</blockquote>\n<p>A 线程终于要  <code>unlock()</code>  了吗？真不容易啊！</p>\n<p><img data-src=\"rel-26.png\" alt=\"\"></p>\n<p><code>unlock()</code>  方法调用了  <code>sync.release(1)</code>  方法。</p>\n<p><img data-src=\"rel-27.png\" alt=\"\"></p>\n<p><strong>release () 方法的执行流程</strong></p>\n<p>其实主要就是看看 <code>tryRelease(arg)</code>  方法和 <code>unparkSuccessor(h)</code>  方法的执行流程，这里先大概说一下，能有个印象：线程 A 即将让出 lock 锁，因此 <code>tryRelease()</code>  执行后将返回 true，表示礼让成功，head 指针指向哨兵节点，并且 if 条件满足，可执行  <code>unparkSuccessor(h)</code>  方法。</p>\n<p><img data-src=\"rel-28.png\" alt=\"\"></p>\n<p><strong> <code>tryRelease(arg)</code>  方法的执行逻辑</strong></p>\n<p>线程 A 只加锁过一次，因此  <code>state</code>  的值为 1，参数  <code>release</code>  的值也为 1，因此  <code>c == 0</code> 。将  <code>free</code>  设置为  <code>true</code> ，表示当前 lock 锁已被释放，将排他锁占有的线程设置为  <code>null</code> ，表示没有任何线程占用 lock 锁。</p>\n<p><img data-src=\"rel-29.png\" alt=\"\"></p>\n<p><strong>unparkSuccessor (h) 方法的执行逻辑</strong></p>\n<p>在 release () 方法中获取到的头结点 h 为哨兵节点，h.waitStatus == -1，因此执行 CAS 操作将哨兵节点的 waitStatus 设置为 0，并将哨兵节点的下一个节点（s = node.next = nodeB）获取出来，并唤醒 nodeB 中封装的线程（if (s == null || s.waitStatus&gt; 0) 不成立，只有 if (s != null) 成立）。</p>\n<p><img data-src=\"rel-30.png\" alt=\"\"></p>\n<p>执行完上述操作后，当前占用 lock 锁的线程为  <code>null</code> ，哨兵节点的  <code>waitStatus</code>  设置为 0， <code>state</code>  的值为 0（表示当前没有任何线程占用 lock 锁）。</p>\n<p><img data-src=\"rel-31.png\" alt=\"\"></p>\n<p><strong>杀个回马枪：继续来看 B 线程被唤醒之后的执行逻辑</strong></p>\n<p>再次回到 lock () 方法的执行流程中来，线程 B 被 unpark () 之后将不再阻塞，继续执行下面的程序，线程 B 正常被唤醒，因此 <code>Thread.interrupted()</code>  的值为 false，表示线程 B 未被中断。</p>\n<p><img data-src=\"rel-25.png\" alt=\"\"></p>\n<p>回到上一层方法中，此时 lock 锁未被占用，线程 B 执行  <code>tryAcquire(arg)</code>  方法能够抢到 lock 锁，并且将  <code>state</code>  变量的值设置为 1，表示该 lock 锁已经被占用。</p>\n<p><img data-src=\"rel-21.png\" alt=\"\"></p>\n<p>接着来研究下  <code>setHead(node)</code>  方法：传入的节点为  <code>nodeB</code> ，头指针指向  <code>nodeB</code>  节点；将  <code>nodeB</code>  中封装的线程置为  <code>null</code> （因为已经获得锁了）； <code>nodeB</code>  不再指向其前驱节点（哨兵节点）。这一切都是为了将  <code>nodeB</code>  作为新的哨兵节点。</p>\n<p><img data-src=\"rel-32.png\" alt=\"\"></p>\n<p>执行完  <code>setHead(node)</code>  方法的状态如下图所示。</p>\n<p><img data-src=\"rel-33.png\" alt=\"\"></p>\n<p>将  <code>p.next</code>  设置为  <code>null</code> ，这是原来的哨兵节点就是完全孤立的一个节点，此时  <code>nodeB</code>  作为新的哨兵节点</p>\n<p><img data-src=\"rel-34.png\" alt=\"\"></p>\n<p>线程 C 也是类似的执行流程。</p>\n<h3 id=\"aqs-总结\"><a class=\"markdownIt-Anchor\" href=\"#aqs-总结\">#</a> AQS 总结</h3>\n<h4 id=\"aqs-的考点\"><a class=\"markdownIt-Anchor\" href=\"#aqs-的考点\">#</a> AQS 的考点</h4>\n<p>第一个考点：我相信你应该看过源码了，那么 AQS 里面有个变量叫 State，它的值有几种？</p>\n<p>答：3 个状态：没占用是 0，占用了是 1，大于 1 是可重入锁</p>\n<p>第二个考点：如果锁正在被占用，AB 两个线程进来了以后，请问这个总共有多少个 Node 节点？</p>\n<p>答：答案是 3 个，分别是哨兵节点、nodeA、nodeB</p>\n<h4 id=\"aqs-源码解读案例图示\"><a class=\"markdownIt-Anchor\" href=\"#aqs-源码解读案例图示\">#</a> AQS 源码解读案例图示</h4>\n<p><img data-src=\"rel-35.png\" alt=\"\"></p>\n","site":{"data":{"languages":{"zh-CN":{"post":{"copyright":{"author":"本文博主"}}},"en":{"menu":{"travellings":"Travellings"}}}}},"length":19355,"excerpt":"","more":"<h1 id=\"java并发笔记\"><a class=\"markdownIt-Anchor\" href=\"#java并发笔记\">#</a> Java 并发笔记</h1>\n<h2 id=\"可重入锁\"><a class=\"markdownIt-Anchor\" href=\"#可重入锁\">#</a> 可重入锁</h2>\n<h3 id=\"可重入锁是什么\"><a class=\"markdownIt-Anchor\" href=\"#可重入锁是什么\">#</a> 可重入锁是什么？</h3>\n<p>顾名思义，就是支持重入的锁，它表示该锁能够支持一个线程对资源的重复加锁。除此之外，该锁还支持获取锁的公平与非公平性选择。</p>\n<h3 id=\"可重入锁的代码示例-synchronized\"><a class=\"markdownIt-Anchor\" href=\"#可重入锁的代码示例-synchronized\">#</a> 可重入锁的代码示例 - synchronized</h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/** 证明synchronized是可重入锁 */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SynchronizedDemo</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">static</span> Object objectLockA = <span class=\"keyword\">new</span> Object();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">m1</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">synchronized</span> (objectLockA) &#123;</span><br><span class=\"line\">      System.out.println(Thread.currentThread().getName() + <span class=\"string\">&quot;\\t-----外层调用&quot;</span>);</span><br><span class=\"line\">      <span class=\"keyword\">synchronized</span> (objectLockA) &#123;</span><br><span class=\"line\">        System.out.println(Thread.currentThread().getName() + <span class=\"string\">&quot;\\t-----中层调用&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">synchronized</span> (objectLockA) &#123;</span><br><span class=\"line\">          System.out.println(Thread.currentThread().getName() + <span class=\"string\">&quot;\\t-----内层调用&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    m1();</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"可重入锁的代码示例-reenterantlock\"><a class=\"markdownIt-Anchor\" href=\"#可重入锁的代码示例-reenterantlock\">#</a> 可重入锁的代码示例 - ReenterantLock</h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/** ReenterantLock也是可重入锁，加锁几次就要释放锁几次 */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ReenterantLockDemo</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Lock lockA = <span class=\"keyword\">new</span> ReentrantLock();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">new</span> Thread(</span><br><span class=\"line\">            () -&gt; &#123;</span><br><span class=\"line\">              lockA.lock();</span><br><span class=\"line\">              <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                System.out.println(Thread.currentThread().getName() + <span class=\"string\">&quot;\\t ----外层&quot;</span>);</span><br><span class=\"line\">                lockA.lock();</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                  System.out.println(Thread.currentThread().getName() + <span class=\"string\">&quot;\\t ----内层&quot;</span>);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">                  lockA.unlock();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">              &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">                lockA.unlock();</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            <span class=\"string\">&quot;t1&quot;</span>)</span><br><span class=\"line\">        .start();</span><br><span class=\"line\">    <span class=\"keyword\">new</span> Thread(</span><br><span class=\"line\">            () -&gt; &#123;</span><br><span class=\"line\">              lockA.lock();</span><br><span class=\"line\">              <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                System.out.println(Thread.currentThread().getName() + <span class=\"string\">&quot;\\t ----第二个线程获取锁&quot;</span>);</span><br><span class=\"line\">              &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">                lockA.unlock();</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            <span class=\"string\">&quot;t2&quot;</span>)</span><br><span class=\"line\">        .start();</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"公平与非公平获取锁的区别是什么\"><a class=\"markdownIt-Anchor\" href=\"#公平与非公平获取锁的区别是什么\">#</a> 公平与非公平获取锁的区别是什么？</h3>\n<p>如果一个锁是公平的，那么锁的获取顺序就应该符合请求的绝对时间顺序，也就是<strong> FIFO</strong>。</p>\n<p>对于非公平的锁，只要 CAS 设置同步状态成功，则表示当前线程获取了锁。</p>\n<h4 id=\"产生结果\"><a class=\"markdownIt-Anchor\" href=\"#产生结果\">#</a> 产生结果</h4>\n<p>公平的锁每次都是同步队列中的第一个节点获取到锁，非公平的锁会出现一个线程连续获取锁的现象。</p>\n<p>为什么会出现线程连续获取锁的情况呢？当一个线程请求锁时，只要获取了同步状态即成功获取锁。在这个前提下，刚释放锁的线程再次获取同步状态的概率非常大，使得其他线程只能在同步队列中等待。</p>\n<p>非公平的锁可能导致 <strong>线程饥饿</strong> ，为什么它又被设置成默认的实现呢？如果把每次不同的线程获取到锁视为一次切换，公平性的锁每次都进行切换，非公平的锁出现切换的概率大大降低，这说明非公平锁的开销非常小。引用自 <strong>Java 并发编程艺术</strong> 一书的表 5-7 的例子显示，在 ubuntu server 14.04 i5-3470 8GB，10 个线程，每个线程获取 100000 次锁的场景中，公平锁与非公平锁相比，总耗时是其 93.4 倍，总切换次数是其 133 倍。这可以说明：公平性的锁保证了锁的获取按照 FIFO 原则，而代价是进行大量的线程切换。非公平性锁虽然可能造成 <strong>线程饥饿</strong>，但极少的线程切换，保证了更大的吞吐量。</p>\n<h2 id=\"locksupport\"><a class=\"markdownIt-Anchor\" href=\"#locksupport\">#</a> LockSupport</h2>\n<h3 id=\"locksupport-是什么\"><a class=\"markdownIt-Anchor\" href=\"#locksupport-是什么\">#</a> LockSupport 是什么？</h3>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYXBpcmVmLmNvbS9qYXZhMTEtemgvamF2YS5iYXNlL2phdmEvdXRpbC9jb25jdXJyZW50L2xvY2tzL0xvY2tTdXBwb3J0Lmh0bWw=\">官方中文文档</span></p>\n<h4 id=\"api介绍\"><a class=\"markdownIt-Anchor\" href=\"#api介绍\">#</a> api 介绍</h4>\n<p>用于创建锁和其他同步类的基本线程阻塞原语。</p>\n<p><strong>该类与使用它的每个线程关联一个 Permit（许可证）（在<a href=\"https://www.apiref.com/java11-zh/java.base/java/util/concurrent/Semaphore.html\"> <code>Semaphore</code> </a> 类的意义上）。</strong> 如果许可证可用，将立即返回 <code>park</code>  ，并在此过程中消费；否则<em>可能会</em>阻止。 如果尚未提供许可，则致电 <code>unpark</code>  获得许可。 **（与 Semaphores 不同，许可证不会累积。最多只有一个。）** 可靠的使用需要使用 volatile（或原子）变量来控制何时停放或取消停放。 对于易失性变量访问保持对这些方法的调用的顺序，但不一定是非易失性变量访问。</p>\n<p>方法 <code>park</code>  和 <code>unpark</code>  提供了阻止和解除阻塞线程的有效方法，这些线程没有遇到导致不推荐使用的方法 <code>Thread.suspend</code>  和 <code>Thread.resume</code>  无法用于此类目的的问题：一个线程调用 <code>park</code>  和另一个线程尝试 <code>unpark</code>  将保留活跃性，由于许可证。 此外，如果调用者的线程被中断，则会返回 <code>park</code>  ，并且支持超时版本。  <code>park</code>  方法也可以在任何其他时间返回，“无理由”，因此通常必须在返回时重新检查条件的循环内调用。 在这个意义上，  <code>park</code>  可以作为 “忙碌等待” 的优化，不会浪费太多时间旋转，但必须与 <code>unpark</code>  配对才能生效。</p>\n<p>三种形式的 <code>park</code>  每个也支持 <code>blocker</code>  对象参数。 在线程被阻塞时记录此对象，以允许监视和诊断工具识别线程被阻止的原因。 （此类工具可以使用方法<a href=\"https://www.apiref.com/java11-zh/java.base/java/util/concurrent/locks/LockSupport.html#getBlocker(java.lang.Thread)\"> <code>getBlocker(Thread)</code> </a> 访问<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYXBpcmVmLmNvbS9qYXZhMTEtemgvamF2YS5iYXNlL2phdmEvdXRpbC9jb25jdXJyZW50L2xvY2tzL0xvY2tTdXBwb3J0Lmh0bWwjZ2V0QmxvY2tlcihqYXZhLmxhbmcuVGhyZWFkKQ==\">阻止程序</span> 。）强烈建议使用这些表单而不是没有此参数的原始表单。 在锁实现中作为 <code>blocker</code>  提供的正常参数是 <code>this</code>  。</p>\n<p>这些方法旨在用作创建更高级别同步实用程序的工具，并且对于大多数并发控制应用程序本身并不有用。  <code>park</code>  方法仅用于以下形式的构造：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">while (!canProceed()) &#123; // ensure request to unpark is visible to other threads ... LockSupport.park(this); &#125; </span><br></pre></td></tr></table></figure>\n<p>在调用 <code>park</code>  之前，线程没有发布请求 <code>park</code>  需要锁定或阻塞。 因为每个线程只有一个许可证，所以任何中间使用 <code>park</code>  ，包括隐式地通过类加载，都可能导致无响应的线程（“丢失 unpark”）。</p>\n<h4 id=\"总结\"><a class=\"markdownIt-Anchor\" href=\"#总结\">#</a> 总结</h4>\n<p>LockSupport 中的 <code>park()</code>  和 <code>unpark()</code>  的作用分别是阻塞线程和解除阻塞线程，可以将其看作是线程等待唤醒机制 (wait/notify) 的改进版。</p>\n<p>LockSupport 使用 Permit（许可证）的概念来达到阻塞和唤醒线程的功能，每个线程都有一个许可 (Permit)，Permit 只有两个值 1 和 0，默认是 0。</p>\n<p>Permit 可以看做成一个 Semaphore，但与 Semaphore 不同，Permit 累加上限只有 1。</p>\n<h3 id=\"三种实现线程等待唤醒的方法\"><a class=\"markdownIt-Anchor\" href=\"#三种实现线程等待唤醒的方法\">#</a> 三种实现线程等待唤醒的方法</h3>\n<ol>\n<li>\n<p>使用 Object 中的 <code>wait()</code>  方法让线程等待，使用 Object 中的 <code>notify()</code>  方法唤醒线程</p>\n<p>注意条件</p>\n<ol>\n<li>wait 和 notify 方法必须要在 synchronized 同步块或者方法里面且成对出现使用</li>\n<li>先 wait 后 notify 才能成功唤醒线程</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> Object objectLock = <span class=\"keyword\">new</span> Object();</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">synchronizedWaitNotify</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">new</span> Thread(</span><br><span class=\"line\">          () -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">synchronized</span> (objectLock) &#123;</span><br><span class=\"line\">              System.out.println(Thread.currentThread().getName() + <span class=\"string\">&quot;\\t&quot;</span> + <span class=\"string\">&quot;------come in&quot;</span>);</span><br><span class=\"line\">              <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                objectLock.wait(); <span class=\"comment\">// 等待</span></span><br><span class=\"line\">              &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">              System.out.println(Thread.currentThread().getName() + <span class=\"string\">&quot;\\t&quot;</span> + <span class=\"string\">&quot;------被唤醒&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">          <span class=\"string\">&quot;A&quot;</span>)</span><br><span class=\"line\">      .start();</span><br><span class=\"line\">   </span><br><span class=\"line\">  <span class=\"keyword\">new</span> Thread(</span><br><span class=\"line\">          () -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">synchronized</span> (objectLock) &#123;</span><br><span class=\"line\">              objectLock.notify(); <span class=\"comment\">// 唤醒</span></span><br><span class=\"line\">              System.out.println(Thread.currentThread().getName() + <span class=\"string\">&quot;\\t&quot;</span> + <span class=\"string\">&quot;------通知&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">          <span class=\"string\">&quot;B&quot;</span>)</span><br><span class=\"line\">      .start();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img data-src=\"locksupport%E4%BB%A3%E7%A0%81%E7%BB%93%E6%9E%9C1.png\" alt=\"img\"></p>\n</li>\n<li>\n<p>使用 JUC 包中的 Condition 的 <code>await()</code>  方法让线程等待，使用 Condition 的 <code>signal()</code>  方法唤醒线程</p>\n<p>注意条件</p>\n<ol>\n<li>线程先要获得并持有锁，必须在锁块（synchronized 或 lock）中</li>\n<li>必须要先等待后唤醒，线程才能够被唤醒</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> Lock lock = <span class=\"keyword\">new</span> ReentrantLock();</span><br><span class=\"line\"><span class=\"keyword\">static</span> Condition condition = lock.newCondition();</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">lockAwaitSignal</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">new</span> Thread(</span><br><span class=\"line\">          () -&gt; &#123;</span><br><span class=\"line\">            lock.lock();</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">              System.out.println(Thread.currentThread().getName() + <span class=\"string\">&quot;\\t&quot;</span> + <span class=\"string\">&quot;------come in&quot;</span>);</span><br><span class=\"line\">              <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                condition.await();</span><br><span class=\"line\">              &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">              System.out.println(Thread.currentThread().getName() + <span class=\"string\">&quot;\\t&quot;</span> + <span class=\"string\">&quot;------被唤醒&quot;</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">              lock.unlock();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">          <span class=\"string\">&quot;A&quot;</span>)</span><br><span class=\"line\">      .start();</span><br><span class=\"line\">   </span><br><span class=\"line\">  <span class=\"keyword\">new</span> Thread(</span><br><span class=\"line\">          () -&gt; &#123;</span><br><span class=\"line\">            lock.lock();</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">              condition.signal();</span><br><span class=\"line\">              System.out.println(Thread.currentThread().getName() + <span class=\"string\">&quot;\\t&quot;</span> + <span class=\"string\">&quot;------通知&quot;</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">              lock.unlock();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">          <span class=\"string\">&quot;B&quot;</span>)</span><br><span class=\"line\">      .start();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img data-src=\"locksupport%E4%BB%A3%E7%A0%81%E7%BB%93%E6%9E%9C2.png\" alt=\"img\"></p>\n</li>\n<li>\n<p>使用 LockSupport 类阻塞当前线程以及唤醒指定的被阻塞线程</p>\n</li>\n</ol>\n<h3 id=\"locksupport-的主要方法\"><a class=\"markdownIt-Anchor\" href=\"#locksupport-的主要方法\">#</a> LockSupport 的主要方法</h3>\n<h4 id=\"阻塞\"><a class=\"markdownIt-Anchor\" href=\"#阻塞\">#</a> 阻塞</h4>\n<p><code>park()/park(Object blocker)</code></p>\n<p>作用：阻塞当前线程 / 阻塞传入的具体线程</p>\n<p>permit 默认是 0，所以一开始调用 <code>park()</code>  方法，当前线程就会阻塞，直到别的线程将当前线程的 permit 设置为 1 时， <code>park() </code> 方法会被唤醒，然后会将 permit 再次设置为 0 并返回。</p>\n<h5 id=\"park-方法通过-unsafe-类实现\"><a class=\"markdownIt-Anchor\" href=\"#park-方法通过-unsafe-类实现\">#</a> park () 方法通过 Unsafe 类实现</h5>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Disables the current thread for thread scheduling purposes unless the permit is available.</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">park</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    UNSAFE.park(<span class=\"keyword\">false</span>, <span class=\"number\">0L</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"唤醒\"><a class=\"markdownIt-Anchor\" href=\"#唤醒\">#</a> 唤醒</h4>\n<p><code>unpark(Thread thread)</code></p>\n<p>作用：唤醒处于阻断状态的指定线程</p>\n<p>调用 <code>unpark(thread)</code>  方法后，就会将 thread 线程的许可 permit 设置成 1（注意多次调用  <code>unpark()</code>  方法，不会累加，permit 值还是 1），这会自动唤醒 thread 线程，即之前阻塞中的 <code>LockSupport.park()</code>  方法会立即返回。</p>\n<h5 id=\"unpark-方法通过-unsafe-类实现\"><a class=\"markdownIt-Anchor\" href=\"#unpark-方法通过-unsafe-类实现\">#</a> unpark () 方法通过 Unsafe 类实现</h5>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Makes available the permit for the given thread</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">unpark</span><span class=\"params\">(Thread thread)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (thread != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">        UNSAFE.unpark(thread);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"locksupport代码示例\"><a class=\"markdownIt-Anchor\" href=\"#locksupport代码示例\">#</a> LockSupport 代码示例</h3>\n<h4 id=\"正常使用-locksupport\"><a class=\"markdownIt-Anchor\" href=\"#正常使用-locksupport\">#</a> 正常使用 LockSupport</h4>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">lockSupportParkUnpark</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    Thread a =</span><br><span class=\"line\">        <span class=\"keyword\">new</span> Thread(</span><br><span class=\"line\">            () -&gt; &#123;</span><br><span class=\"line\">              System.out.println(Thread.currentThread().getName() + <span class=\"string\">&quot;\\t&quot;</span> + <span class=\"string\">&quot;------come in&quot;</span>);</span><br><span class=\"line\">              LockSupport.park(); <span class=\"comment\">// 线程 A 阻塞</span></span><br><span class=\"line\">              System.out.println(Thread.currentThread().getName() + <span class=\"string\">&quot;\\t&quot;</span> + <span class=\"string\">&quot;------被唤醒&quot;</span>);</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            <span class=\"string\">&quot;A&quot;</span>);</span><br><span class=\"line\">    a.start();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">new</span> Thread(</span><br><span class=\"line\">            () -&gt; &#123;</span><br><span class=\"line\">              LockSupport.unpark(a); <span class=\"comment\">// B 线程唤醒线程 A</span></span><br><span class=\"line\">              System.out.println(Thread.currentThread().getName() + <span class=\"string\">&quot;\\t&quot;</span> + <span class=\"string\">&quot;------通知&quot;</span>);</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            <span class=\"string\">&quot;B&quot;</span>)</span><br><span class=\"line\">        .start();</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p>程序运行结果：A 线程先执行 <code>LockSupport.park()</code>  方法将通行证（permit）设置为 0， permit 初始值本来就为 0，然后 B 线程执行  <code>LockSupport.unpark(a) </code> 方法将 permit 设置为 1，此时 A 线程可以通行</p>\n<p><img data-src=\"locksupport%E4%BB%A3%E7%A0%81%E7%BB%93%E6%9E%9C3.png\" alt=\"img\"></p>\n<h4 id=\"先-unpark-后-park\"><a class=\"markdownIt-Anchor\" href=\"#先-unpark-后-park\">#</a> 先 unpark () 后 park ()</h4>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">lockSupportUnparkPark</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  Thread a =</span><br><span class=\"line\">      <span class=\"keyword\">new</span> Thread(</span><br><span class=\"line\">          () -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">              TimeUnit.SECONDS.sleep(<span class=\"number\">3L</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">              e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            System.out.println(</span><br><span class=\"line\">                Thread.currentThread().getName()</span><br><span class=\"line\">                    + <span class=\"string\">&quot;\\t&quot;</span></span><br><span class=\"line\">                    + <span class=\"string\">&quot;------come in&quot;</span></span><br><span class=\"line\">                    + System.currentTimeMillis());</span><br><span class=\"line\">            LockSupport.park();</span><br><span class=\"line\">            System.out.println(</span><br><span class=\"line\">                Thread.currentThread().getName()</span><br><span class=\"line\">                    + <span class=\"string\">&quot;\\t&quot;</span></span><br><span class=\"line\">                    + <span class=\"string\">&quot;------被唤醒&quot;</span></span><br><span class=\"line\">                    + System.currentTimeMillis());</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">          <span class=\"string\">&quot;A&quot;</span>);</span><br><span class=\"line\">  a.start();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">new</span> Thread(</span><br><span class=\"line\">          () -&gt; &#123;</span><br><span class=\"line\">            LockSupport.unpark(a);</span><br><span class=\"line\">            System.out.println(Thread.currentThread().getName() + <span class=\"string\">&quot;\\t&quot;</span> + <span class=\"string\">&quot;------通知&quot;</span>);</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">          <span class=\"string\">&quot;B&quot;</span>)</span><br><span class=\"line\">      .start();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>程序运行结果：因为引入了通行证的概念，所以先执行 <code>unpark()</code>  其实并不会有什么影响，从程序运行时间戳可以看出，B 线程先放行通行证之后，A 线程执行  <code>LockSupport.park()</code>  时并没有被阻塞，相当于没有执行。</p>\n<p><img data-src=\"locksupport%E4%BB%A3%E7%A0%81%E7%BB%93%E6%9E%9C4.png\" alt=\"img\"></p>\n<h4 id=\"异常情况没有考虑到-permit-上限值为-1\"><a class=\"markdownIt-Anchor\" href=\"#异常情况没有考虑到-permit-上限值为-1\">#</a> 异常情况：没有考虑到 permit 上限值为 1</h4>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">lockSupport2Park1Unpark</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  Thread a =</span><br><span class=\"line\">      <span class=\"keyword\">new</span> Thread(</span><br><span class=\"line\">          () -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">              TimeUnit.SECONDS.sleep(<span class=\"number\">3L</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">              e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            System.out.println(</span><br><span class=\"line\">                Thread.currentThread().getName()</span><br><span class=\"line\">                    + <span class=\"string\">&quot;\\t&quot;</span></span><br><span class=\"line\">                    + <span class=\"string\">&quot;------come in&quot;</span></span><br><span class=\"line\">                    + System.currentTimeMillis());</span><br><span class=\"line\">            LockSupport.park();</span><br><span class=\"line\">            LockSupport.park();</span><br><span class=\"line\">            System.out.println(</span><br><span class=\"line\">                Thread.currentThread().getName()</span><br><span class=\"line\">                    + <span class=\"string\">&quot;\\t&quot;</span></span><br><span class=\"line\">                    + <span class=\"string\">&quot;------被唤醒&quot;</span></span><br><span class=\"line\">                    + System.currentTimeMillis());</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">          <span class=\"string\">&quot;A&quot;</span>);</span><br><span class=\"line\">  a.start();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">new</span> Thread(</span><br><span class=\"line\">          () -&gt; &#123;</span><br><span class=\"line\">            LockSupport.unpark(a);</span><br><span class=\"line\">            LockSupport.unpark(a);</span><br><span class=\"line\">            System.out.println(Thread.currentThread().getName() + <span class=\"string\">&quot;\\t&quot;</span> + <span class=\"string\">&quot;------通知&quot;</span>);</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">          <span class=\"string\">&quot;B&quot;</span>)</span><br><span class=\"line\">      .start();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>程序运行结果：由于 permit 的上限值为 1，所以执行两次  <code>LockSupport.park()</code>  操作将导致 A 线程阻塞</p>\n<p><img data-src=\"locksupport%E4%BB%A3%E7%A0%81%E7%BB%93%E6%9E%9C5.png\" alt=\"img\"></p>\n<h3 id=\"locksupport-重点说明\"><a class=\"markdownIt-Anchor\" href=\"#locksupport-重点说明\">#</a> LockSupport 重点说明</h3>\n<blockquote>\n<p><strong>LockSupport 是用来创建锁和其他同步类的基本线程阻塞原语</strong></p>\n</blockquote>\n<p>LockSupport 是一个线程阻塞工具类，所有的方法都是静态方法，可以让线程在任意位置阻塞，阻塞之后也有对应的唤醒方法。归根结底，LockSupport 调用的 Unsafe 中的 native 代码。</p>\n<blockquote>\n<p><strong>LockSupport 提供 park () 和 unpark () 方法实现阻塞线程和解除线程阻塞的过程</strong></p>\n</blockquote>\n<p>LockSupport 和每个使用它的线程都有一个许可 (permit) 关联。permit 相当于 1，0 的开关，默认是 0，调用一次 unpark 就加 1 变成 1，调用一次 park 会消费 permit，也就是将 1 变成 0，同时 park 立即返回。</p>\n<p>如再次调用 park 会变成阻塞 (因为 permit 为零了会阻塞在这里，一直到 permit 变为 1)，这时调用 unpark 会把 permit 置为 1。</p>\n<p>每个线程都有一个相关的 permit，permit 最多只有一个，重复调用 unpark 也不会积累凭证。</p>\n<blockquote>\n<p><strong>形象的理解</strong></p>\n</blockquote>\n<p>线程阻塞需要消耗凭证 (permit)，这个凭证最多只有 1 个。</p>\n<ol>\n<li>当调用 park 方法时\n<ol>\n<li>如果有凭证，则会直接消耗掉这个凭证然后正常退出；</li>\n<li>如果无凭证，就必须阻塞等待凭证可用；</li>\n</ol>\n</li>\n<li>而 unpark 则相反，它会增加一个凭证，但凭证最多只能有 1 个，累加无效。</li>\n</ol>\n<h3 id=\"locksupport-面试题\"><a class=\"markdownIt-Anchor\" href=\"#locksupport-面试题\">#</a> LockSupport 面试题</h3>\n<blockquote>\n<p><strong>为什么可以先唤醒线程后阻塞线程？</strong></p>\n</blockquote>\n<p>因为 unpark 获得了一个凭证，之后再调用 park 方法，就可以名正言顺的凭证消费，故不会阻塞。</p>\n<blockquote>\n<p><strong>为什么唤醒两次后阻塞两次，但最终结果还会阻塞线程？</strong></p>\n</blockquote>\n<p>因为凭证的数量最多为 1，连续调用两次 unpark 和调用一次 unpark 效果一样，只会增加一个凭证；而调用两次 park 却需要消费两个凭证，证不够，不能放行。</p>\n<h2 id=\"aqs初探\"><a class=\"markdownIt-Anchor\" href=\"#aqs初探\">#</a> AQS 初探</h2>\n<h3 id=\"aqs-是什么\"><a class=\"markdownIt-Anchor\" href=\"#aqs-是什么\">#</a> AQS 是什么？</h3>\n<p>AQS（AbstractQueuedSynchronizer）：抽象的队列同步器</p>\n<p>一般我们说的 AQS 指的是 <code> java.util.concurrent.locks</code>  包下的 <code>AbstractQueuedSynchronizer</code> ，但其实还有另外三种抽象队列同步器： <code>AbstractOwnableSynchronizer</code> 、 <code>AbstractQueuedLongSynchronizer </code> 和  <code>AbstractQueuedSynchronizer</code> 。</p>\n<h3 id=\"aqs-是-juc-的基石\"><a class=\"markdownIt-Anchor\" href=\"#aqs-是-juc-的基石\">#</a> AQS 是 JUC 的基石</h3>\n<p><img data-src=\"aqs-1.png\" alt=\"\"></p>\n<p><strong>举几个常见的例子</strong></p>\n<ol>\n<li>\n<p>ReentrantLock</p>\n<p><img data-src=\"aqs-2.png\" alt=\"\"></p>\n</li>\n<li>\n<p>CountDownLatch</p>\n<p><img data-src=\"aqs-3.png\" alt=\"\"></p>\n</li>\n<li>\n<p>ReentrantReadWriteLock</p>\n<p><img data-src=\"aqs-4.png\" alt=\"\"></p>\n</li>\n<li>\n<p>Semaphore</p>\n<p><img data-src=\"aqs-5.png\" alt=\"\"></p>\n</li>\n</ol>\n<blockquote>\n<p><strong>进一步理解锁和同步器的关系</strong></p>\n</blockquote>\n<p>锁 -&gt; 面向锁的使用者。定义了程序员和锁交互的使用层 API，隐藏了实现细节，你调用即可，可以理解为用户层面的 API。</p>\n<p>同步器 -&gt; 面向锁的实现者。比如 Java 并发大神 Douglee，提出统一规范并简化了锁的实现，屏蔽了同步状态管理、阻塞线程排队和通知、唤醒机制等，Java 中有那么多的锁，就能简化锁的实现啦。</p>\n<h3 id=\"aqs-能干嘛\"><a class=\"markdownIt-Anchor\" href=\"#aqs-能干嘛\">#</a> AQS 能干嘛</h3>\n<blockquote>\n<p><strong>AQS：加锁会导致阻塞</strong></p>\n</blockquote>\n<p>有阻塞就需要排队，实现排队必然需要有某种形式的队列来进行管理。</p>\n<p>抢到资源的线程直接使用办理业务，抢占不到资源的线程的必然涉及一种排队等候机制，抢占资源失败的线程继续去等待（类似办理窗口都满了，暂时没有受理窗口的顾客只能去候客区排队等候），仍然保留获取锁的可能且获取锁流程仍在继续（候客区的顾客也在等着叫号，轮到了再去受理窗口办理业务）。</p>\n<p>既然说到了排队等候机制，那么就一定 会有某种队列形成，这样的队列是什么数据结构呢？如果共享资源被占用，就需要一定的阻塞等待唤醒机制来保证锁分配。这个机制主要用的是 CLH 队列的变体实现的，将暂时获取不到锁的线程加入到队列中，这个队列就是 AQS 的抽象表现。它将请求共享资源的线程封装成队列的结点（Node） ，通过 CAS、自旋以及 LockSuport.park () 的方式，维护 state 变量的状态，使并发达到同步的效果。</p>\n<h3 id=\"aqs术语理解\"><a class=\"markdownIt-Anchor\" href=\"#aqs术语理解\">#</a> <strong>AQS 术语理解</strong></h3>\n<p><img data-src=\"aqs-6.png\" alt=\"\"></p>\n<p>有阻塞就需要排队，实现排队必然需要队列</p>\n<p>AQS 使用一个 volatile 的 int 类型的成员变量来表示同步状态，通过内置的 FIFO 队列来完成资源获取的排队工作将每条要去抢占资源的线程封装成 一个 Node 节点来实现锁的分配，通过 CAS 完成对 State 值的修改。<br>\nNode 节点是啥？答：你有见过 HashMap 的 Node 节点吗？JDK 用 static class Node&lt;K,V&gt; implements Map.Entry&lt;K,V&gt; { 来封装我们传入的 KV 键值对。这里也是一样的道理，JDK 使用 Node 来封装（管理）Thread<br>\n 可以将 Node 和 Thread 类比于候客区的椅子和等待用餐的顾客</p>\n<p><img data-src=\"aqs-7.png\" alt=\"\"></p>\n<h3 id=\"aqs内部体系架构\"><a class=\"markdownIt-Anchor\" href=\"#aqs内部体系架构\">#</a> <strong>AQS 内部体系架构</strong></h3>\n<ol>\n<li>\n<p>AQS 的 int 变量</p>\n<p>AQS 的同步状态 State 成员变量，类似于银行办理业务的受理窗口状态：零就是没人，自由状态可以办理；大于等于 1，有人占用窗口，等着去。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * The synchronization state.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">volatile</span> <span class=\"keyword\">int</span> state;</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>AQS 的 CLH 队列</p>\n<p>CLH 队列（三个大牛的名字组成），为一个双向队列，类似于银行侯客区的等待顾客。</p>\n<p><img data-src=\"aqs-8.png\" alt=\"\"></p>\n</li>\n<li>\n<p>内部类 Node（Node 类在 AQS 类内部）</p>\n<p>Node 的等待状态 waitState 成员变量，类似于等候区其它顾客 (其它线程) 的等待状态，队列中每个排队的个体就是一个 Node。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Status field, taking on only the values:</span></span><br><span class=\"line\"><span class=\"comment\"> *   SIGNAL:     The successor of this node is (or will soon be)</span></span><br><span class=\"line\"><span class=\"comment\"> *               blocked (via park), so the current node must</span></span><br><span class=\"line\"><span class=\"comment\"> *               unpark its successor when it releases or</span></span><br><span class=\"line\"><span class=\"comment\"> *               cancels. To avoid races, acquire methods must</span></span><br><span class=\"line\"><span class=\"comment\"> *               first indicate they need a signal,</span></span><br><span class=\"line\"><span class=\"comment\"> *               then retry the atomic acquire, and then,</span></span><br><span class=\"line\"><span class=\"comment\"> *               on failure, block.</span></span><br><span class=\"line\"><span class=\"comment\"> *   CANCELLED:  This node is cancelled due to timeout or interrupt.</span></span><br><span class=\"line\"><span class=\"comment\"> *               Nodes never leave this state. In particular,</span></span><br><span class=\"line\"><span class=\"comment\"> *               a thread with cancelled node never again blocks.</span></span><br><span class=\"line\"><span class=\"comment\"> *   CONDITION:  This node is currently on a condition queue.</span></span><br><span class=\"line\"><span class=\"comment\"> *               It will not be used as a sync queue node</span></span><br><span class=\"line\"><span class=\"comment\"> *               until transferred, at which time the status</span></span><br><span class=\"line\"><span class=\"comment\"> *               will be set to 0. (Use of this value here has</span></span><br><span class=\"line\"><span class=\"comment\"> *               nothing to do with the other uses of the</span></span><br><span class=\"line\"><span class=\"comment\"> *               field, but simplifies mechanics.)</span></span><br><span class=\"line\"><span class=\"comment\"> *   PROPAGATE:  A releaseShared should be propagated to other</span></span><br><span class=\"line\"><span class=\"comment\"> *               nodes. This is set (for head node only) in</span></span><br><span class=\"line\"><span class=\"comment\"> *               doReleaseShared to ensure propagation</span></span><br><span class=\"line\"><span class=\"comment\"> *               continues, even if other operations have</span></span><br><span class=\"line\"><span class=\"comment\"> *               since intervened.</span></span><br><span class=\"line\"><span class=\"comment\"> *   0:          None of the above</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * The values are arranged numerically to simplify use.</span></span><br><span class=\"line\"><span class=\"comment\"> * Non-negative values mean that a node doesn&#x27;t need to</span></span><br><span class=\"line\"><span class=\"comment\"> * signal. So, most code doesn&#x27;t need to check for particular</span></span><br><span class=\"line\"><span class=\"comment\"> * values, just for sign.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * The field is initialized to 0 for normal sync nodes, and</span></span><br><span class=\"line\"><span class=\"comment\"> * CONDITION for condition nodes.  It is modified using CAS</span></span><br><span class=\"line\"><span class=\"comment\"> * (or when possible, unconditional volatile writes).</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">volatile</span> <span class=\"keyword\">int</span> waitStatus;</span><br></pre></td></tr></table></figure>\n<p>Node 类的内部结构</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Node</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//共享</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Node SHARED = <span class=\"keyword\">new</span> Node();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//独占</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Node EXCLUSIVE = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//线程被取消了</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> CANCELLED = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//后继线程需要唤醒</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> SIGNAL = -<span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//等待condition唤醒</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> CONDITION = -<span class=\"number\">2</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//共享式同步状态获取将会无条件地传播下去</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> PROPAGATE = -<span class=\"number\">3</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 初始为e，状态是上面的几种</span></span><br><span class=\"line\">    <span class=\"keyword\">volatile</span> <span class=\"keyword\">int</span> waitStatus;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 前置节点</span></span><br><span class=\"line\">    <span class=\"keyword\">volatile</span> Node prev;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 后继节点</span></span><br><span class=\"line\">    <span class=\"keyword\">volatile</span> Node next;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>总结</p>\n<p>有阻塞就需要排队，实现排队必然需要队列，通过 state 变量 + CLH 双端 Node 队列实现。</p>\n</li>\n</ol>\n<h3 id=\"aqs同步队列的基本结构\"><a class=\"markdownIt-Anchor\" href=\"#aqs同步队列的基本结构\">#</a> <strong>AQS 同步队列的基本结构</strong></h3>\n<p><img data-src=\"aqs-9.png\" alt=\"\"></p>\n<h3 id=\"aqs底层是怎么排队的\"><a class=\"markdownIt-Anchor\" href=\"#aqs底层是怎么排队的\">#</a> <strong>AQS 底层是怎么排队的？</strong></h3>\n<p>通过调用  <code>LockSupport.park()</code>  来进行排队。</p>\n<h3 id=\"从-reentrantlock-进入-aqs\"><a class=\"markdownIt-Anchor\" href=\"#从-reentrantlock-进入-aqs\">#</a> 从 ReentrantLock 进入 AQS</h3>\n<h4 id=\"reentrantlock-锁\"><a class=\"markdownIt-Anchor\" href=\"#reentrantlock-锁\">#</a> ReentrantLock 锁</h4>\n<p><code>ReentrantLock</code>  类是  <code>Lock</code>  接口的实现类，基本上是通过【聚合】了一个【队列同步器】的子类完成线程访问控制的。</p>\n<p><strong>ReentrantLock 的原理</strong></p>\n<p><img data-src=\"rel-1.png\" alt=\"\"></p>\n<h4 id=\"公平锁-非公平锁\"><a class=\"markdownIt-Anchor\" href=\"#公平锁-非公平锁\">#</a> 公平锁 &amp; 非公平锁</h4>\n<p>在  <code>ReentrantLock</code>  内定义了静态内部类，分别为  <code>NoFairSync</code> （非公平锁）和  <code>FairSync</code> （公平锁）</p>\n<p><img data-src=\"rel-2.png\" alt=\"\"></p>\n<p><code>ReentrantLock</code>  的构造函数：不传参数表示创建非公平锁；参数为 true 表示创建公平锁；参数为 false 表示创建非公平锁。</p>\n<p>看一下 <code>lock()</code>  方法的执行流程：以  <code>NonfairSync</code>  为例</p>\n<p><img data-src=\"rel-3.png\" alt=\"\"></p>\n<p>在  <code>ReentrantLock</code>  中， <code>NoFairSync</code>  和  <code>FairSync</code>  中  <code>tryAcquire()</code>  方法的区别，可以明显看出公平锁与非公平锁的 <code>lock()</code>  方法唯一的区别就在于公平锁在获取同步状态时多了一个限制条件:</p>\n<p><code>hasQueuedPredecessors()</code></p>\n<p><img data-src=\"rel-4.png\" alt=\"\"></p>\n<p><code>hasQueuedPredecessors()</code>  方法是公平锁加锁时判断等待队列中是否存在有效节点的方法</p>\n<p><img data-src=\"rel-5.png\" alt=\"\"></p>\n<h3 id=\"公平锁与非公平锁的总结\"><a class=\"markdownIt-Anchor\" href=\"#公平锁与非公平锁的总结\">#</a> 公平锁与非公平锁的总结</h3>\n<p>对比公平锁和非公平锁的 <code>tryAcqure()</code>  方法的实现代码， 其实差别就在于非公平锁获取锁时比公平锁中少了一个判断 <code>!hasQueuedPredecessors()</code> ， <code>hasQueuedPredecessors()</code>  中判断了是否需要排队，导致公平锁和非公平锁的差异如下:</p>\n<p>公平锁：公平锁讲究先来先到，线程在获取锁时，如果这个锁的等待队列中已经有线程在等待，那么当前线程就会进入等待队列中；</p>\n<p>非公平锁：不管是否有等待队列，如果可以获取锁，则立刻占有锁对象。也就是说队列的第一 个排队线程在 unpark ()，之后还是需要竞争锁 (存在线程竞争的情况下)</p>\n<p><img data-src=\"rel-6.png\" alt=\"\"></p>\n<p>而  <code>acquire()</code>  方法最终都会调用  <code>tryAcquire()</code>  方法</p>\n<p><img data-src=\"rel-7.png\" alt=\"\"></p>\n<p>在  <code>NonfairSync</code>  和  <code>FairSync</code>  中均重写了其父类  <code>AbstractQueuedSynchronizer</code>  中的  <code>tryAcquire()</code>  方法。</p>\n<p><img data-src=\"rel-8.png\" alt=\"\"></p>\n<h4 id=\"从非公平锁的-lock-入手\"><a class=\"markdownIt-Anchor\" href=\"#从非公平锁的-lock-入手\">#</a> 从非公平锁的 lock () 入手</h4>\n<p>我们这里举个栗子，假设 A、B、C 三个人都要去银行窗口办理业务，但是银行窗口只有一个个，我们使用  <code>lock.lock()</code>  模拟这种情况。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.TimeUnit;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.locks.ReentrantLock;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/** <span class=\"doctag\">@ClassName</span> AQSDemo <span class=\"doctag\">@Description</span> TODO <span class=\"doctag\">@Author</span> sunq <span class=\"doctag\">@Date</span> 2021/11/29 11:08 */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AQSDemo</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    ReentrantLock lock = <span class=\"keyword\">new</span> ReentrantLock();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 带入一个银行办理业务的案例来模拟我们的AQS如何进行线程的管理和通知唤醒机制</span></span><br><span class=\"line\">    <span class=\"comment\">// 3个线程模拟3个来银行网点，受理窗口办理业务的顾客</span></span><br><span class=\"line\">    <span class=\"comment\">// A顾客就是第一个顾客，此时受理窗口没有任何人，A可以直接去办理</span></span><br><span class=\"line\">    <span class=\"keyword\">new</span> Thread(</span><br><span class=\"line\">            () -&gt; &#123;</span><br><span class=\"line\">              lock.lock();</span><br><span class=\"line\">              <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;-----A thread come in&quot;</span>);</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                  TimeUnit.MINUTES.sleep(<span class=\"number\">20</span>);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">                  e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">              &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">                lock.unlock();</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            <span class=\"string\">&quot;A&quot;</span>)</span><br><span class=\"line\">        .start();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 第二个顾客，第二个线程---》由于受理业务的窗口只有一个(只能一个线程持有锁)，此时B只能等待，</span></span><br><span class=\"line\">    <span class=\"comment\">// 进入候客区</span></span><br><span class=\"line\">    <span class=\"keyword\">new</span> Thread(</span><br><span class=\"line\">            () -&gt; &#123;</span><br><span class=\"line\">              lock.lock();</span><br><span class=\"line\">              <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;-----B thread come in&quot;</span>);</span><br><span class=\"line\">              &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">                lock.unlock();</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            <span class=\"string\">&quot;B&quot;</span>)</span><br><span class=\"line\">        .start();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 第三个顾客，第三个线程---》由于受理业务的窗口只有一个(只能一个线程持有锁)，此时C只能等待，</span></span><br><span class=\"line\">    <span class=\"comment\">// 进入候客区</span></span><br><span class=\"line\">    <span class=\"keyword\">new</span> Thread(</span><br><span class=\"line\">            () -&gt; &#123;</span><br><span class=\"line\">              lock.lock();</span><br><span class=\"line\">              <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;-----C thread come in&quot;</span>);</span><br><span class=\"line\">              &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">                lock.unlock();</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            <span class=\"string\">&quot;C&quot;</span>)</span><br><span class=\"line\">        .start();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><strong>先来看看线程 A（客户 A）的执行流程</strong></p>\n</blockquote>\n<p>之前已经讲到过， <code>new ReentrantLock()</code>  不传参默认是非公平锁，调用 <code>lock.lock()</code>  方法最终都会执行 <code>NonfairSync</code>  重写后的 <code>lock()</code>  方法</p>\n<p>第一次执行    lock ()    方法</p>\n<p>由于第一次执行 <code>lock()</code>  方法， <code>state</code>  变量的值等于 0，表示 lock 锁没有被占用，此时执行 <code>compareAndSetState(0, 1)</code>  CAS 判断，可得 <code>state == expected == 0</code> ，因此 CAS 成功，将 state 的值修改为 1。</p>\n<p><img data-src=\"rel-9.png\" alt=\"\"></p>\n<p>再来复习下 CAS：通过 Unsafe 提供的 compareAndSwapXxx () 方法保证修改操作的原子性（通过 CPU 原语保证），如果变量的值等于期望值，则修改变量的值为 update，并返回 true；若不等，则返回 false。this 代表当前对象，stateOffset 表示 state 变量在该对象中的偏移量。</p>\n<p><img data-src=\"rel-10.png\" alt=\"\"></p>\n<p>再来看看  <code>setExclusiveOwnerThread()</code>  方法做了啥：将拥有 lock 锁的线程修改为线程 A。</p>\n<p><img data-src=\"rel-11.png\" alt=\"\"></p>\n<blockquote>\n<p><strong>再来看看线程 B（客户 B）的执行流程</strong></p>\n</blockquote>\n<p>第二次执行 lock () 方法</p>\n<p>由于第二次执行 <code>lock()</code>  方法， <code>state</code>  变量的值等于 1，表示 lock 锁没有被占用，此时执行  <code>compareAndSetState(0, 1)</code>  CAS 判断，可得 <code>state != expected</code> ，因此 CAS 失败，进入 <code>acquire()</code>  方法。</p>\n<p><img data-src=\"rel-9.png\" alt=\"\"></p>\n<p><code>acquire()</code>  方法主要包含如下几个方法，下面我们一个一个来查看。</p>\n<p><img data-src=\"rel-12.png\" alt=\"\"></p>\n<h4 id=\"tryacquirearg-方法的执行流程\"><a class=\"markdownIt-Anchor\" href=\"#tryacquirearg-方法的执行流程\">#</a> <strong> <code>tryAcquire(arg)</code>  方法的执行流程</strong></h4>\n<p>先来看看  <code>tryAcquire()</code>  方法，诶，怎么抛了个异常？别着急，仔细一看是  <code>AbstractQueuedSynchronizer</code>  抽象队列同步器中定义的方法，既然抛出了异常，就证明父类强制要求子类去实现。</p>\n<p>这里以非公平锁  <code>NonfairSync</code>  为例，在  <code>tryAcquire()</code>  方法中调用了  <code>nonfairTryAcquire()</code>  方法，注意，这里传入的参数都是 1。</p>\n<p><img data-src=\"rel-13.png\" alt=\"\"></p>\n<p><code>nonfairTryAcquire(acquires)</code>  正常的执行流程：</p>\n<p>在 <code>nonfairTryAcquire()</code>  方法中，大多数情况都是如下的执行流程：线程 B 执行 <code>int c = getState()</code>  时，获取到 state 变量的值为 1，表示 lock 锁正在被占用；于是执行 <code>if (c == 0) &#123;</code> 发现条件不成立，接着执行下一个判断条件 <code>else if (current ==getExclusiveOwnerThread()) &#123;</code> ，current 线程为线程 B，而  <code>getExclusiveOwnerThread()</code>  方法返回正在占用 lock 锁的线程，为线程 A，因此  <code>tryAcquire()</code>  方法最后会 <code>return false</code> ，表示并没有抢占到 lock 锁。</p>\n<p><img data-src=\"rel-14.png\" alt=\"\"></p>\n<p><strong>补充</strong>： <code>getExclusiveOwnerThread()</code>  方法返回正在占用 lock 锁的线程（排他锁，exclusive）。</p>\n<p><img data-src=\"rel-15.png\" alt=\"\"></p>\n<blockquote>\n<p><strong>nonfairTryAcquire (acquires) 比较特殊的执行流程：</strong></p>\n</blockquote>\n<p>第一种情况是，走到 <code>int c = getState()</code>  语句时，此时线程 A 恰好执行完成，让出了 lock 锁，那么 <code>state</code>  变量的值为 0，当然发生这种情况的概率很小，那么线程 B 执行 CAS 操作成功后，将占用 lock 锁的线程修改为自己，然后返回 true，表示抢占锁成功。其实这里还有一种情况，需要留到 <code>unlock()</code>  方法才能说清楚</p>\n<p>第二种情况为可重入锁的表现，假设 A 线程又再次抢占 lock 锁（当然示例代码里面并没有体现出来），这时 <code>current == getExclusiveOwnerThread()</code>  条件成立，将 <code>state</code>  变量的值加上 <code>acquire</code> ，这种情况下也应该 <code>return true</code> ，表示线程 A 正在占用 lock 锁。因此， <code>state</code>  变量的值是可以大于 1 的。<br>\n<img data-src=\"rel-14.png\" alt=\"\"></p>\n<blockquote>\n<p><strong>继续往下走，执行  <code>addWaiter(Node.EXCLUSIVE)</code>  方法</strong></p>\n</blockquote>\n<p>在  <code>tryAcquire()</code>  方法返回  <code>false</code>  之后，进行  <code>!</code>  操作后为  <code>true</code> ，那么会继续执行  <code>addWaiter()</code>  方法。</p>\n<p><img data-src=\"rel-12.png\" alt=\"\"></p>\n<p>来看看 addWaiter () 方法做了些啥？</p>\n<p>之前讲过 <code>Node</code>  节点用于封装用户线程，这里将当前正在执行的线程通过 <code>Node</code>  封装起来（当前线程正是抢占 lock 锁没有抢占到的线程）。</p>\n<p>判断 <code>tail</code>  尾指针是否为空，双端队列此时还没有元素呢～肯定为空呀，那么执行  <code>enq(node)</code>  方法，将封装了线程 B 的 <code>Node</code>  节点入队。</p>\n<p><img data-src=\"rel-16.png\" alt=\"\"></p>\n<p><strong>enq (node) 方法：构建双端同步队列</strong></p>\n<p>也许看到这里的代码有点蒙，需要有些前置知识，在双端同步队列中，第一个节点为虚节点（也叫哨兵节点），其实并不存储任何信息，只是占位。 真正的第一个有数据的节点，是从第二个节点开始的。</p>\n<p><img data-src=\"rel-17.png\" alt=\"\"></p>\n<p><strong>第一次执行 for 循环</strong>：现在解释起来就不费劲了，当线程 B 进来时，双端同步队列为空，此时肯定要先构建一个哨兵节点。此时 <code>tail == null</code> ，因此进入 <code>if(t == null) &#123;</code> 的分支，头指针指向哨兵节点，此时队列中只有一个节点，尾节点即是头结点，因此尾指针也指向该哨兵节点。<br>\n<img data-src=\"rel-18.png\" alt=\"\"></p>\n<p><strong>第二次执行 for 循环</strong>：现在该将装着线程 B 的节点放入双端同步队列中，此时 <code>tail</code>  指向了哨兵节点，并不等于 null，因此 <code>if (t == null)</code>  不成立，进入 else 分支。以尾插法的方式，先将 <code>node</code> （装着线程 B 的节点）的 <code>prev</code>  指向之前的 <code>tail</code> ，再将 <code>node</code>  设置为尾节点（执行 <code>compareAndSetTail(t, node)</code> ），最后将 <code>t.next</code>  指向 <code>node</code> ，最后执行 <code>return t</code>  结束 for 循环。</p>\n<p><strong>补充</strong>： <code>compareAndSetTail(t, node)</code>  方法的实现</p>\n<p><img data-src=\"rel-19.png\" alt=\"\"></p>\n<p><strong>注意</strong>：哨兵节点和  <code>nodeB</code>  节点的  <code>waitStatus</code>  均为 0，表示在等待队列中。</p>\n<p><strong> <code>acquireQueued()</code>  方法的执行</strong></p>\n<p>执行完  <code>addWaiter()</code>  方法之后，就该执行  <code>acquireQueued()</code>  方法了，这个方法有点东西，我们放到后面再去讲它</p>\n<p><img data-src=\"rel-12.png\" alt=\"\"></p>\n<blockquote>\n<p><strong>最后来看看线程 C（客户 C）的执行流程</strong></p>\n</blockquote>\n<p>线程 C 和线程 B 的执行流程很类似，都是执行  <code>acquire()</code>  中的方法。</p>\n<p><img data-src=\"rel-12.png\" alt=\"\"></p>\n<p>但是在  <code>addWaiter()</code>  方法中，执行流程有些区别。此时  <code>tail != null</code> ，因此在  <code>addWaiter()</code>  方法中就已经将  <code>nodeC</code>  添加至队尾了。</p>\n<p><img data-src=\"rel-16.png\" alt=\"\"></p>\n<p>执行完  <code>addWaiter()</code>  方法后，就已经将 nodeC 挂在了双端同步队列的队尾，不需要再执行  <code>enq(node)</code>  方法。</p>\n<p><img data-src=\"rel-20.png\" alt=\"\"></p>\n<blockquote>\n<p><strong>补前面的坑： <code>acquireQueued()</code>  方法的执行逻辑</strong></p>\n</blockquote>\n<p>先来看看看看  <code>acquireQueued()</code>  方法的源代码，其实这样直接看代码有点懵逼，我们接下来举例来理解。注意看：两个  <code>if</code>  判断中的代码都放在  <code>for( ; ; )</code>  中执行，这样可以实现自旋的操作。</p>\n<p><img data-src=\"rel-21.png\" alt=\"\"></p>\n<p><strong>线程 B 的执行流程</strong></p>\n<p>线程 B 执行 addWaiter () 方法之后，就进入了 acquireQueued () 方法中，此时传入的参数为封装了线程 B 的 nodeB 节点，nodeB 的前驱结点为哨兵节点，因此 final Node p = node.predecessor () 执行完后，p 将指向哨兵节点。哨兵节点满足 p == head，但是线程 B 执行 tryAcquire (arg) 方法尝试抢占 lock 锁时还是会失败，因此会执行下面 if 判断中的 shouldParkAfterFailedAcquire (p, node) 方法，该方法的代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">shouldParkAfterFailedAcquire</span><span class=\"params\">(Node pred, Node node)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> ws = pred.waitStatus;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ws == Node.SIGNAL)</span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">         * This node has already set status asking a release</span></span><br><span class=\"line\"><span class=\"comment\">         * to signal it, so it can safely park.</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ws &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">         * Predecessor was cancelled. Skip over predecessors and</span></span><br><span class=\"line\"><span class=\"comment\">         * indicate retry.</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">            node.prev = pred = pred.prev;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">while</span> (pred.waitStatus &gt; <span class=\"number\">0</span>);</span><br><span class=\"line\">        pred.next = node;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">         * waitStatus must be 0 or PROPAGATE.  Indicate that we</span></span><br><span class=\"line\"><span class=\"comment\">         * need a signal, but don&#x27;t park yet.  Caller will need to</span></span><br><span class=\"line\"><span class=\"comment\">         * retry to make sure it cannot acquire before parking.</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        compareAndSetWaitStatus(pred, ws, Node.SIGNAL);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>哨兵节点的  <code>waitStatus == 0</code> ，因此执行 CAS 操作将哨兵节点的  <code>waitStatus</code>  改为  <code>Node.SIGNAL(-1)</code> 。</p>\n<p><img data-src=\"rel-22.png\" alt=\"\"></p>\n<p>注意： <code>compareAndSetWaitStatus(pred, ws, Node.SIGNAL)</code>  调用  <code>unsafe.compareAndSwapInt(node, waitStatusOffset, expect, update);</code>  实现，虽然 <code>compareAndSwapInt()</code>  方法内无自旋，但是在 <code>acquireQueued()</code>  方法中的 <code>for( ; ; )</code>  能保证此自选操作成功（另一种情况就是线程 B 抢占到 lock 锁）。</p>\n<p><img data-src=\"rel-23.png\" alt=\"\"></p>\n<p>执行完上述操作，将哨兵节点的  <code>waitStatus</code>  设置为了 -1。</p>\n<p><img data-src=\"rel-24.png\" alt=\"\"></p>\n<p>执行完毕将退出  <code>if</code>  判断，又会重新进入  <code>for( ; ; )</code>  循环，此时执行  <code>shouldParkAfterFailedAcquire(p, node)</code>  方法时会返回  <code>true</code> ，因此此时会接着执行  <code>parkAndCheckInterrupt()</code>  方法。</p>\n<p><img data-src=\"rel-21.png\" alt=\"\"></p>\n<p>线程 B 调用  <code>park()</code>  方法后被挂起，程序不会然续向下执行，程序就在这儿排队等待。</p>\n<p><img data-src=\"rel-25.png\" alt=\"\"></p>\n<p><strong>线程 C 的执行流程</strong></p>\n<p>线程 C 最终也会执行到  <code>LockSupport.park(this);</code>  处，然后被挂起，进入等待区</p>\n<p><strong>总结：</strong></p>\n<p>如果前驱节点的 <code>waitstatus</code>  是 <code>SIGNAL 状态（-1）</code> ，即  <code>shouldParkAfterFailedAcquire() </code> 方法会返回  <code>true</code> ，程序会继续向下执行  <code>parkAndCheckInterrupt()</code>  方法，用于将当前线程挂起。</p>\n<p>根据 <code>park()</code>  方法 API 描述，程序在下面三种情况会继续向下执行：</p>\n<ol>\n<li>\n<p>被 <code>unpark</code></p>\n</li>\n<li>\n<p>被中断（interrupt）</p>\n</li>\n<li>\n<p>其他不合逻辑的返回才会然续向下执行</p>\n<p>因上述三种情况程序执行至此，返回当前线程的中断状态，并清空中断状态。如果程序由于被中断，该方法会返回 true。</p>\n</li>\n</ol>\n<h4 id=\"可总算要-unlock-了\"><a class=\"markdownIt-Anchor\" href=\"#可总算要-unlock-了\">#</a> 可总算要 unlock () 了</h4>\n<blockquote>\n<p><strong>线程 A 执行  <code>unlock()</code>  方法</strong></p>\n</blockquote>\n<p>A 线程终于要  <code>unlock()</code>  了吗？真不容易啊！</p>\n<p><img data-src=\"rel-26.png\" alt=\"\"></p>\n<p><code>unlock()</code>  方法调用了  <code>sync.release(1)</code>  方法。</p>\n<p><img data-src=\"rel-27.png\" alt=\"\"></p>\n<p><strong>release () 方法的执行流程</strong></p>\n<p>其实主要就是看看 <code>tryRelease(arg)</code>  方法和 <code>unparkSuccessor(h)</code>  方法的执行流程，这里先大概说一下，能有个印象：线程 A 即将让出 lock 锁，因此 <code>tryRelease()</code>  执行后将返回 true，表示礼让成功，head 指针指向哨兵节点，并且 if 条件满足，可执行  <code>unparkSuccessor(h)</code>  方法。</p>\n<p><img data-src=\"rel-28.png\" alt=\"\"></p>\n<p><strong> <code>tryRelease(arg)</code>  方法的执行逻辑</strong></p>\n<p>线程 A 只加锁过一次，因此  <code>state</code>  的值为 1，参数  <code>release</code>  的值也为 1，因此  <code>c == 0</code> 。将  <code>free</code>  设置为  <code>true</code> ，表示当前 lock 锁已被释放，将排他锁占有的线程设置为  <code>null</code> ，表示没有任何线程占用 lock 锁。</p>\n<p><img data-src=\"rel-29.png\" alt=\"\"></p>\n<p><strong>unparkSuccessor (h) 方法的执行逻辑</strong></p>\n<p>在 release () 方法中获取到的头结点 h 为哨兵节点，h.waitStatus == -1，因此执行 CAS 操作将哨兵节点的 waitStatus 设置为 0，并将哨兵节点的下一个节点（s = node.next = nodeB）获取出来，并唤醒 nodeB 中封装的线程（if (s == null || s.waitStatus&gt; 0) 不成立，只有 if (s != null) 成立）。</p>\n<p><img data-src=\"rel-30.png\" alt=\"\"></p>\n<p>执行完上述操作后，当前占用 lock 锁的线程为  <code>null</code> ，哨兵节点的  <code>waitStatus</code>  设置为 0， <code>state</code>  的值为 0（表示当前没有任何线程占用 lock 锁）。</p>\n<p><img data-src=\"rel-31.png\" alt=\"\"></p>\n<p><strong>杀个回马枪：继续来看 B 线程被唤醒之后的执行逻辑</strong></p>\n<p>再次回到 lock () 方法的执行流程中来，线程 B 被 unpark () 之后将不再阻塞，继续执行下面的程序，线程 B 正常被唤醒，因此 <code>Thread.interrupted()</code>  的值为 false，表示线程 B 未被中断。</p>\n<p><img data-src=\"rel-25.png\" alt=\"\"></p>\n<p>回到上一层方法中，此时 lock 锁未被占用，线程 B 执行  <code>tryAcquire(arg)</code>  方法能够抢到 lock 锁，并且将  <code>state</code>  变量的值设置为 1，表示该 lock 锁已经被占用。</p>\n<p><img data-src=\"rel-21.png\" alt=\"\"></p>\n<p>接着来研究下  <code>setHead(node)</code>  方法：传入的节点为  <code>nodeB</code> ，头指针指向  <code>nodeB</code>  节点；将  <code>nodeB</code>  中封装的线程置为  <code>null</code> （因为已经获得锁了）； <code>nodeB</code>  不再指向其前驱节点（哨兵节点）。这一切都是为了将  <code>nodeB</code>  作为新的哨兵节点。</p>\n<p><img data-src=\"rel-32.png\" alt=\"\"></p>\n<p>执行完  <code>setHead(node)</code>  方法的状态如下图所示。</p>\n<p><img data-src=\"rel-33.png\" alt=\"\"></p>\n<p>将  <code>p.next</code>  设置为  <code>null</code> ，这是原来的哨兵节点就是完全孤立的一个节点，此时  <code>nodeB</code>  作为新的哨兵节点</p>\n<p><img data-src=\"rel-34.png\" alt=\"\"></p>\n<p>线程 C 也是类似的执行流程。</p>\n<h3 id=\"aqs-总结\"><a class=\"markdownIt-Anchor\" href=\"#aqs-总结\">#</a> AQS 总结</h3>\n<h4 id=\"aqs-的考点\"><a class=\"markdownIt-Anchor\" href=\"#aqs-的考点\">#</a> AQS 的考点</h4>\n<p>第一个考点：我相信你应该看过源码了，那么 AQS 里面有个变量叫 State，它的值有几种？</p>\n<p>答：3 个状态：没占用是 0，占用了是 1，大于 1 是可重入锁</p>\n<p>第二个考点：如果锁正在被占用，AB 两个线程进来了以后，请问这个总共有多少个 Node 节点？</p>\n<p>答：答案是 3 个，分别是哨兵节点、nodeA、nodeB</p>\n<h4 id=\"aqs-源码解读案例图示\"><a class=\"markdownIt-Anchor\" href=\"#aqs-源码解读案例图示\">#</a> AQS 源码解读案例图示</h4>\n<p><img data-src=\"rel-35.png\" alt=\"\"></p>\n"},{"layout":"shoka","title":"Sentinel笔记-上篇","date":"2021-11-03T03:05:14.000Z","_content":"\n","source":"_posts/Sentinel笔记-上篇.md","raw":"---\nlayout: shoka\ntitle: Sentinel笔记-上篇\ndate: 2021-11-03 11:05:14\ntags:\n---\n\n","slug":"Sentinel笔记-上篇","published":1,"updated":"2021-11-03T03:06:19.269Z","comments":1,"photos":[],"link":"","_id":"ckw1i535e00019syr7goo5k9p","content":"","site":{"data":{"languages":{"zh-CN":{"post":{"copyright":{"author":"本文博主"}}},"en":{"menu":{"travellings":"Travellings"}}}}},"length":0,"excerpt":"","more":""},{"layout":"shoka","title":"雪花算法","date":"2021-11-05T02:27:09.000Z","_content":"\n## 分布式ID方案要求\n\n当分布式环境下想要生成一个全局唯一的ID，有哪些要求呢？\n\n### ID生成规则硬性要求\n\n1. 全局唯一\n2. 趋势递增(MySQL的InnoDB使用聚簇索引，B+Tree结构，有序主键可以保证写入性能)\n3. 单调递增(保证下一个ID大于上一个ID,例如事务版本号、IM增量信息、排序等特殊需求)\n4. 信息安全(如果ID是数字递增的，恶意扒取的工作将很容易，按顺序下载指定URL即可。如果是订单号，竞争对手就一眼看出日成交量。因此在一些业务场景中，需要ID无规律)\n5. 含时间戳(方便排查问题发生的时间)\n\n### ID生成系统可用性要求\n\n1. 高可用(发一个生成ID的请求，服务器要保证在99.999%情况下生成成功)\n2. 低延迟(服务器要响应够快速)\n3. 高QPS(并发10万个请求，服务器要顶住，且返回10万个分布式ID)\n\n## 分布式ID三种方案\n\n### UUID\n\n使用java自带的UUID生成 8+4+4+4+12=32位唯一ID\n\n#### 优点\n\n- 本地生成，没有网络传输消耗\n\n#### 缺点\n\n无序，插入数据库性能差\n\n1. MySQL推荐主键越短越好，UUID固定32位，太长\n2. 主键过长，二级索引叶子结点存储的空间占用大\n3. 主键索引插入时，由于UUID无序，导致节点生成稀疏，创建很多不饱和的节点，大大影响索引的插入性能\n\n### 数据库自增主键\n\n使用了数据库自增主键和MySQL数据库的replace into实现\n\nreplace into代表着 尝试插入一条数据，如果表中已经有这一行数据(根据主键或者唯一性索引判断)，则先删除数据，再插入数据\n\n#### 模拟实战\n\n```sql\nCREATE TABLE t_test(\nid BIGINT(20) UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY,\nstub CHAR(1) NOT NULL DEFAULT '',\nUNIQUE KEY stub (stub)\n);\n\nselect * from t_test;\n\nreplace into t_test (stub) values ('b');\nselect last_insert_id();\n```\n\n#### 缺点\n\n- 每次生成ID，都需要读写一次数据库，对于高QPS无法满足\n- 分库后，两个数据库需要划分增长步长，各自有限制\n- ID数字顺序递增，不安全\n- 不适合分布式ID\n\n### 基于Redis生成全局id策略\n\n因为Redis是单线程的天生保证原子性,可以使用原子操作INCR和INCRBY来实现\n\n#### 实现\n\nRedis集群：5台Redis，各自初始值位1，2，3，4，5，增长步长为5\n\n第一台：1、6、11、16...\n\n第二台：2、7、12、17...\n\n第三台：3、8、13、18...\n\n第四台：4、9、14、19...\n\n#### 缺点\n\n- 架构复杂\n- 绑定Redis\n- 单台Redis宕机的话，生成ID不连续了\n\n## Twitter的分布式自增ID算法snowflake\n\n[官网](https://github.com/twitter-archive/snowflake)\n\n#### 算法原理\n\nSnowFlake算法生成id的结果是一个64bit大小的整数，它的结构如下图：\n\n![img](雪花算法原理.png)\n\n1. 1bit，不用，因为二进制中最高位是符号位，1表示负数，0表示正数。生成的id一般都是用整数，所以最高位固定为0。\n\n2. 41bit-时间戳，用来记录时间戳，毫秒级。\n- 41位可以表示2^41 - 1个数字\n- 如果只用来表示正整数（计算机中正数包含0），可以表示的数值范围是：0 至 2^41 - 1，减1是因为可表示的数值范围是从0开始算的，而不是1。\n- 也就是说41位可以表示2^41 - 1个毫秒的值，转化成单位年则是69年。实际上是 1970-01-01 ～ 2039-09-07 \n\n3. 10bit-工作机器id\n\n用来记录工作机器id。10 bit 里 5 个 bit 代表机房 id，5 个 bit 代表机器 id。意思就是最多代表 2 ^ 5 个机房（32 个机房），每个机房里可以代表 2 ^ 5 个机器（32 台机器）。\n\n4. 12bit-序列号，序列号，用来记录同毫秒内产生的不同id。\n\n- 12位（bit）可以表示的最大正整数是2^12-1=4095，即可以用0、1、2、3、....4094这4095个数字，来表示同一机器同一时间截（毫秒)内产生的4095个ID序号。\n\n由于在Java中64bit的整数是long类型，所以在Java中SnowFlake算法生成的id就是long来存储的。\n\n\n### snowflake工程实战\n\n模块名：snowflake-service-7777\n\n#### 配置文件\n\nPOM\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n  xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n  <parent>\n    <artifactId>cloud2020</artifactId>\n    <groupId>com.atguigu.springcloud</groupId>\n    <version>1.0-SNAPSHOT</version>\n  </parent>\n  <modelVersion>4.0.0</modelVersion>\n\n  <artifactId>snowflake-service-7777</artifactId>\n\n  <properties>\n    <maven.compiler.source>8</maven.compiler.source>\n    <maven.compiler.target>8</maven.compiler.target>\n  </properties>\n\n  <dependencies>\n\n    <dependency>\n      <groupId>cn.hutool</groupId>\n      <artifactId>hutool-captcha</artifactId>\n      <version>5.7.4</version>\n    </dependency>\n\n    <!--web-actuator-->\n    <dependency>\n      <groupId>org.springframework.boot</groupId>\n      <artifactId>spring-boot-starter-web</artifactId>\n    </dependency>\n    <dependency>\n      <groupId>org.springframework.boot</groupId>\n      <artifactId>spring-boot-starter-actuator</artifactId>\n    </dependency>\n\n    <dependency>\n      <groupId>org.springframework.boot</groupId>\n      <artifactId>spring-boot-starter-test</artifactId>\n      <scope>test</scope>\n    </dependency>\n\n    <dependency>\n      <groupId>org.projectlombok</groupId>\n      <artifactId>lombok</artifactId>\n      <optional>true</optional>\n    </dependency>\n\n    <dependency>\n      <groupId>org.springframework.boot</groupId>\n      <artifactId>spring-boot-devtools</artifactId>\n      <scope>runtime</scope>\n      <optional>true</optional>\n    </dependency>\n\n    <dependency>\n      <groupId>com.atguigu.springcloud</groupId>\n      <artifactId>cloudapicommons</artifactId>\n      <version>${project.version}</version>\n    </dependency>\n\n  </dependencies>\n</project>\n```\n\nApplication.yml\n\n```yaml\nserver:\n  port: 7777\n\nspring:\n  application:\n    name: snowflake-service\n```\n\n#### Tool层\n\nIdGeneratorSnowflake\n\n```java\nimport cn.hutool.core.lang.Snowflake;\nimport cn.hutool.core.net.NetUtil;\nimport cn.hutool.core.util.IdUtil;\nimport javax.annotation.PostConstruct;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.stereotype.Component;\n\n@Component\n@Slf4j\npublic class IdGeneratorSnowflake {\n  private long workId = 0;\n  private long datacenterId = 1;\n  private Snowflake snowflake = IdUtil.getSnowflake(workId, datacenterId);\n\n  @PostConstruct\n  public void init() {\n    try {\n      workId = NetUtil.ipv4ToLong(NetUtil.getLocalhostStr());\n      log.info(\"当前机器的workId：{}\", workId);\n    } catch (Exception e) {\n      log.warn(\"获取当前机器的workId失败\", e);\n      workId = NetUtil.getLocalhostStr().hashCode();\n    }\n  }\n\n  public synchronized long snowflakeId() {\n    return this.snowflake.nextId();\n  }\n\n  public synchronized long snowflakeId(long workId, long datacenterId) {\n    Snowflake snowflake = IdUtil.getSnowflake(workId, datacenterId);\n    return snowflake.nextId();\n  }\n}\n```\n\n#### Service层\n\nOrderService\n\n```java\nimport com.atguigu.springcloud.tool.IdGeneratorSnowflake;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\n\n@Service\npublic class OrderService {\n\n  @Autowired private IdGeneratorSnowflake idGeneratorSnowflake;\n\n  public String getIDBySnowFlake() {\n    ExecutorService executorService = Executors.newFixedThreadPool(5);\n    for (int i = 1; i < 20; i++) {\n      int finalI = i;\n      executorService.submit(\n          () -> {\n            System.out.println(\"序号\" + finalI + \"：\" + idGeneratorSnowflake.snowflakeId());\n          });\n    }\n    executorService.shutdown();\n    return \"hello snowflake\";\n  }\n}\n```\n\n#### Controller层\n\nOrderController\n\n```java\nimport com.atguigu.springcloud.Service.OrderService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\n@RestController\npublic class OrderController {\n\n  @Autowired private OrderService orderService;\n\n  @RequestMapping(\"/snowflake\")\n  public String index() {\n    return orderService.getIDBySnowFlake();\n  }\n}\n```\n\n#### 主启动类\n\nSnowflakeMain7777\n\n```java\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\n\n@SpringBootApplication\npublic class SnowflakeMain7777 {\n  public static void main(String[] args) {\n    SpringApplication.run(SnowflakeMain7777.class, args);\n  }\n}\n```\n\n访问地址: http://localhost:7777/snowflake\n\n最终效果如下\n\n![img](代码效果图.png)\n\n### 优点\n\n1. 毫秒数在高位，自增数在低位，整个ID是趋势自增的\n2. 不依赖第三方服务，生成ID性能高\n3. 可根据业务特性分配bit位，非常灵活\n\n### 缺点\n\n1. 依赖机器时钟，如果时钟回拨了，会出现重复ID\n2. 在单机上是递增的，但是在分布式环境中如果一个节点的时钟不对，则全局看来整体ID不一定递增\n\n### 改进的新方案\n\n1. 百度开源的分布式唯一ID生成器UidGenerator\n2. 美团开源的Leaf\n","source":"_posts/雪花算法.md","raw":"---\nlayout: shoka\ntitle: 雪花算法\ndate: 2021-11-05 10:27:09\ntags:\n---\n\n## 分布式ID方案要求\n\n当分布式环境下想要生成一个全局唯一的ID，有哪些要求呢？\n\n### ID生成规则硬性要求\n\n1. 全局唯一\n2. 趋势递增(MySQL的InnoDB使用聚簇索引，B+Tree结构，有序主键可以保证写入性能)\n3. 单调递增(保证下一个ID大于上一个ID,例如事务版本号、IM增量信息、排序等特殊需求)\n4. 信息安全(如果ID是数字递增的，恶意扒取的工作将很容易，按顺序下载指定URL即可。如果是订单号，竞争对手就一眼看出日成交量。因此在一些业务场景中，需要ID无规律)\n5. 含时间戳(方便排查问题发生的时间)\n\n### ID生成系统可用性要求\n\n1. 高可用(发一个生成ID的请求，服务器要保证在99.999%情况下生成成功)\n2. 低延迟(服务器要响应够快速)\n3. 高QPS(并发10万个请求，服务器要顶住，且返回10万个分布式ID)\n\n## 分布式ID三种方案\n\n### UUID\n\n使用java自带的UUID生成 8+4+4+4+12=32位唯一ID\n\n#### 优点\n\n- 本地生成，没有网络传输消耗\n\n#### 缺点\n\n无序，插入数据库性能差\n\n1. MySQL推荐主键越短越好，UUID固定32位，太长\n2. 主键过长，二级索引叶子结点存储的空间占用大\n3. 主键索引插入时，由于UUID无序，导致节点生成稀疏，创建很多不饱和的节点，大大影响索引的插入性能\n\n### 数据库自增主键\n\n使用了数据库自增主键和MySQL数据库的replace into实现\n\nreplace into代表着 尝试插入一条数据，如果表中已经有这一行数据(根据主键或者唯一性索引判断)，则先删除数据，再插入数据\n\n#### 模拟实战\n\n```sql\nCREATE TABLE t_test(\nid BIGINT(20) UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY,\nstub CHAR(1) NOT NULL DEFAULT '',\nUNIQUE KEY stub (stub)\n);\n\nselect * from t_test;\n\nreplace into t_test (stub) values ('b');\nselect last_insert_id();\n```\n\n#### 缺点\n\n- 每次生成ID，都需要读写一次数据库，对于高QPS无法满足\n- 分库后，两个数据库需要划分增长步长，各自有限制\n- ID数字顺序递增，不安全\n- 不适合分布式ID\n\n### 基于Redis生成全局id策略\n\n因为Redis是单线程的天生保证原子性,可以使用原子操作INCR和INCRBY来实现\n\n#### 实现\n\nRedis集群：5台Redis，各自初始值位1，2，3，4，5，增长步长为5\n\n第一台：1、6、11、16...\n\n第二台：2、7、12、17...\n\n第三台：3、8、13、18...\n\n第四台：4、9、14、19...\n\n#### 缺点\n\n- 架构复杂\n- 绑定Redis\n- 单台Redis宕机的话，生成ID不连续了\n\n## Twitter的分布式自增ID算法snowflake\n\n[官网](https://github.com/twitter-archive/snowflake)\n\n#### 算法原理\n\nSnowFlake算法生成id的结果是一个64bit大小的整数，它的结构如下图：\n\n![img](雪花算法原理.png)\n\n1. 1bit，不用，因为二进制中最高位是符号位，1表示负数，0表示正数。生成的id一般都是用整数，所以最高位固定为0。\n\n2. 41bit-时间戳，用来记录时间戳，毫秒级。\n- 41位可以表示2^41 - 1个数字\n- 如果只用来表示正整数（计算机中正数包含0），可以表示的数值范围是：0 至 2^41 - 1，减1是因为可表示的数值范围是从0开始算的，而不是1。\n- 也就是说41位可以表示2^41 - 1个毫秒的值，转化成单位年则是69年。实际上是 1970-01-01 ～ 2039-09-07 \n\n3. 10bit-工作机器id\n\n用来记录工作机器id。10 bit 里 5 个 bit 代表机房 id，5 个 bit 代表机器 id。意思就是最多代表 2 ^ 5 个机房（32 个机房），每个机房里可以代表 2 ^ 5 个机器（32 台机器）。\n\n4. 12bit-序列号，序列号，用来记录同毫秒内产生的不同id。\n\n- 12位（bit）可以表示的最大正整数是2^12-1=4095，即可以用0、1、2、3、....4094这4095个数字，来表示同一机器同一时间截（毫秒)内产生的4095个ID序号。\n\n由于在Java中64bit的整数是long类型，所以在Java中SnowFlake算法生成的id就是long来存储的。\n\n\n### snowflake工程实战\n\n模块名：snowflake-service-7777\n\n#### 配置文件\n\nPOM\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n  xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n  <parent>\n    <artifactId>cloud2020</artifactId>\n    <groupId>com.atguigu.springcloud</groupId>\n    <version>1.0-SNAPSHOT</version>\n  </parent>\n  <modelVersion>4.0.0</modelVersion>\n\n  <artifactId>snowflake-service-7777</artifactId>\n\n  <properties>\n    <maven.compiler.source>8</maven.compiler.source>\n    <maven.compiler.target>8</maven.compiler.target>\n  </properties>\n\n  <dependencies>\n\n    <dependency>\n      <groupId>cn.hutool</groupId>\n      <artifactId>hutool-captcha</artifactId>\n      <version>5.7.4</version>\n    </dependency>\n\n    <!--web-actuator-->\n    <dependency>\n      <groupId>org.springframework.boot</groupId>\n      <artifactId>spring-boot-starter-web</artifactId>\n    </dependency>\n    <dependency>\n      <groupId>org.springframework.boot</groupId>\n      <artifactId>spring-boot-starter-actuator</artifactId>\n    </dependency>\n\n    <dependency>\n      <groupId>org.springframework.boot</groupId>\n      <artifactId>spring-boot-starter-test</artifactId>\n      <scope>test</scope>\n    </dependency>\n\n    <dependency>\n      <groupId>org.projectlombok</groupId>\n      <artifactId>lombok</artifactId>\n      <optional>true</optional>\n    </dependency>\n\n    <dependency>\n      <groupId>org.springframework.boot</groupId>\n      <artifactId>spring-boot-devtools</artifactId>\n      <scope>runtime</scope>\n      <optional>true</optional>\n    </dependency>\n\n    <dependency>\n      <groupId>com.atguigu.springcloud</groupId>\n      <artifactId>cloudapicommons</artifactId>\n      <version>${project.version}</version>\n    </dependency>\n\n  </dependencies>\n</project>\n```\n\nApplication.yml\n\n```yaml\nserver:\n  port: 7777\n\nspring:\n  application:\n    name: snowflake-service\n```\n\n#### Tool层\n\nIdGeneratorSnowflake\n\n```java\nimport cn.hutool.core.lang.Snowflake;\nimport cn.hutool.core.net.NetUtil;\nimport cn.hutool.core.util.IdUtil;\nimport javax.annotation.PostConstruct;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.stereotype.Component;\n\n@Component\n@Slf4j\npublic class IdGeneratorSnowflake {\n  private long workId = 0;\n  private long datacenterId = 1;\n  private Snowflake snowflake = IdUtil.getSnowflake(workId, datacenterId);\n\n  @PostConstruct\n  public void init() {\n    try {\n      workId = NetUtil.ipv4ToLong(NetUtil.getLocalhostStr());\n      log.info(\"当前机器的workId：{}\", workId);\n    } catch (Exception e) {\n      log.warn(\"获取当前机器的workId失败\", e);\n      workId = NetUtil.getLocalhostStr().hashCode();\n    }\n  }\n\n  public synchronized long snowflakeId() {\n    return this.snowflake.nextId();\n  }\n\n  public synchronized long snowflakeId(long workId, long datacenterId) {\n    Snowflake snowflake = IdUtil.getSnowflake(workId, datacenterId);\n    return snowflake.nextId();\n  }\n}\n```\n\n#### Service层\n\nOrderService\n\n```java\nimport com.atguigu.springcloud.tool.IdGeneratorSnowflake;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\n\n@Service\npublic class OrderService {\n\n  @Autowired private IdGeneratorSnowflake idGeneratorSnowflake;\n\n  public String getIDBySnowFlake() {\n    ExecutorService executorService = Executors.newFixedThreadPool(5);\n    for (int i = 1; i < 20; i++) {\n      int finalI = i;\n      executorService.submit(\n          () -> {\n            System.out.println(\"序号\" + finalI + \"：\" + idGeneratorSnowflake.snowflakeId());\n          });\n    }\n    executorService.shutdown();\n    return \"hello snowflake\";\n  }\n}\n```\n\n#### Controller层\n\nOrderController\n\n```java\nimport com.atguigu.springcloud.Service.OrderService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\n@RestController\npublic class OrderController {\n\n  @Autowired private OrderService orderService;\n\n  @RequestMapping(\"/snowflake\")\n  public String index() {\n    return orderService.getIDBySnowFlake();\n  }\n}\n```\n\n#### 主启动类\n\nSnowflakeMain7777\n\n```java\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\n\n@SpringBootApplication\npublic class SnowflakeMain7777 {\n  public static void main(String[] args) {\n    SpringApplication.run(SnowflakeMain7777.class, args);\n  }\n}\n```\n\n访问地址: http://localhost:7777/snowflake\n\n最终效果如下\n\n![img](代码效果图.png)\n\n### 优点\n\n1. 毫秒数在高位，自增数在低位，整个ID是趋势自增的\n2. 不依赖第三方服务，生成ID性能高\n3. 可根据业务特性分配bit位，非常灵活\n\n### 缺点\n\n1. 依赖机器时钟，如果时钟回拨了，会出现重复ID\n2. 在单机上是递增的，但是在分布式环境中如果一个节点的时钟不对，则全局看来整体ID不一定递增\n\n### 改进的新方案\n\n1. 百度开源的分布式唯一ID生成器UidGenerator\n2. 美团开源的Leaf\n","slug":"雪花算法","published":1,"updated":"2021-11-16T02:53:51.834Z","comments":1,"photos":[],"link":"","_id":"ckw1i535f00029syr5w5zf21i","content":"<h2 id=\"分布式id方案要求\"><a class=\"markdownIt-Anchor\" href=\"#分布式id方案要求\">#</a> 分布式 ID 方案要求</h2>\n<p>当分布式环境下想要生成一个全局唯一的 ID，有哪些要求呢？</p>\n<h3 id=\"id生成规则硬性要求\"><a class=\"markdownIt-Anchor\" href=\"#id生成规则硬性要求\">#</a> ID 生成规则硬性要求</h3>\n<ol>\n<li>全局唯一</li>\n<li>趋势递增 (MySQL 的 InnoDB 使用聚簇索引，B+Tree 结构，有序主键可以保证写入性能)</li>\n<li>单调递增 (保证下一个 ID 大于上一个 ID, 例如事务版本号、IM 增量信息、排序等特殊需求)</li>\n<li>信息安全 (如果 ID 是数字递增的，恶意扒取的工作将很容易，按顺序下载指定 URL 即可。如果是订单号，竞争对手就一眼看出日成交量。因此在一些业务场景中，需要 ID 无规律)</li>\n<li>含时间戳 (方便排查问题发生的时间)</li>\n</ol>\n<h3 id=\"id生成系统可用性要求\"><a class=\"markdownIt-Anchor\" href=\"#id生成系统可用性要求\">#</a> ID 生成系统可用性要求</h3>\n<ol>\n<li>高可用 (发一个生成 ID 的请求，服务器要保证在 99.999% 情况下生成成功)</li>\n<li>低延迟 (服务器要响应够快速)</li>\n<li>高 QPS (并发 10 万个请求，服务器要顶住，且返回 10 万个分布式 ID)</li>\n</ol>\n<h2 id=\"分布式id三种方案\"><a class=\"markdownIt-Anchor\" href=\"#分布式id三种方案\">#</a> 分布式 ID 三种方案</h2>\n<h3 id=\"uuid\"><a class=\"markdownIt-Anchor\" href=\"#uuid\">#</a> UUID</h3>\n<p>使用 java 自带的 UUID 生成 8+4+4+4+12=32 位唯一 ID</p>\n<h4 id=\"优点\"><a class=\"markdownIt-Anchor\" href=\"#优点\">#</a> 优点</h4>\n<ul>\n<li>本地生成，没有网络传输消耗</li>\n</ul>\n<h4 id=\"缺点\"><a class=\"markdownIt-Anchor\" href=\"#缺点\">#</a> 缺点</h4>\n<p>无序，插入数据库性能差</p>\n<ol>\n<li>MySQL 推荐主键越短越好，UUID 固定 32 位，太长</li>\n<li>主键过长，二级索引叶子结点存储的空间占用大</li>\n<li>主键索引插入时，由于 UUID 无序，导致节点生成稀疏，创建很多不饱和的节点，大大影响索引的插入性能</li>\n</ol>\n<h3 id=\"数据库自增主键\"><a class=\"markdownIt-Anchor\" href=\"#数据库自增主键\">#</a> 数据库自增主键</h3>\n<p>使用了数据库自增主键和 MySQL 数据库的 replace into 实现</p>\n<p>replace into 代表着 尝试插入一条数据，如果表中已经有这一行数据 (根据主键或者唯一性索引判断)，则先删除数据，再插入数据</p>\n<h4 id=\"模拟实战\"><a class=\"markdownIt-Anchor\" href=\"#模拟实战\">#</a> 模拟实战</h4>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> t_test(</span><br><span class=\"line\">id <span class=\"type\">BIGINT</span>(<span class=\"number\">20</span>) UNSIGNED <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span> AUTO_INCREMENT <span class=\"keyword\">PRIMARY</span> KEY,</span><br><span class=\"line\">stub <span class=\"type\">CHAR</span>(<span class=\"number\">1</span>) <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span> <span class=\"keyword\">DEFAULT</span> <span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\"><span class=\"keyword\">UNIQUE</span> KEY stub (stub)</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> t_test;</span><br><span class=\"line\"></span><br><span class=\"line\">replace <span class=\"keyword\">into</span> t_test (stub) <span class=\"keyword\">values</span> (<span class=\"string\">&#x27;b&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">select</span> last_insert_id();</span><br></pre></td></tr></table></figure>\n<h4 id=\"缺点-2\"><a class=\"markdownIt-Anchor\" href=\"#缺点-2\">#</a> 缺点</h4>\n<ul>\n<li>每次生成 ID，都需要读写一次数据库，对于高 QPS 无法满足</li>\n<li>分库后，两个数据库需要划分增长步长，各自有限制</li>\n<li>ID 数字顺序递增，不安全</li>\n<li>不适合分布式 ID</li>\n</ul>\n<h3 id=\"基于redis生成全局id策略\"><a class=\"markdownIt-Anchor\" href=\"#基于redis生成全局id策略\">#</a> 基于 Redis 生成全局 id 策略</h3>\n<p>因为 Redis 是单线程的天生保证原子性，可以使用原子操作 INCR 和 INCRBY 来实现</p>\n<h4 id=\"实现\"><a class=\"markdownIt-Anchor\" href=\"#实现\">#</a> 实现</h4>\n<p>Redis 集群：5 台 Redis，各自初始值位 1，2，3，4，5，增长步长为 5</p>\n<p>第一台：1、6、11、16…</p>\n<p>第二台：2、7、12、17…</p>\n<p>第三台：3、8、13、18…</p>\n<p>第四台：4、9、14、19…</p>\n<h4 id=\"缺点-3\"><a class=\"markdownIt-Anchor\" href=\"#缺点-3\">#</a> 缺点</h4>\n<ul>\n<li>架构复杂</li>\n<li>绑定 Redis</li>\n<li>单台 Redis 宕机的话，生成 ID 不连续了</li>\n</ul>\n<h2 id=\"twitter的分布式自增id算法snowflake\"><a class=\"markdownIt-Anchor\" href=\"#twitter的分布式自增id算法snowflake\">#</a> Twitter 的分布式自增 ID 算法 snowflake</h2>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3R3aXR0ZXItYXJjaGl2ZS9zbm93Zmxha2U=\">官网</span></p>\n<h4 id=\"算法原理\"><a class=\"markdownIt-Anchor\" href=\"#算法原理\">#</a> 算法原理</h4>\n<p>SnowFlake 算法生成 id 的结果是一个 64bit 大小的整数，它的结构如下图：</p>\n<p><img data-src=\"%E9%9B%AA%E8%8A%B1%E7%AE%97%E6%B3%95%E5%8E%9F%E7%90%86.png\" alt=\"img\"></p>\n<ol>\n<li>\n<p>1bit，不用，因为二进制中最高位是符号位，1 表示负数，0 表示正数。生成的 id 一般都是用整数，所以最高位固定为 0。</p>\n</li>\n<li>\n<p>41bit - 时间戳，用来记录时间戳，毫秒级。</p>\n</li>\n</ol>\n<ul>\n<li>41 位可以表示 2^41 - 1 个数字</li>\n<li>如果只用来表示正整数（计算机中正数包含 0），可以表示的数值范围是：0 至 2^41 - 1，减 1 是因为可表示的数值范围是从 0 开始算的，而不是 1。</li>\n<li>也就是说 41 位可以表示 2^41 - 1 个毫秒的值，转化成单位年则是 69 年。实际上是 1970-01-01 ～ 2039-09-07</li>\n</ul>\n<ol start=\"3\">\n<li>10bit - 工作机器 id</li>\n</ol>\n<p>用来记录工作机器 id。10 bit 里 5 个 bit 代表机房 id，5 个 bit 代表机器 id。意思就是最多代表 2 ^ 5 个机房（32 个机房），每个机房里可以代表 2 ^ 5 个机器（32 台机器）。</p>\n<ol start=\"4\">\n<li>12bit - 序列号，序列号，用来记录同毫秒内产生的不同 id。</li>\n</ol>\n<ul>\n<li>12 位（bit）可以表示的最大正整数是 2^12-1=4095，即可以用 0、1、2、3、…4094 这 4095 个数字，来表示同一机器同一时间截（毫秒) 内产生的 4095 个 ID 序号。</li>\n</ul>\n<p>由于在 Java 中 64bit 的整数是 long 类型，所以在 Java 中 SnowFlake 算法生成的 id 就是 long 来存储的。</p>\n<h3 id=\"snowflake工程实战\"><a class=\"markdownIt-Anchor\" href=\"#snowflake工程实战\">#</a> snowflake 工程实战</h3>\n<p>模块名：snowflake-service-7777</p>\n<h4 id=\"配置文件\"><a class=\"markdownIt-Anchor\" href=\"#配置文件\">#</a> 配置文件</h4>\n<p>POM</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">project</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>cloud2020<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.atguigu.springcloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.0-SNAPSHOT<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">modelVersion</span>&gt;</span>4.0.0<span class=\"tag\">&lt;/<span class=\"name\">modelVersion</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>snowflake-service-7777<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">maven.compiler.source</span>&gt;</span>8<span class=\"tag\">&lt;/<span class=\"name\">maven.compiler.source</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">maven.compiler.target</span>&gt;</span>8<span class=\"tag\">&lt;/<span class=\"name\">maven.compiler.target</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>cn.hutool<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>hutool-captcha<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>5.7.4<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--web-actuator--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-web<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-test<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.projectlombok<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>lombok<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">optional</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">optional</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-devtools<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>runtime<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">optional</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">optional</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.atguigu.springcloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>cloudapicommons<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;project.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">project</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>Application.yml</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">7777</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">application:</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">snowflake-service</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"tool层\"><a class=\"markdownIt-Anchor\" href=\"#tool层\">#</a> Tool 层</h4>\n<p>IdGeneratorSnowflake</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> cn.hutool.core.lang.Snowflake;</span><br><span class=\"line\"><span class=\"keyword\">import</span> cn.hutool.core.net.NetUtil;</span><br><span class=\"line\"><span class=\"keyword\">import</span> cn.hutool.core.util.IdUtil;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.annotation.PostConstruct;</span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Component;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">IdGeneratorSnowflake</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">long</span> workId = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">long</span> datacenterId = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> Snowflake snowflake = IdUtil.getSnowflake(workId, datacenterId);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@PostConstruct</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      workId = NetUtil.ipv4ToLong(NetUtil.getLocalhostStr());</span><br><span class=\"line\">      log.info(<span class=\"string\">&quot;当前机器的workId：&#123;&#125;&quot;</span>, workId);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">      log.warn(<span class=\"string\">&quot;获取当前机器的workId失败&quot;</span>, e);</span><br><span class=\"line\">      workId = NetUtil.getLocalhostStr().hashCode();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">long</span> <span class=\"title\">snowflakeId</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.snowflake.nextId();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">long</span> <span class=\"title\">snowflakeId</span><span class=\"params\">(<span class=\"keyword\">long</span> workId, <span class=\"keyword\">long</span> datacenterId)</span> </span>&#123;</span><br><span class=\"line\">    Snowflake snowflake = IdUtil.getSnowflake(workId, datacenterId);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> snowflake.nextId();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"service层\"><a class=\"markdownIt-Anchor\" href=\"#service层\">#</a> Service 层</h4>\n<p>OrderService</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> com.atguigu.springcloud.tool.IdGeneratorSnowflake;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.ExecutorService;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.Executors;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Service;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OrderService</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Autowired</span> <span class=\"keyword\">private</span> IdGeneratorSnowflake idGeneratorSnowflake;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getIDBySnowFlake</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    ExecutorService executorService = Executors.newFixedThreadPool(<span class=\"number\">5</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; <span class=\"number\">20</span>; i++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">int</span> finalI = i;</span><br><span class=\"line\">      executorService.submit(</span><br><span class=\"line\">          () -&gt; &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;序号&quot;</span> + finalI + <span class=\"string\">&quot;：&quot;</span> + idGeneratorSnowflake.snowflakeId());</span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    executorService.shutdown();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;hello snowflake&quot;</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"controller层\"><a class=\"markdownIt-Anchor\" href=\"#controller层\">#</a> Controller 层</h4>\n<p>OrderController</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> com.atguigu.springcloud.Service.OrderService;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OrderController</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Autowired</span> <span class=\"keyword\">private</span> OrderService orderService;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@RequestMapping(&quot;/snowflake&quot;)</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">index</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> orderService.getIDBySnowFlake();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"主启动类\"><a class=\"markdownIt-Anchor\" href=\"#主启动类\">#</a> 主启动类</h4>\n<p>SnowflakeMain7777</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.SpringApplication;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SnowflakeMain7777</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    SpringApplication.run(SnowflakeMain7777.class, args);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>访问地址: <span class=\"exturl\" data-url=\"aHR0cDovL2xvY2FsaG9zdDo3Nzc3L3Nub3dmbGFrZQ==\">http://localhost:7777/snowflake</span></p>\n<p>最终效果如下</p>\n<p><img data-src=\"%E4%BB%A3%E7%A0%81%E6%95%88%E6%9E%9C%E5%9B%BE.png\" alt=\"img\"></p>\n<h3 id=\"优点-2\"><a class=\"markdownIt-Anchor\" href=\"#优点-2\">#</a> 优点</h3>\n<ol>\n<li>毫秒数在高位，自增数在低位，整个 ID 是趋势自增的</li>\n<li>不依赖第三方服务，生成 ID 性能高</li>\n<li>可根据业务特性分配 bit 位，非常灵活</li>\n</ol>\n<h3 id=\"缺点-4\"><a class=\"markdownIt-Anchor\" href=\"#缺点-4\">#</a> 缺点</h3>\n<ol>\n<li>依赖机器时钟，如果时钟回拨了，会出现重复 ID</li>\n<li>在单机上是递增的，但是在分布式环境中如果一个节点的时钟不对，则全局看来整体 ID 不一定递增</li>\n</ol>\n<h3 id=\"改进的新方案\"><a class=\"markdownIt-Anchor\" href=\"#改进的新方案\">#</a> 改进的新方案</h3>\n<ol>\n<li>百度开源的分布式唯一 ID 生成器 UidGenerator</li>\n<li>美团开源的 Leaf</li>\n</ol>\n","site":{"data":{"languages":{"zh-CN":{"post":{"copyright":{"author":"本文博主"}}},"en":{"menu":{"travellings":"Travellings"}}}}},"length":6725,"excerpt":"","more":"<h2 id=\"分布式id方案要求\"><a class=\"markdownIt-Anchor\" href=\"#分布式id方案要求\">#</a> 分布式 ID 方案要求</h2>\n<p>当分布式环境下想要生成一个全局唯一的 ID，有哪些要求呢？</p>\n<h3 id=\"id生成规则硬性要求\"><a class=\"markdownIt-Anchor\" href=\"#id生成规则硬性要求\">#</a> ID 生成规则硬性要求</h3>\n<ol>\n<li>全局唯一</li>\n<li>趋势递增 (MySQL 的 InnoDB 使用聚簇索引，B+Tree 结构，有序主键可以保证写入性能)</li>\n<li>单调递增 (保证下一个 ID 大于上一个 ID, 例如事务版本号、IM 增量信息、排序等特殊需求)</li>\n<li>信息安全 (如果 ID 是数字递增的，恶意扒取的工作将很容易，按顺序下载指定 URL 即可。如果是订单号，竞争对手就一眼看出日成交量。因此在一些业务场景中，需要 ID 无规律)</li>\n<li>含时间戳 (方便排查问题发生的时间)</li>\n</ol>\n<h3 id=\"id生成系统可用性要求\"><a class=\"markdownIt-Anchor\" href=\"#id生成系统可用性要求\">#</a> ID 生成系统可用性要求</h3>\n<ol>\n<li>高可用 (发一个生成 ID 的请求，服务器要保证在 99.999% 情况下生成成功)</li>\n<li>低延迟 (服务器要响应够快速)</li>\n<li>高 QPS (并发 10 万个请求，服务器要顶住，且返回 10 万个分布式 ID)</li>\n</ol>\n<h2 id=\"分布式id三种方案\"><a class=\"markdownIt-Anchor\" href=\"#分布式id三种方案\">#</a> 分布式 ID 三种方案</h2>\n<h3 id=\"uuid\"><a class=\"markdownIt-Anchor\" href=\"#uuid\">#</a> UUID</h3>\n<p>使用 java 自带的 UUID 生成 8+4+4+4+12=32 位唯一 ID</p>\n<h4 id=\"优点\"><a class=\"markdownIt-Anchor\" href=\"#优点\">#</a> 优点</h4>\n<ul>\n<li>本地生成，没有网络传输消耗</li>\n</ul>\n<h4 id=\"缺点\"><a class=\"markdownIt-Anchor\" href=\"#缺点\">#</a> 缺点</h4>\n<p>无序，插入数据库性能差</p>\n<ol>\n<li>MySQL 推荐主键越短越好，UUID 固定 32 位，太长</li>\n<li>主键过长，二级索引叶子结点存储的空间占用大</li>\n<li>主键索引插入时，由于 UUID 无序，导致节点生成稀疏，创建很多不饱和的节点，大大影响索引的插入性能</li>\n</ol>\n<h3 id=\"数据库自增主键\"><a class=\"markdownIt-Anchor\" href=\"#数据库自增主键\">#</a> 数据库自增主键</h3>\n<p>使用了数据库自增主键和 MySQL 数据库的 replace into 实现</p>\n<p>replace into 代表着 尝试插入一条数据，如果表中已经有这一行数据 (根据主键或者唯一性索引判断)，则先删除数据，再插入数据</p>\n<h4 id=\"模拟实战\"><a class=\"markdownIt-Anchor\" href=\"#模拟实战\">#</a> 模拟实战</h4>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> t_test(</span><br><span class=\"line\">id <span class=\"type\">BIGINT</span>(<span class=\"number\">20</span>) UNSIGNED <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span> AUTO_INCREMENT <span class=\"keyword\">PRIMARY</span> KEY,</span><br><span class=\"line\">stub <span class=\"type\">CHAR</span>(<span class=\"number\">1</span>) <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span> <span class=\"keyword\">DEFAULT</span> <span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\"><span class=\"keyword\">UNIQUE</span> KEY stub (stub)</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> t_test;</span><br><span class=\"line\"></span><br><span class=\"line\">replace <span class=\"keyword\">into</span> t_test (stub) <span class=\"keyword\">values</span> (<span class=\"string\">&#x27;b&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">select</span> last_insert_id();</span><br></pre></td></tr></table></figure>\n<h4 id=\"缺点-2\"><a class=\"markdownIt-Anchor\" href=\"#缺点-2\">#</a> 缺点</h4>\n<ul>\n<li>每次生成 ID，都需要读写一次数据库，对于高 QPS 无法满足</li>\n<li>分库后，两个数据库需要划分增长步长，各自有限制</li>\n<li>ID 数字顺序递增，不安全</li>\n<li>不适合分布式 ID</li>\n</ul>\n<h3 id=\"基于redis生成全局id策略\"><a class=\"markdownIt-Anchor\" href=\"#基于redis生成全局id策略\">#</a> 基于 Redis 生成全局 id 策略</h3>\n<p>因为 Redis 是单线程的天生保证原子性，可以使用原子操作 INCR 和 INCRBY 来实现</p>\n<h4 id=\"实现\"><a class=\"markdownIt-Anchor\" href=\"#实现\">#</a> 实现</h4>\n<p>Redis 集群：5 台 Redis，各自初始值位 1，2，3，4，5，增长步长为 5</p>\n<p>第一台：1、6、11、16…</p>\n<p>第二台：2、7、12、17…</p>\n<p>第三台：3、8、13、18…</p>\n<p>第四台：4、9、14、19…</p>\n<h4 id=\"缺点-3\"><a class=\"markdownIt-Anchor\" href=\"#缺点-3\">#</a> 缺点</h4>\n<ul>\n<li>架构复杂</li>\n<li>绑定 Redis</li>\n<li>单台 Redis 宕机的话，生成 ID 不连续了</li>\n</ul>\n<h2 id=\"twitter的分布式自增id算法snowflake\"><a class=\"markdownIt-Anchor\" href=\"#twitter的分布式自增id算法snowflake\">#</a> Twitter 的分布式自增 ID 算法 snowflake</h2>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3R3aXR0ZXItYXJjaGl2ZS9zbm93Zmxha2U=\">官网</span></p>\n<h4 id=\"算法原理\"><a class=\"markdownIt-Anchor\" href=\"#算法原理\">#</a> 算法原理</h4>\n<p>SnowFlake 算法生成 id 的结果是一个 64bit 大小的整数，它的结构如下图：</p>\n<p><img data-src=\"%E9%9B%AA%E8%8A%B1%E7%AE%97%E6%B3%95%E5%8E%9F%E7%90%86.png\" alt=\"img\"></p>\n<ol>\n<li>\n<p>1bit，不用，因为二进制中最高位是符号位，1 表示负数，0 表示正数。生成的 id 一般都是用整数，所以最高位固定为 0。</p>\n</li>\n<li>\n<p>41bit - 时间戳，用来记录时间戳，毫秒级。</p>\n</li>\n</ol>\n<ul>\n<li>41 位可以表示 2^41 - 1 个数字</li>\n<li>如果只用来表示正整数（计算机中正数包含 0），可以表示的数值范围是：0 至 2^41 - 1，减 1 是因为可表示的数值范围是从 0 开始算的，而不是 1。</li>\n<li>也就是说 41 位可以表示 2^41 - 1 个毫秒的值，转化成单位年则是 69 年。实际上是 1970-01-01 ～ 2039-09-07</li>\n</ul>\n<ol start=\"3\">\n<li>10bit - 工作机器 id</li>\n</ol>\n<p>用来记录工作机器 id。10 bit 里 5 个 bit 代表机房 id，5 个 bit 代表机器 id。意思就是最多代表 2 ^ 5 个机房（32 个机房），每个机房里可以代表 2 ^ 5 个机器（32 台机器）。</p>\n<ol start=\"4\">\n<li>12bit - 序列号，序列号，用来记录同毫秒内产生的不同 id。</li>\n</ol>\n<ul>\n<li>12 位（bit）可以表示的最大正整数是 2^12-1=4095，即可以用 0、1、2、3、…4094 这 4095 个数字，来表示同一机器同一时间截（毫秒) 内产生的 4095 个 ID 序号。</li>\n</ul>\n<p>由于在 Java 中 64bit 的整数是 long 类型，所以在 Java 中 SnowFlake 算法生成的 id 就是 long 来存储的。</p>\n<h3 id=\"snowflake工程实战\"><a class=\"markdownIt-Anchor\" href=\"#snowflake工程实战\">#</a> snowflake 工程实战</h3>\n<p>模块名：snowflake-service-7777</p>\n<h4 id=\"配置文件\"><a class=\"markdownIt-Anchor\" href=\"#配置文件\">#</a> 配置文件</h4>\n<p>POM</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">project</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>cloud2020<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.atguigu.springcloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.0-SNAPSHOT<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">modelVersion</span>&gt;</span>4.0.0<span class=\"tag\">&lt;/<span class=\"name\">modelVersion</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>snowflake-service-7777<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">maven.compiler.source</span>&gt;</span>8<span class=\"tag\">&lt;/<span class=\"name\">maven.compiler.source</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">maven.compiler.target</span>&gt;</span>8<span class=\"tag\">&lt;/<span class=\"name\">maven.compiler.target</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>cn.hutool<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>hutool-captcha<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>5.7.4<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--web-actuator--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-web<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-test<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.projectlombok<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>lombok<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">optional</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">optional</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-devtools<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>runtime<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">optional</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">optional</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.atguigu.springcloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>cloudapicommons<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;project.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">project</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>Application.yml</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">7777</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">application:</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">snowflake-service</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"tool层\"><a class=\"markdownIt-Anchor\" href=\"#tool层\">#</a> Tool 层</h4>\n<p>IdGeneratorSnowflake</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> cn.hutool.core.lang.Snowflake;</span><br><span class=\"line\"><span class=\"keyword\">import</span> cn.hutool.core.net.NetUtil;</span><br><span class=\"line\"><span class=\"keyword\">import</span> cn.hutool.core.util.IdUtil;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.annotation.PostConstruct;</span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Component;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">IdGeneratorSnowflake</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">long</span> workId = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">long</span> datacenterId = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> Snowflake snowflake = IdUtil.getSnowflake(workId, datacenterId);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@PostConstruct</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      workId = NetUtil.ipv4ToLong(NetUtil.getLocalhostStr());</span><br><span class=\"line\">      log.info(<span class=\"string\">&quot;当前机器的workId：&#123;&#125;&quot;</span>, workId);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">      log.warn(<span class=\"string\">&quot;获取当前机器的workId失败&quot;</span>, e);</span><br><span class=\"line\">      workId = NetUtil.getLocalhostStr().hashCode();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">long</span> <span class=\"title\">snowflakeId</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.snowflake.nextId();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">long</span> <span class=\"title\">snowflakeId</span><span class=\"params\">(<span class=\"keyword\">long</span> workId, <span class=\"keyword\">long</span> datacenterId)</span> </span>&#123;</span><br><span class=\"line\">    Snowflake snowflake = IdUtil.getSnowflake(workId, datacenterId);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> snowflake.nextId();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"service层\"><a class=\"markdownIt-Anchor\" href=\"#service层\">#</a> Service 层</h4>\n<p>OrderService</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> com.atguigu.springcloud.tool.IdGeneratorSnowflake;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.ExecutorService;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.Executors;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Service;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OrderService</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Autowired</span> <span class=\"keyword\">private</span> IdGeneratorSnowflake idGeneratorSnowflake;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getIDBySnowFlake</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    ExecutorService executorService = Executors.newFixedThreadPool(<span class=\"number\">5</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; <span class=\"number\">20</span>; i++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">int</span> finalI = i;</span><br><span class=\"line\">      executorService.submit(</span><br><span class=\"line\">          () -&gt; &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;序号&quot;</span> + finalI + <span class=\"string\">&quot;：&quot;</span> + idGeneratorSnowflake.snowflakeId());</span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    executorService.shutdown();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;hello snowflake&quot;</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"controller层\"><a class=\"markdownIt-Anchor\" href=\"#controller层\">#</a> Controller 层</h4>\n<p>OrderController</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> com.atguigu.springcloud.Service.OrderService;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OrderController</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Autowired</span> <span class=\"keyword\">private</span> OrderService orderService;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@RequestMapping(&quot;/snowflake&quot;)</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">index</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> orderService.getIDBySnowFlake();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"主启动类\"><a class=\"markdownIt-Anchor\" href=\"#主启动类\">#</a> 主启动类</h4>\n<p>SnowflakeMain7777</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.SpringApplication;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SnowflakeMain7777</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    SpringApplication.run(SnowflakeMain7777.class, args);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>访问地址: <span class=\"exturl\" data-url=\"aHR0cDovL2xvY2FsaG9zdDo3Nzc3L3Nub3dmbGFrZQ==\">http://localhost:7777/snowflake</span></p>\n<p>最终效果如下</p>\n<p><img data-src=\"%E4%BB%A3%E7%A0%81%E6%95%88%E6%9E%9C%E5%9B%BE.png\" alt=\"img\"></p>\n<h3 id=\"优点-2\"><a class=\"markdownIt-Anchor\" href=\"#优点-2\">#</a> 优点</h3>\n<ol>\n<li>毫秒数在高位，自增数在低位，整个 ID 是趋势自增的</li>\n<li>不依赖第三方服务，生成 ID 性能高</li>\n<li>可根据业务特性分配 bit 位，非常灵活</li>\n</ol>\n<h3 id=\"缺点-4\"><a class=\"markdownIt-Anchor\" href=\"#缺点-4\">#</a> 缺点</h3>\n<ol>\n<li>依赖机器时钟，如果时钟回拨了，会出现重复 ID</li>\n<li>在单机上是递增的，但是在分布式环境中如果一个节点的时钟不对，则全局看来整体 ID 不一定递增</li>\n</ol>\n<h3 id=\"改进的新方案\"><a class=\"markdownIt-Anchor\" href=\"#改进的新方案\">#</a> 改进的新方案</h3>\n<ol>\n<li>百度开源的分布式唯一 ID 生成器 UidGenerator</li>\n<li>美团开源的 Leaf</li>\n</ol>\n"},{"layout":"shoka","title":"Seata笔记","date":"2021-11-03T03:34:39.000Z","_content":"\n## 分布式事务问题\n\n分布式前\n\n- 单机单库没这个问题\n\n- 从 1:1 -> 1:N -> N:N\n  \n  单体应用被拆分成微服务应用，原来的三个模块被拆分成三个独立的应用，分别使用三个独立的数据源，业务操作需要调用三个服务来完成。此时每个服务内部的数据一致性由本地事务来保证， 但是全局的数据一致性问题没法保证。\n  \n  ![img](seata架构.png)\n\n一句话：一次业务操作需要跨多个数据源或需要跨多个系统进行远程调用，就会产生分布式事务问题。\n\n## Seata简介\n\n### 是什么？\n\nSeata 是一款开源的分布式事务解决方案，致力于提供高性能和简单易用的分布式事务服务。Seata 将为用户提供了 AT、TCC、SAGA 和 XA 事务模式，为用户打造一站式的分布式解决方案。\n\n[官方地址](http://seata.io/zh-cn/index.html)\n\n### 1 XID+3 组件模型\n\n##### TC (Transaction Coordinator) - 事务协调者\n\n维护全局和分支事务的状态，驱动全局事务提交或回滚。\n\n##### TM (Transaction Manager) - 事务管理器\n\n定义全局事务的范围：开始全局事务、提交或回滚全局事务。\n\n##### RM (Resource Manager) - 资源管理器\n\n管理分支事务处理的资源，与TC交谈以注册分支事务和报告分支事务的状态，并驱动分支事务提交或回滚。\n\n##### XID(Transaction ID) - 全局事务ID\n\n### 处理过程\n\n1. TM 向 TC 申请开启一个全局事务，全局事务创建成功并生成一个全局唯一的 XID； \n2. XID 在微服务调用链路的上下文中传播； \n3. RM 向 TC 注册分支事务，将其纳入 XID 对应全局事务的管辖； \n4. TM 向 TC 发起针对 XID 的全局提交或回滚决议； \n5. TC 调度 XID 下管辖的全部分支事务完成提交或回滚请求。\n\n![img](seata模型流程.png)\n\n## Seata实战\n\n### 安装Seata server\n\n下载地址：https://github.com/seata/seata/releases\n\n下载版本 - 1.4.2\n\n将seata-server-1.4.2.tar.gz解压到指定目录并修改 conf 目录下的 file.conf 配置文件\n\n将原始 file.conf 文件备份成 file.conf.bak\n\n#### 修改Seata配置文件内容\n\nstore模块：修改mode为db模式，并增加数据库的相关配置\n\n```yaml\nstore {\n  ## store mode: file、db、redis\n  mode = \"db\"\n  ## rsa decryption public key\n  publicKey = \"\"\n  ## file store property\n  file {\n    ## store location dir\n    dir = \"sessionStore\"\n    # branch session size , if exceeded first try compress lockkey, still exceeded throws exceptions\n    maxBranchSessionSize = 16384\n    # globe session size , if exceeded throws exceptions\n    maxGlobalSessionSize = 512\n    # file buffer size , if exceeded allocate new buffer\n    fileWriteBufferCacheSize = 16384\n    # when recover batch read size\n    sessionReloadReadSize = 100\n    # async, sync\n    flushDiskMode = async\n  }\n\n    ## database store property\n  db {\n    ## the implement of javax.sql.DataSource, such as DruidDataSource(druid)/BasicDataSource(dbcp)/HikariDataSource(hikari) etc.\n    datasource = \"dbcp\"\n    ## mysql/oracle/postgresql/h2/oceanbase etc.\n    dbType = \"mysql\"\n    driverClassName = \"com.mysql.cj.jdbc.Driver\"\n    ## if using mysql to store the data, recommend add rewriteBatchedStatements=true in jdbc connection param\n    url = \"jdbc:mysql://127.0.0.1:3306/seata?rewriteBatchedStatements=true\"\n    user = \"root\"\n    password = \"123456\"\n    minConn = 5\n    maxConn = 100\n    globalTable = \"global_table\"\n    branchTable = \"branch_table\"\n    lockTable = \"lock_table\"\n    queryLimit = 100\n    maxWait = 5000\n  }\n}\n```\n\n### 建立Seata数据库\n\nmysql数据库新建库 seata，在 seata 库里建表\n\n```sql\n-- the table to store GlobalSession data\ndrop table if exists `global_table`;\ncreate table `global_table` (\n  `xid` varchar(128)  not null,\n  `transaction_id` bigint,\n  `status` tinyint not null,\n  `application_id` varchar(32),\n  `transaction_service_group` varchar(32),\n  `transaction_name` varchar(128),\n  `timeout` int,\n  `begin_time` bigint,\n  `application_data` varchar(2000),\n  `gmt_create` datetime,\n  `gmt_modified` datetime,\n  primary key (`xid`),\n  key `idx_gmt_modified_status` (`gmt_modified`, `status`),\n  key `idx_transaction_id` (`transaction_id`)\n);\n\n-- the table to store BranchSession data\ndrop table if exists `branch_table`;\ncreate table `branch_table` (\n  `branch_id` bigint not null,\n  `xid` varchar(128) not null,\n  `transaction_id` bigint ,\n  `resource_group_id` varchar(32),\n  `resource_id` varchar(256) ,\n  `lock_key` varchar(128) ,\n  `branch_type` varchar(8) ,\n  `status` tinyint,\n  `client_id` varchar(64),\n  `application_data` varchar(2000),\n  `gmt_create` datetime,\n  `gmt_modified` datetime,\n  primary key (`branch_id`),\n  key `idx_xid` (`xid`)\n);\n\n-- the table to store lock data\ndrop table if exists `lock_table`;\ncreate table `lock_table` (\n  `row_key` varchar(128) not null,\n  `xid` varchar(96),\n  `transaction_id` long ,\n  `branch_id` long,\n  `resource_id` varchar(256) ,\n  `table_name` varchar(32) ,\n  `pk` varchar(36) ,\n  `gmt_create` datetime ,\n  `gmt_modified` datetime,\n  primary key(`row_key`)\n);\n```\n\n### 连接Nacos\n\n修改conf 目录下的 registry.conf 配置文件\n\n```yaml\nregistry {\n  # file 、nacos 、eureka、redis、zk、consul、etcd3、sofa\n  # 设置注册中心为nacos\n  type = \"nacos\"\n\n  nacos {\n    ## 设置nacos服务地址\n    serverAddr = \"localhost:8848\"\n    namespace = \"\"\n    cluster = \"default\"\n  }\n}\n```\n\n### 建立Seata业务数据库\n\n#### 业务流程\n\n浏览器模拟用户下单操作：\n\n1. 调用订单服务增加订单记录\n2. 调用库存服务减少相应库存\n3. 调用账号服务减少账号存款\n4. 调用订单服务调整订单状态为已支付\n\n#### 业务数据库\n\n- seata_order：存储订单的数据库\n- seata_storage：存储库存的数据库\n- seata_account：存储账户信息的数据库\n\n#### 建库语句\n\n```sql\nCREATE DATABASE seata_order;\nCREATE DATABASE seata_storage;\nCREATE DATABASE seata_account;\n```\n\n#### 建表语句\n\nseata_order 库下建 t_order 表\n\n```sql\nCREATE TABLE t_order (\n    `id` BIGINT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,\n    `user_id` BIGINT(11) DEFAULT NULL COMMENT '用户id',\n    `product_id` BIGINT(11) DEFAULT NULL COMMENT '产品id',\n    `count` INT(11) DEFAULT NULL COMMENT '数量',\n    `money` DECIMAL(11,0) DEFAULT NULL COMMENT'金额',\n    `status` INT(1) DEFAULT NULL COMMENT '订单状态: 0:创建中; 1:已完结'\n) ENGINE=INNODB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8;\n```\n\nseata_storage 库下建 t_storage 表\n\n```sql\nCREATE TABLE t_storage (\n        `id` BIGINT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,\n        `product_id` BIGINT(11) DEFAULT NULL COMMENT '产品id',\n        `total` INT(11) DEFAULT NULL COMMENT '总库存',\n        `used` INT(11) DEFAULT NULL COMMENT '已用库存',\n        `residue` INT(11) DEFAULT NULL COMMENT '剩余库存'\n) ENGINE=INNODB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8;\n\n# 初始化一条产品的库存记录\nINSERT INTO seata_storage.t_storage(`id`, `product_id`, `total`, `used`, `residue`)\nVALUES ('1', '1', '100', '0','100');\n```\n\nseata_account 库下建 t_account 表\n\n```sql\nCREATE TABLE t_account(\n    `id` BIGINT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY COMMENT 'id',\n    `user_id` BIGINT(11) DEFAULT NULL COMMENT '用户id',\n    `total` DECIMAL(10,0) DEFAULT NULL COMMENT '总额度',\n    `used` DECIMAL(10,0) DEFAULT NULL COMMENT '已用余额',\n    `residue` DECIMAL(10,0) DEFAULT '0' COMMENT '剩余可用额度'\n) ENGINE=INNODB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8;\n\n# 初始化一条用户记录\nINSERT INTO seata_account.t_account(`id`, `user_id`, `total`, `used`, `residue`)\nVALUES ('1', '1', '1000', '0', '1000');\n```\n\nseata_order、seata_storage、seata_account库下建各自的回滚日志表\n\n```sql\ndrop table `undo_log`;\nCREATE TABLE `undo_log` (\n  `id` bigint(20) NOT NULL AUTO_INCREMENT,\n  `branch_id` bigint(20) NOT NULL,\n  `xid` varchar(100) NOT NULL,\n  `context` varchar(128) NOT NULL,\n  `rollback_info` longblob NOT NULL,\n  `log_status` int(11) NOT NULL,\n  `log_created` datetime NOT NULL,\n  `log_modified` datetime NOT NULL,\n  `ext` varchar(100) DEFAULT NULL,\n  PRIMARY KEY (`id`),\n  UNIQUE KEY `ux_undo_log` (`xid`,`branch_id`)\n) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8;\n```\n\n### Order-Module 模块搭建\n\n模块名：seata-order-service2001\n\n职责：提供订单服务，下订单 -> 减库存 -> 扣余额 -> 改订单状态\n\n#### 配置部分\n\nPOM\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n  xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n  <parent>\n    <artifactId>cloud2020</artifactId>\n    <groupId>com.atguigu.springcloud</groupId>\n    <version>1.0-SNAPSHOT</version>\n  </parent>\n  <modelVersion>4.0.0</modelVersion>\n\n  <artifactId>seata-order-service2001</artifactId>\n\n  <properties>\n    <maven.compiler.source>8</maven.compiler.source>\n    <maven.compiler.target>8</maven.compiler.target>\n  </properties>\n\n  <dependencies>\n\n    <!--nacos-->\n    <dependency>\n      <groupId>com.alibaba.cloud</groupId>\n      <artifactId>spring-cloud-starter-alibaba-nacos-discovery</artifactId>\n    </dependency>\n\n    <!--seata-->\n    <dependency>\n      <groupId>com.alibaba.cloud</groupId>\n      <artifactId>spring-cloud-starter-alibaba-seata</artifactId>\n      <exclusions>\n        <exclusion>\n          <artifactId>seata-all</artifactId>\n          <groupId>io.seata</groupId>\n        </exclusion>\n      </exclusions>\n    </dependency>\n    <dependency>\n      <groupId>io.seata</groupId>\n      <artifactId>seata-all</artifactId>\n      <version>0.9.0</version>\n    </dependency>\n\n    <!--feign-->\n    <dependency>\n      <groupId>org.springframework.cloud</groupId>\n      <artifactId>spring-cloud-starter-openfeign</artifactId>\n    </dependency>\n\n    <!--web-actuator-->\n    <dependency>\n      <groupId>org.springframework.boot</groupId>\n      <artifactId>spring-boot-starter-web</artifactId>\n    </dependency>\n    <dependency>\n      <groupId>org.springframework.boot</groupId>\n      <artifactId>spring-boot-starter-actuator</artifactId>\n    </dependency>\n\n    <!--mysql-druid-->\n    <dependency>\n      <groupId>mysql</groupId>\n      <artifactId>mysql-connector-java</artifactId>\n<!--      <version>5.1.37</version>-->\n    </dependency>\n\n    <dependency>\n      <groupId>com.alibaba</groupId>\n      <artifactId>druid-spring-boot-starter</artifactId>\n      <version>1.1.10</version>\n    </dependency>\n\n    <dependency>\n      <groupId>org.mybatis.spring.boot</groupId>\n      <artifactId>mybatis-spring-boot-starter</artifactId>\n      <version>2.0.0</version>\n    </dependency>\n\n    <dependency>\n      <groupId>org.springframework.boot</groupId>\n      <artifactId>spring-boot-starter-test</artifactId>\n      <scope>test</scope>\n    </dependency>\n\n    <dependency>\n      <groupId>org.projectlombok</groupId>\n      <artifactId>lombok</artifactId>\n      <optional>true</optional>\n    </dependency>\n\n    <dependency>\n      <groupId>com.atguigu.springcloud</groupId>\n      <artifactId>cloudapicommons</artifactId>\n      <version>${project.version}</version>\n    </dependency>\n\n  </dependencies>\n</project>\n```\n\napplication.yml\n\n```yaml\nserver:\n  port: 2001\n\nspring:\n  application:\n    name: seata-order-service\n  cloud:\n    alibaba:\n      seata:\n        #自定义事务组名称需要与 seata-server 中的对应\n        tx-service-group: fsp_tx_group\n    nacos:\n      discovery:\n        server-addr: localhost:15003\n  datasource:\n    driver-class-name: com.mysql.jdbc.Driver\n    url: jdbc:mysql://localhost:3306/seata_order\n    username: root\n    password: 123456\n\nfeign:\n  hystrix:\n    enabled: false\n\nlogging:\n  level:\n    io:\n      seata: info\n\nmybatis:\n  mapperLocations: classpath:mapper/*.xml\n```\n\nfile.conf\n\n```yaml\ntransport {\n  # tcp udt unix-domain-socket\n  type = \"TCP\"\n  #NIO NATIVE\n  server = \"NIO\"\n  #enable heartbeat\n  heartbeat = true\n  #thread factory for netty\n  thread-factory {\n    boss-thread-prefix = \"NettyBoss\"\n    worker-thread-prefix = \"NettyServerNIOWorker\"\n    server-executor-thread-prefix = \"NettyServerBizHandler\"\n    share-boss-worker = false\n    client-selector-thread-prefix = \"NettyClientSelector\"\n    client-selector-thread-size = 1\n    client-worker-thread-prefix = \"NettyClientWorkerThread\"\n    # netty boss thread size,will not be used for UDT\n    boss-thread-size = 1\n    #auto default pin or 8\n    worker-thread-size = 8\n  }\n  shutdown {\n    # when destroy server, wait seconds\n    wait = 3\n  }\n  serialization = \"seata\"\n  compressor = \"none\"\n}\n\nservice {\n\n  vgroup_mapping.fsp_tx_group = \"default\" #修改自定义事务组名称\n\n  default.grouplist = \"127.0.0.1:8091\"\n  enableDegrade = false\n  disable = false\n  max.commit.retry.timeout = \"-1\"\n  max.rollback.retry.timeout = \"-1\"\n  disableGlobalTransaction = false\n}\n\n\nclient {\n  async.commit.buffer.limit = 10000\n  lock {\n    retry.internal = 10\n    retry.times = 30\n  }\n  report.retry.count = 5\n  tm.commit.retry.count = 1\n  tm.rollback.retry.count = 1\n}\n\n## transaction log store\nstore {\n  ## store mode: file、db\n  mode = \"db\"\n\n  ## file store\n  file {\n    dir = \"sessionStore\"\n\n    # branch session size , if exceeded first try compress lockkey, still exceeded throws exceptions\n    max-branch-session-size = 16384\n    # globe session size , if exceeded throws exceptions\n    max-global-session-size = 512\n    # file buffer size , if exceeded allocate new buffer\n    file-write-buffer-cache-size = 16384\n    # when recover batch read size\n    session.reload.read_size = 100\n    # async, sync\n    flush-disk-mode = async\n  }\n\n  ## database store\n  db {\n    ## the implement of javax.sql.DataSource, such as DruidDataSource(druid)/BasicDataSource(dbcp) etc.\n    datasource = \"dbcp\"\n    ## mysql/oracle/h2/oceanbase etc.\n    db-type = \"mysql\"\n    driver-class-name = \"com.mysql.jdbc.Driver\"\n    url = \"jdbc:mysql://127.0.0.1:3306/seata\"\n    user = \"root\"\n    password = \"123456\"\n    min-conn = 1\n    max-conn = 3\n    global.table = \"global_table\"\n    branch.table = \"branch_table\"\n    lock-table = \"lock_table\"\n    query-limit = 100\n  }\n}\nlock {\n  ## the lock store mode: local、remote\n  mode = \"remote\"\n\n  local {\n    ## store locks in user's database\n  }\n\n  remote {\n    ## store locks in the seata's server\n  }\n}\nrecovery {\n  #schedule committing retry period in milliseconds\n  committing-retry-period = 1000\n  #schedule asyn committing retry period in milliseconds\n  asyn-committing-retry-period = 1000\n  #schedule rollbacking retry period in milliseconds\n  rollbacking-retry-period = 1000\n  #schedule timeout retry period in milliseconds\n  timeout-retry-period = 1000\n}\n\ntransaction {\n  undo.data.validation = true\n  undo.log.serialization = \"jackson\"\n  undo.log.save.days = 7\n  #schedule delete expired undo_log in milliseconds\n  undo.log.delete.period = 86400000\n  undo.log.table = \"undo_log\"\n}\n\n## metrics settings\nmetrics {\n  enabled = false\n  registry-type = \"compact\"\n  # multi exporters use comma divided\n  exporter-list = \"prometheus\"\n  exporter-prometheus-port = 9898\n}\n\nsupport {\n  ## spring\n  spring {\n    # auto proxy the DataSource bean\n    datasource.autoproxy = false\n  }\n}\n```\n\nregistry.conf\n\n```yaml\nregistry {\n  # file 、nacos 、eureka、redis、zk、consul、etcd3、sofa\n  type = \"nacos\"\n\n  nacos {\n    serverAddr = \"localhost:15003\"\n    namespace = \"\"\n    cluster = \"default\"\n  }\n  eureka {\n    serviceUrl = \"http://localhost:8761/eureka\"\n    application = \"default\"\n    weight = \"1\"\n  }\n  redis {\n    serverAddr = \"localhost:6379\"\n    db = \"0\"\n  }\n  zk {\n    cluster = \"default\"\n    serverAddr = \"127.0.0.1:2181\"\n    session.timeout = 6000\n    connect.timeout = 2000\n  }\n  consul {\n    cluster = \"default\"\n    serverAddr = \"127.0.0.1:8500\"\n  }\n  etcd3 {\n    cluster = \"default\"\n    serverAddr = \"http://localhost:2379\"\n  }\n  sofa {\n    serverAddr = \"127.0.0.1:9603\"\n    application = \"default\"\n    region = \"DEFAULT_ZONE\"\n    datacenter = \"DefaultDataCenter\"\n    cluster = \"default\"\n    group = \"SEATA_GROUP\"\n    addressWaitTime = \"3000\"\n  }\n  file {\n    name = \"file.conf\"\n  }\n}\n\nconfig {\n  # file、nacos 、apollo、zk、consul、etcd3\n  type = \"file\"\n\n  nacos {\n    serverAddr = \"localhost\"\n    namespace = \"\"\n  }\n  consul {\n    serverAddr = \"127.0.0.1:8500\"\n  }\n  apollo {\n    app.id = \"seata-server\"\n    apollo.meta = \"http://192.168.1.204:8801\"\n  }\n  zk {\n    serverAddr = \"127.0.0.1:2181\"\n    session.timeout = 6000\n    connect.timeout = 2000\n  }\n  etcd3 {\n    serverAddr = \"http://localhost:2379\"\n  }\n  file {\n    name = \"file.conf\"\n  }\n}\n```\n\n#### 代码部分\n\n##### 主启动\n\nSeataOrderMainApp2001\n\n```java\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration;\nimport org.springframework.cloud.client.discovery.EnableDiscoveryClient;\nimport org.springframework.cloud.openfeign.EnableFeignClients;\n\n@EnableDiscoveryClient\n@EnableFeignClients\n// 取消数据源的自动创建，而是使用自己定义的\n@SpringBootApplication(exclude = DataSourceAutoConfiguration.class)\npublic class SeataOrderMainApp2001 {\n\n  public static void main(String[] args) {\n    SpringApplication.run(SeataOrderMainApp2001.class, args);\n  }\n}\n```\n\n##### Domain层\n\nOrder\n\n```java\nimport java.math.BigDecimal;\nimport lombok.AllArgsConstructor;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\n\n@Data\n@AllArgsConstructor\n@NoArgsConstructor\npublic class Order {\n  private Long id;\n  private Long userId;\n  private Long productId;\n  private Integer count;\n  private BigDecimal money;\n  private Integer status; // 订单状态：0：创建中；1：已完结\n}\n```\n\nOrderDao\n\n```java\nimport com.atguigu.springcloud.alibaba.domain.Order;\nimport org.apache.ibatis.annotations.Mapper;\nimport org.apache.ibatis.annotations.Param;\n\n@Mapper\npublic interface OrderDao {\n  // 1 新建订单\n  void create(Order order);\n  // 2 修改订单状态，从零改为 1\n  void update(@Param(\"userId\") Long userId, @Param(\"status\") Integer status);\n}\n```\n\nOrderMapper.xml\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n  <!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\" >\n<mapper namespace=\"com.atguigu.springcloud.alibaba.dao.OrderDao\">\n  <resultMap id=\"BaseResultMap\" type=\"com.atguigu.springcloud.alibaba.domain.Order\">\n    <id column=\"id\" property=\"id\" jdbcType=\"BIGINT\"/>\n    <result column=\"user_id\" property=\"userId\" jdbcType=\"BIGINT\"/>\n    <result column=\"product_id\" property=\"productId\" jdbcType=\"BIGINT\"/>\n    <result column=\"count\" property=\"count\" jdbcType=\"INTEGER\"/>\n    <result column=\"money\" property=\"money\" jdbcType=\"DECIMAL\"/>\n    <result column=\"status\" property=\"status\" jdbcType=\"INTEGER\"/>\n  </resultMap>\n  <insert id=\"create\">\n    insert into t_order (id,user_id,product_id,count,money,status)\n    values (null,#{userId},#{productId},#{count},#{money},0);\n  </insert>\n  <update id=\"update\">\n    update t_order set status = 1\n    where user_id=#{userId} and status = #{status};\n  </update>\n</mapper>\n```\n\n##### Service层\n\nOrderService\n\n```java\nimport com.atguigu.springcloud.alibaba.domain.Order;\n\npublic interface OrderService {\n  void create(Order order);\n}\n```\n\nAccountService\n\n```java\nimport com.atguigu.springcloud.alibaba.domain.CommonResult;\nimport java.math.BigDecimal;\nimport org.springframework.cloud.openfeign.FeignClient;\nimport org.springframework.web.bind.annotation.PostMapping;\nimport org.springframework.web.bind.annotation.RequestParam;\n\n@FeignClient(value = \"seata-account-service\")\npublic interface AccountService {\n  @PostMapping(value = \"/account/decrease\")\n  CommonResult decrease(\n      @RequestParam(\"userId\") Long userId, @RequestParam(\"money\") BigDecimal money);\n}\n```\n\nStorageService\n\n```java\nimport com.atguigu.springcloud.alibaba.domain.CommonResult;\nimport org.springframework.cloud.openfeign.FeignClient;\nimport org.springframework.web.bind.annotation.PostMapping;\nimport org.springframework.web.bind.annotation.RequestParam;\n\n@FeignClient(value = \"seata-storage-service\")\npublic interface StorageService {\n  @PostMapping(value = \"/storage/decrease\")\n  CommonResult decrease(\n      @RequestParam(\"productId\") Long productId, @RequestParam(\"count\") Integer count);\n}\n```\n\nOrderServiceImpl\n\n```java\nimport com.atguigu.springcloud.alibaba.dao.OrderDao;\nimport com.atguigu.springcloud.alibaba.domain.Order;\nimport io.seata.spring.annotation.GlobalTransactional;\nimport javax.annotation.Resource;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.stereotype.Service;\n\n@Service\n@Slf4j\npublic class OrderServiceImpl implements OrderService {\n  @Resource private OrderDao orderDao;\n  @Resource private StorageService storageService;\n  @Resource private AccountService accountService;\n\n  /** 创建订单 -> 调用库存服务扣减库存 -> 调用账户服务扣减账户余额 -> 修改订单状态 简单说：下订单 -> 扣库存 -> 减余额 -> 改状态 */\n  @Override\n  public void create(Order order) {\n    log.info(\"----->开始新建订单\");\n    // 1 新建订单\n    orderDao.create(order);\n    // 2 扣减库存\n    log.info(\"----->订单微服务开始调用库存，做扣减Count\");\n    storageService.decrease(order.getProductId(), order.getCount());\n    log.info(\"----->订单微服务开始调用库存，做扣减end\");\n    // 3 扣减账户\n    log.info(\"----->订单微服务开始调用账户，做扣减Money\");\n    accountService.decrease(order.getUserId(), order.getMoney());\n    log.info(\"----->订单微服务开始调用账户，做扣减end\");\n    // 4 修改订单状态，从零到 1,1 代表已经完成\n    log.info(\"----->修改订单状态开始\");\n    orderDao.update(order.getUserId(), 0);\n    log.info(\"----->修改订单状态结束\");\n    log.info(\"----->下订单结束了，O(∩_∩)O哈哈~\");\n  }\n}\n```\n\n##### Config层\n\nDataSourceProxyConfig\n\n```java\nimport com.alibaba.druid.pool.DruidDataSource;\nimport io.seata.rm.datasource.DataSourceProxy;\nimport javax.sql.DataSource;\nimport org.apache.ibatis.session.SqlSessionFactory;\nimport org.mybatis.spring.SqlSessionFactoryBean;\nimport org.mybatis.spring.transaction.SpringManagedTransactionFactory;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.boot.context.properties.ConfigurationProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.core.io.support.PathMatchingResourcePatternResolver;\n/** 使用 Seata 对数据源进行代理 */\n@Configuration\npublic class DataSourceProxyConfig {\n  @Value(\"${mybatis.mapperLocations}\")\n  private String mapperLocations;\n\n  @Bean\n  @ConfigurationProperties(prefix = \"spring.datasource\")\n  public DataSource druidDataSource() {\n    return new DruidDataSource();\n  }\n\n  @Bean\n  public DataSourceProxy dataSourceProxy(DataSource dataSource) {\n    return new DataSourceProxy(dataSource);\n  }\n\n  @Bean\n  public SqlSessionFactory sqlSessionFactoryBean(DataSourceProxy dataSourceProxy) throws Exception {\n    SqlSessionFactoryBean sqlSessionFactoryBean = new SqlSessionFactoryBean();\n    sqlSessionFactoryBean.setDataSource(dataSourceProxy);\n    sqlSessionFactoryBean.setMapperLocations(\n        new PathMatchingResourcePatternResolver().getResources(mapperLocations));\n    sqlSessionFactoryBean.setTransactionFactory(new SpringManagedTransactionFactory());\n    return sqlSessionFactoryBean.getObject();\n  }\n}\n```\n\nMyBatisConfig\n\n```java\nimport org.mybatis.spring.annotation.MapperScan;\nimport org.springframework.context.annotation.Configuration;\n\n@Configuration\n@MapperScan({\"com.atguigu.springcloud.alibaba.dao\"})\npublic class MyBatisConfig {}\n```\n\n##### Controller层\n\nOrderController\n\n```java\nimport com.atguigu.springcloud.alibaba.domain.CommonResult;\nimport com.atguigu.springcloud.alibaba.domain.Order;\nimport com.atguigu.springcloud.alibaba.service.OrderService;\nimport javax.annotation.Resource;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\n@RestController\npublic class OrderController {\n  @Resource private OrderService orderService;\n\n  @GetMapping(\"/order/create\")\n  public CommonResult create(Order order) {\n    orderService.create(order);\n    return new CommonResult(200, \"订单创建成功\");\n  }\n}\n```\n\n### Storage-Module 模块搭建\n\n模块名：seata-Storage-service2002 \n\n职责：提供库存服务\n\n#### 配置部分\n\nPOM\n\n（与 seata-order-service2001 模块大致相同）\n\napplication.yml\n\n```yaml\nserver:\n  port: 2002\n\nspring:\n  application:\n    name: seata-storage-service\n  cloud:\n    alibaba:\n      seata:\n        #自定义事务组名称需要与 seata-server 中的对应\n        tx-service-group: fsp_tx_group\n    nacos:\n      discovery:\n        server-addr: localhost:15003\n  datasource:\n    driver-class-name: com.mysql.jdbc.Driver\n    url: jdbc:mysql://localhost:3306/seata_storage\n    username: root\n    password: 123456\n\nfeign:\n  hystrix:\n    enabled: false\n\nlogging:\n  level:\n    io:\n      seata: info\n\nmybatis:\n  mapperLocations: classpath:mapper/*.xml\n```\n\nfile.conf\n\n（与 seata-order-service2001 模块大致相同）\n\nregistry.conf\n\n（与 seata-order-service2001 模块大致相同）\n\n#### 代码部分\n\n##### 主启动\n\nSeataStorageMainApp2002\n\n```java\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration;\nimport org.springframework.cloud.client.discovery.EnableDiscoveryClient;\nimport org.springframework.cloud.openfeign.EnableFeignClients;\n\n@EnableDiscoveryClient\n@EnableFeignClients\n// 取消数据源的自动创建，而是使用自己定义的\n@SpringBootApplication(exclude = DataSourceAutoConfiguration.class)\npublic class SeataStorageMainApp2002 {\n\n  public static void main(String[] args) {\n    SpringApplication.run(SeataStorageMainApp2002.class, args);\n  }\n}\n```\n\n##### Domain层\n\nStorage\n\n```java\nimport lombok.Data;\n\n@Data\npublic class Storage {\n\n  private Long id;\n\n  /** 产品 id */\n  private Long productId;\n\n  /** 总库存 */\n  private Integer total;\n\n  /** 已用库存 */\n  private Integer used;\n\n  /** 剩余库存 */\n  private Integer residue;\n}\n```\n\nStorageDao\n\n```java\nimport org.apache.ibatis.annotations.Mapper;\nimport org.apache.ibatis.annotations.Param;\n\n@Mapper\npublic interface StorageDao {\n  // 扣减库存\n  void decrease(@Param(\"productId\") Long productId, @Param(\"count\") Integer count);\n}\n```\n\nStorageMapper.xml\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n  <!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\" >\n<mapper namespace=\"com.atguigu.springcloud.alibaba.dao.StorageDao\">\n  <resultMap id=\"BaseResultMap\" type=\"com.atguigu.springcloud.alibaba.domain.Storage\">\n    <id column=\"id\" property=\"id\" jdbcType=\"BIGINT\"/>\n    <result column=\"product_id\" property=\"productId\" jdbcType=\"BIGINT\"/>\n    <result column=\"total\" property=\"total\" jdbcType=\"INTEGER\"/>\n    <result column=\"used\" property=\"used\" jdbcType=\"INTEGER\"/>\n    <result column=\"residue\" property=\"residue\" jdbcType=\"INTEGER\"/>\n  </resultMap>\n  <update id=\"decrease\">\n    UPDATE\n    t_storage\n    SET\n    used = used + #{count},residue = residue - #{count}\n    WHERE\n    product_id = #{productId}\n  </update>\n</mapper>\n```\n\n##### Service层\n\nStorageService\n\n```java\npublic interface StorageService {\n  /** 扣减库存 */\n  void decrease(Long productId, Integer count);\n}\n```\n\nStorageServiceImpl\n\n```java\nimport com.atguigu.springcloud.alibaba.dao.StorageDao;\nimport javax.annotation.Resource;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.stereotype.Service;\n\n@Service\npublic class StorageServiceImpl implements StorageService {\n  private static final Logger LOGGER = LoggerFactory.getLogger(StorageServiceImpl.class);\n  @Resource private StorageDao storageDao;\n  /** 扣减库存 */\n  @Override\n  public void decrease(Long productId, Integer count) {\n    LOGGER.info(\"------->storage-service中扣减库存开始\");\n    storageDao.decrease(productId, count);\n    LOGGER.info(\"------->storage-service中扣减库存结束\");\n  }\n}\n```\n\n##### Config层\n\n（与 seata-order-service2001 模块大致相同）\n\n##### Controller层\n\nStorageController\n\n```java\nimport com.atguigu.springcloud.alibaba.domain.CommonResult;\nimport com.atguigu.springcloud.alibaba.service.StorageService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\n@RestController\npublic class StorageController {\n\n  @Autowired private StorageService storageService;\n\n  /** 扣减库存 */\n  @RequestMapping(\"/storage/decrease\")\n  public CommonResult decrease(Long productId, Integer count) {\n    storageService.decrease(productId, count);\n    return new CommonResult(200, \"扣减库存成功！\");\n  }\n}\n```\n\n### Account-Module 模块搭建\n\n模块名：seata-Account-service2003 \n\n职责：提供账号服务\n\n#### 配置部分\n\nPOM\n\n（与 seata-order-service2001 模块大致相同）\n\napplication.yml\n\n```yaml\nserver:\n  port: 2003\n\nspring:\n  application:\n    name: seata-account-service\n  cloud:\n    alibaba:\n      seata:\n        #自定义事务组名称需要与 seata-server 中的对应\n        tx-service-group: fsp_tx_group\n    nacos:\n      discovery:\n        server-addr: localhost:15003\n  datasource:\n    driver-class-name: com.mysql.jdbc.Driver\n    url: jdbc:mysql://localhost:3306/seata_account\n    username: root\n    password: 123456\n\nfeign:\n  hystrix:\n    enabled: false\n\nlogging:\n  level:\n    io:\n      seata: info\n\nmybatis:\n  mapperLocations: classpath:mapper/*.xml\n```\n\nfile.conf\n\n（与 seata-order-service2001 模块大致相同）\n\nregistry.conf\n\n（与 seata-order-service2001 模块大致相同）\n\n#### 代码部分\n\n##### 主启动\n\nSeataAccountMainApp2003\n\n```java\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration;\nimport org.springframework.cloud.client.discovery.EnableDiscoveryClient;\nimport org.springframework.cloud.openfeign.EnableFeignClients;\n\n@EnableDiscoveryClient\n@EnableFeignClients\n// 取消数据源的自动创建，而是使用自己定义的\n@SpringBootApplication(exclude = DataSourceAutoConfiguration.class)\npublic class SeataAccountMainApp2003 {\n\n  public static void main(String[] args) {\n    SpringApplication.run(SeataAccountMainApp2003.class, args);\n  }\n}\n```\n\n##### Domain层\n\nAccount\n\n```java\nimport java.math.BigDecimal;\nimport lombok.AllArgsConstructor;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\n\n@Data\n@AllArgsConstructor\n@NoArgsConstructor\npublic class Account {\n\n  private Long id;\n\n  /** 用户 id */\n  private Long userId;\n\n  /** 总额度 */\n  private BigDecimal total;\n\n  /** 已用额度 */\n  private BigDecimal used;\n\n  /** 剩余额度 */\n  private BigDecimal residue;\n}\n```\n\nAccountDao\n\n```java\nimport java.math.BigDecimal;\nimport org.apache.ibatis.annotations.Mapper;\nimport org.apache.ibatis.annotations.Param;\n\n@Mapper\npublic interface AccountDao {\n  /** 扣减账户余额 */\n  void decrease(@Param(\"userId\") Long userId, @Param(\"money\") BigDecimal money);\n}\n```\n\nAccountMapper.xml\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n  <!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\" >\n<mapper namespace=\"com.atguigu.springcloud.alibaba.dao.AccountDao\">\n  <resultMap id=\"BaseResultMap\" type=\"com.atguigu.springcloud.alibaba.domain.Account\">\n    <id column=\"id\" property=\"id\" jdbcType=\"BIGINT\"/>\n    <result column=\"user_id\" property=\"userId\" jdbcType=\"BIGINT\"/>\n    <result column=\"total\" property=\"total\" jdbcType=\"DECIMAL\"/>\n    <result column=\"used\" property=\"used\" jdbcType=\"DECIMAL\"/>\n    <result column=\"residue\" property=\"residue\" jdbcType=\"DECIMAL\"/>\n  </resultMap>\n  <update id=\"decrease\">\n    UPDATE t_account\n    SET\n    residue = residue - #{money},used = used + #{money}\n    WHERE\n    user_id = #{userId};\n  </update>\n</mapper>\n```\n\n##### Service层\n\nAccountService\n\n```java\nimport java.math.BigDecimal;\nimport org.springframework.web.bind.annotation.RequestParam;\n\npublic interface AccountService {\n  /**\n   * 扣减账户余额\n   *\n   * @param userId 用户 id\n   * @param money 金额\n   */\n  void decrease(@RequestParam(\"userId\") Long userId, @RequestParam(\"money\") BigDecimal money);\n}\n```\n\nAccountServiceImpl\n\n```java\nimport com.atguigu.springcloud.alibaba.dao.AccountDao;\nimport java.math.BigDecimal;\nimport java.util.concurrent.TimeUnit;\nimport javax.annotation.Resource;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.stereotype.Service;\n/** */\n@Service\npublic class AccountServiceImpl implements AccountService {\n  private static final Logger LOGGER = LoggerFactory.getLogger(AccountServiceImpl.class);\n  @Resource AccountDao accountDao;\n\n  /** 扣减账户余额 */\n  @Override\n  public void decrease(Long userId, BigDecimal money) {\n    LOGGER.info(\"------->account-service中扣减账户余额开始\");\n    accountDao.decrease(userId, money);\n    LOGGER.info(\"------->account-service中扣减账户余额结束\");\n  }\n}\n```\n\n##### Config层\n\n（与 seata-order-service2001 模块大致相同）\n\n##### Controller层\n\nAccountController\n\n```java\nimport com.atguigu.springcloud.alibaba.domain.CommonResult;\nimport com.atguigu.springcloud.alibaba.service.AccountService;\nimport java.math.BigDecimal;\nimport javax.annotation.Resource;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\n@RestController\npublic class AccountController {\n\n  @Resource AccountService accountService;\n\n  /** 扣减账户余额 */\n  @RequestMapping(\"/account/decrease\")\n  public CommonResult decrease(Long userId, BigDecimal money) {\n    accountService.decrease(userId, money);\n    return new CommonResult(200, \"扣减账户余额成功！\");\n  }\n}\n```\n\n### @GlobalTransactional 使用\n\n正常下单\n\n```http\nhttp://localhost:2001/order/create?userld=1&productld=1&count=10&money=100\n```\n\n正常情况下，下订单后会下订单、减库存、扣余额、改订单状态\n\n异常情况下，任何一个环节出错没有对应的回退机制，会导致中间任何一项数据出现脏数据\n\n#### 模拟 AccountServiceImpl 添加超时\n\nOpenFeign 的调用默认时间是 1s 以内，所以最后会抛异常\n\n```java\n@Service\npublic class AccountServiceImpl implements AccountService {\n  private static final Logger LOGGER = LoggerFactory.getLogger(AccountServiceImpl.class);\n  @Resource AccountDao accountDao;\n\n  /** 扣减账户余额 */\n  @Override\n  public void decrease(Long userId, BigDecimal money) {\n    LOGGER.info(\"------->account-service中扣减账户余额开始\");\n    // 模拟超时异常，全局事务回滚\n    // 暂停几秒钟线程\n    try {\n      TimeUnit.SECONDS.sleep(20);\n    } catch (InterruptedException e) {\n      e.printStackTrace();\n    }\n    accountDao.decrease(userId, money);\n    LOGGER.info(\"------->account-service中扣减账户余额结束\");\n  }\n}\n```\n\n数据库情况\n\n![img](未加全局事务的数据库情况.png)\n\n故障情况\n\n- 当库存和账户金额扣减后，订单状态并没有设置为已经完成，没有从零改为 1\n- 而且由于 feign 的重试机制，账户余额还有可能被多次扣减\n\n#### @GlobalTransactional开启全局事务\n\nOrderServiceImpl\n\n```java\nimport com.atguigu.springcloud.alibaba.dao.OrderDao;\nimport com.atguigu.springcloud.alibaba.domain.Order;\nimport io.seata.spring.annotation.GlobalTransactional;\nimport javax.annotation.Resource;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.stereotype.Service;\n\n@Service\n@Slf4j\npublic class OrderServiceImpl implements OrderService {\n  @Resource private OrderDao orderDao;\n  @Resource private StorageService storageService;\n  @Resource private AccountService accountService;\n\n  /** 创建订单 -> 调用库存服务扣减库存 -> 调用账户服务扣减账户余额 -> 修改订单状态 简单说：下订单 -> 扣库存 -> 减余额 -> 改状态 */\n  @Override\n  // rollbackFor = Exception.class 表示对任意异常都进行回滚\n  @GlobalTransactional(name = \"fsp-create-order\", rollbackFor = Exception.class)\n  public void create(Order order) {\n    log.info(\"----->开始新建订单\");\n    // 1 新建订单\n    orderDao.create(order);\n    // 2 扣减库存\n    log.info(\"----->订单微服务开始调用库存，做扣减Count\");\n    storageService.decrease(order.getProductId(), order.getCount());\n    log.info(\"----->订单微服务开始调用库存，做扣减end\");\n    // 3 扣减账户\n    log.info(\"----->订单微服务开始调用账户，做扣减Money\");\n    accountService.decrease(order.getUserId(), order.getMoney());\n    log.info(\"----->订单微服务开始调用账户，做扣减end\");\n    // 4 修改订单状态，从零到 1,1 代表已经完成\n    log.info(\"----->修改订单状态开始\");\n    orderDao.update(order.getUserId(), 0);\n    log.info(\"----->修改订单状态结束\");\n    log.info(\"----->下订单结束了，O(∩_∩)O哈哈~\");\n  }\n}\n```\n\n再次模拟 AccountServiceImpl 添加超时，下单后三个数据库数据都没有改变，达到了分支事务异常，全局回滚的效果\n\n# Seata 之全局事务原理\n\n### 事务二阶段执行流程\n\n- 一阶段加载：\n  \n  解析业务sql，找到业务sql要更新的业务数据，生成 before image\n  \n  执行业务sql，更新业务数据\n  \n  业务数据更新后，保存新的业务数据为 after image ，生成行锁\n\n- 二阶段提交：\n  \n  如果全部事务顺利提交，Seata框架将  before image、after image、行锁全部删除\n\n- 二阶段回滚：\n  \n  如果需要回滚，Seata将会用 before image 生成 逆向sql 还原业务数据，但需要先检查脏写，对比数据库当前业务数据和 after image，如果一致，则没有脏写，可以回滚；如果不一致，有脏写，则需要转人工处理。\n\n![img](事务二阶段执行流程.png)\n","source":"_posts/Seata笔记.md","raw":"---\nlayout: shoka\ntitle: Seata笔记\ndate: 2021-11-03 11:34:39\ntags:\n---\n\n## 分布式事务问题\n\n分布式前\n\n- 单机单库没这个问题\n\n- 从 1:1 -> 1:N -> N:N\n  \n  单体应用被拆分成微服务应用，原来的三个模块被拆分成三个独立的应用，分别使用三个独立的数据源，业务操作需要调用三个服务来完成。此时每个服务内部的数据一致性由本地事务来保证， 但是全局的数据一致性问题没法保证。\n  \n  ![img](seata架构.png)\n\n一句话：一次业务操作需要跨多个数据源或需要跨多个系统进行远程调用，就会产生分布式事务问题。\n\n## Seata简介\n\n### 是什么？\n\nSeata 是一款开源的分布式事务解决方案，致力于提供高性能和简单易用的分布式事务服务。Seata 将为用户提供了 AT、TCC、SAGA 和 XA 事务模式，为用户打造一站式的分布式解决方案。\n\n[官方地址](http://seata.io/zh-cn/index.html)\n\n### 1 XID+3 组件模型\n\n##### TC (Transaction Coordinator) - 事务协调者\n\n维护全局和分支事务的状态，驱动全局事务提交或回滚。\n\n##### TM (Transaction Manager) - 事务管理器\n\n定义全局事务的范围：开始全局事务、提交或回滚全局事务。\n\n##### RM (Resource Manager) - 资源管理器\n\n管理分支事务处理的资源，与TC交谈以注册分支事务和报告分支事务的状态，并驱动分支事务提交或回滚。\n\n##### XID(Transaction ID) - 全局事务ID\n\n### 处理过程\n\n1. TM 向 TC 申请开启一个全局事务，全局事务创建成功并生成一个全局唯一的 XID； \n2. XID 在微服务调用链路的上下文中传播； \n3. RM 向 TC 注册分支事务，将其纳入 XID 对应全局事务的管辖； \n4. TM 向 TC 发起针对 XID 的全局提交或回滚决议； \n5. TC 调度 XID 下管辖的全部分支事务完成提交或回滚请求。\n\n![img](seata模型流程.png)\n\n## Seata实战\n\n### 安装Seata server\n\n下载地址：https://github.com/seata/seata/releases\n\n下载版本 - 1.4.2\n\n将seata-server-1.4.2.tar.gz解压到指定目录并修改 conf 目录下的 file.conf 配置文件\n\n将原始 file.conf 文件备份成 file.conf.bak\n\n#### 修改Seata配置文件内容\n\nstore模块：修改mode为db模式，并增加数据库的相关配置\n\n```yaml\nstore {\n  ## store mode: file、db、redis\n  mode = \"db\"\n  ## rsa decryption public key\n  publicKey = \"\"\n  ## file store property\n  file {\n    ## store location dir\n    dir = \"sessionStore\"\n    # branch session size , if exceeded first try compress lockkey, still exceeded throws exceptions\n    maxBranchSessionSize = 16384\n    # globe session size , if exceeded throws exceptions\n    maxGlobalSessionSize = 512\n    # file buffer size , if exceeded allocate new buffer\n    fileWriteBufferCacheSize = 16384\n    # when recover batch read size\n    sessionReloadReadSize = 100\n    # async, sync\n    flushDiskMode = async\n  }\n\n    ## database store property\n  db {\n    ## the implement of javax.sql.DataSource, such as DruidDataSource(druid)/BasicDataSource(dbcp)/HikariDataSource(hikari) etc.\n    datasource = \"dbcp\"\n    ## mysql/oracle/postgresql/h2/oceanbase etc.\n    dbType = \"mysql\"\n    driverClassName = \"com.mysql.cj.jdbc.Driver\"\n    ## if using mysql to store the data, recommend add rewriteBatchedStatements=true in jdbc connection param\n    url = \"jdbc:mysql://127.0.0.1:3306/seata?rewriteBatchedStatements=true\"\n    user = \"root\"\n    password = \"123456\"\n    minConn = 5\n    maxConn = 100\n    globalTable = \"global_table\"\n    branchTable = \"branch_table\"\n    lockTable = \"lock_table\"\n    queryLimit = 100\n    maxWait = 5000\n  }\n}\n```\n\n### 建立Seata数据库\n\nmysql数据库新建库 seata，在 seata 库里建表\n\n```sql\n-- the table to store GlobalSession data\ndrop table if exists `global_table`;\ncreate table `global_table` (\n  `xid` varchar(128)  not null,\n  `transaction_id` bigint,\n  `status` tinyint not null,\n  `application_id` varchar(32),\n  `transaction_service_group` varchar(32),\n  `transaction_name` varchar(128),\n  `timeout` int,\n  `begin_time` bigint,\n  `application_data` varchar(2000),\n  `gmt_create` datetime,\n  `gmt_modified` datetime,\n  primary key (`xid`),\n  key `idx_gmt_modified_status` (`gmt_modified`, `status`),\n  key `idx_transaction_id` (`transaction_id`)\n);\n\n-- the table to store BranchSession data\ndrop table if exists `branch_table`;\ncreate table `branch_table` (\n  `branch_id` bigint not null,\n  `xid` varchar(128) not null,\n  `transaction_id` bigint ,\n  `resource_group_id` varchar(32),\n  `resource_id` varchar(256) ,\n  `lock_key` varchar(128) ,\n  `branch_type` varchar(8) ,\n  `status` tinyint,\n  `client_id` varchar(64),\n  `application_data` varchar(2000),\n  `gmt_create` datetime,\n  `gmt_modified` datetime,\n  primary key (`branch_id`),\n  key `idx_xid` (`xid`)\n);\n\n-- the table to store lock data\ndrop table if exists `lock_table`;\ncreate table `lock_table` (\n  `row_key` varchar(128) not null,\n  `xid` varchar(96),\n  `transaction_id` long ,\n  `branch_id` long,\n  `resource_id` varchar(256) ,\n  `table_name` varchar(32) ,\n  `pk` varchar(36) ,\n  `gmt_create` datetime ,\n  `gmt_modified` datetime,\n  primary key(`row_key`)\n);\n```\n\n### 连接Nacos\n\n修改conf 目录下的 registry.conf 配置文件\n\n```yaml\nregistry {\n  # file 、nacos 、eureka、redis、zk、consul、etcd3、sofa\n  # 设置注册中心为nacos\n  type = \"nacos\"\n\n  nacos {\n    ## 设置nacos服务地址\n    serverAddr = \"localhost:8848\"\n    namespace = \"\"\n    cluster = \"default\"\n  }\n}\n```\n\n### 建立Seata业务数据库\n\n#### 业务流程\n\n浏览器模拟用户下单操作：\n\n1. 调用订单服务增加订单记录\n2. 调用库存服务减少相应库存\n3. 调用账号服务减少账号存款\n4. 调用订单服务调整订单状态为已支付\n\n#### 业务数据库\n\n- seata_order：存储订单的数据库\n- seata_storage：存储库存的数据库\n- seata_account：存储账户信息的数据库\n\n#### 建库语句\n\n```sql\nCREATE DATABASE seata_order;\nCREATE DATABASE seata_storage;\nCREATE DATABASE seata_account;\n```\n\n#### 建表语句\n\nseata_order 库下建 t_order 表\n\n```sql\nCREATE TABLE t_order (\n    `id` BIGINT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,\n    `user_id` BIGINT(11) DEFAULT NULL COMMENT '用户id',\n    `product_id` BIGINT(11) DEFAULT NULL COMMENT '产品id',\n    `count` INT(11) DEFAULT NULL COMMENT '数量',\n    `money` DECIMAL(11,0) DEFAULT NULL COMMENT'金额',\n    `status` INT(1) DEFAULT NULL COMMENT '订单状态: 0:创建中; 1:已完结'\n) ENGINE=INNODB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8;\n```\n\nseata_storage 库下建 t_storage 表\n\n```sql\nCREATE TABLE t_storage (\n        `id` BIGINT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,\n        `product_id` BIGINT(11) DEFAULT NULL COMMENT '产品id',\n        `total` INT(11) DEFAULT NULL COMMENT '总库存',\n        `used` INT(11) DEFAULT NULL COMMENT '已用库存',\n        `residue` INT(11) DEFAULT NULL COMMENT '剩余库存'\n) ENGINE=INNODB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8;\n\n# 初始化一条产品的库存记录\nINSERT INTO seata_storage.t_storage(`id`, `product_id`, `total`, `used`, `residue`)\nVALUES ('1', '1', '100', '0','100');\n```\n\nseata_account 库下建 t_account 表\n\n```sql\nCREATE TABLE t_account(\n    `id` BIGINT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY COMMENT 'id',\n    `user_id` BIGINT(11) DEFAULT NULL COMMENT '用户id',\n    `total` DECIMAL(10,0) DEFAULT NULL COMMENT '总额度',\n    `used` DECIMAL(10,0) DEFAULT NULL COMMENT '已用余额',\n    `residue` DECIMAL(10,0) DEFAULT '0' COMMENT '剩余可用额度'\n) ENGINE=INNODB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8;\n\n# 初始化一条用户记录\nINSERT INTO seata_account.t_account(`id`, `user_id`, `total`, `used`, `residue`)\nVALUES ('1', '1', '1000', '0', '1000');\n```\n\nseata_order、seata_storage、seata_account库下建各自的回滚日志表\n\n```sql\ndrop table `undo_log`;\nCREATE TABLE `undo_log` (\n  `id` bigint(20) NOT NULL AUTO_INCREMENT,\n  `branch_id` bigint(20) NOT NULL,\n  `xid` varchar(100) NOT NULL,\n  `context` varchar(128) NOT NULL,\n  `rollback_info` longblob NOT NULL,\n  `log_status` int(11) NOT NULL,\n  `log_created` datetime NOT NULL,\n  `log_modified` datetime NOT NULL,\n  `ext` varchar(100) DEFAULT NULL,\n  PRIMARY KEY (`id`),\n  UNIQUE KEY `ux_undo_log` (`xid`,`branch_id`)\n) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8;\n```\n\n### Order-Module 模块搭建\n\n模块名：seata-order-service2001\n\n职责：提供订单服务，下订单 -> 减库存 -> 扣余额 -> 改订单状态\n\n#### 配置部分\n\nPOM\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n  xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n  <parent>\n    <artifactId>cloud2020</artifactId>\n    <groupId>com.atguigu.springcloud</groupId>\n    <version>1.0-SNAPSHOT</version>\n  </parent>\n  <modelVersion>4.0.0</modelVersion>\n\n  <artifactId>seata-order-service2001</artifactId>\n\n  <properties>\n    <maven.compiler.source>8</maven.compiler.source>\n    <maven.compiler.target>8</maven.compiler.target>\n  </properties>\n\n  <dependencies>\n\n    <!--nacos-->\n    <dependency>\n      <groupId>com.alibaba.cloud</groupId>\n      <artifactId>spring-cloud-starter-alibaba-nacos-discovery</artifactId>\n    </dependency>\n\n    <!--seata-->\n    <dependency>\n      <groupId>com.alibaba.cloud</groupId>\n      <artifactId>spring-cloud-starter-alibaba-seata</artifactId>\n      <exclusions>\n        <exclusion>\n          <artifactId>seata-all</artifactId>\n          <groupId>io.seata</groupId>\n        </exclusion>\n      </exclusions>\n    </dependency>\n    <dependency>\n      <groupId>io.seata</groupId>\n      <artifactId>seata-all</artifactId>\n      <version>0.9.0</version>\n    </dependency>\n\n    <!--feign-->\n    <dependency>\n      <groupId>org.springframework.cloud</groupId>\n      <artifactId>spring-cloud-starter-openfeign</artifactId>\n    </dependency>\n\n    <!--web-actuator-->\n    <dependency>\n      <groupId>org.springframework.boot</groupId>\n      <artifactId>spring-boot-starter-web</artifactId>\n    </dependency>\n    <dependency>\n      <groupId>org.springframework.boot</groupId>\n      <artifactId>spring-boot-starter-actuator</artifactId>\n    </dependency>\n\n    <!--mysql-druid-->\n    <dependency>\n      <groupId>mysql</groupId>\n      <artifactId>mysql-connector-java</artifactId>\n<!--      <version>5.1.37</version>-->\n    </dependency>\n\n    <dependency>\n      <groupId>com.alibaba</groupId>\n      <artifactId>druid-spring-boot-starter</artifactId>\n      <version>1.1.10</version>\n    </dependency>\n\n    <dependency>\n      <groupId>org.mybatis.spring.boot</groupId>\n      <artifactId>mybatis-spring-boot-starter</artifactId>\n      <version>2.0.0</version>\n    </dependency>\n\n    <dependency>\n      <groupId>org.springframework.boot</groupId>\n      <artifactId>spring-boot-starter-test</artifactId>\n      <scope>test</scope>\n    </dependency>\n\n    <dependency>\n      <groupId>org.projectlombok</groupId>\n      <artifactId>lombok</artifactId>\n      <optional>true</optional>\n    </dependency>\n\n    <dependency>\n      <groupId>com.atguigu.springcloud</groupId>\n      <artifactId>cloudapicommons</artifactId>\n      <version>${project.version}</version>\n    </dependency>\n\n  </dependencies>\n</project>\n```\n\napplication.yml\n\n```yaml\nserver:\n  port: 2001\n\nspring:\n  application:\n    name: seata-order-service\n  cloud:\n    alibaba:\n      seata:\n        #自定义事务组名称需要与 seata-server 中的对应\n        tx-service-group: fsp_tx_group\n    nacos:\n      discovery:\n        server-addr: localhost:15003\n  datasource:\n    driver-class-name: com.mysql.jdbc.Driver\n    url: jdbc:mysql://localhost:3306/seata_order\n    username: root\n    password: 123456\n\nfeign:\n  hystrix:\n    enabled: false\n\nlogging:\n  level:\n    io:\n      seata: info\n\nmybatis:\n  mapperLocations: classpath:mapper/*.xml\n```\n\nfile.conf\n\n```yaml\ntransport {\n  # tcp udt unix-domain-socket\n  type = \"TCP\"\n  #NIO NATIVE\n  server = \"NIO\"\n  #enable heartbeat\n  heartbeat = true\n  #thread factory for netty\n  thread-factory {\n    boss-thread-prefix = \"NettyBoss\"\n    worker-thread-prefix = \"NettyServerNIOWorker\"\n    server-executor-thread-prefix = \"NettyServerBizHandler\"\n    share-boss-worker = false\n    client-selector-thread-prefix = \"NettyClientSelector\"\n    client-selector-thread-size = 1\n    client-worker-thread-prefix = \"NettyClientWorkerThread\"\n    # netty boss thread size,will not be used for UDT\n    boss-thread-size = 1\n    #auto default pin or 8\n    worker-thread-size = 8\n  }\n  shutdown {\n    # when destroy server, wait seconds\n    wait = 3\n  }\n  serialization = \"seata\"\n  compressor = \"none\"\n}\n\nservice {\n\n  vgroup_mapping.fsp_tx_group = \"default\" #修改自定义事务组名称\n\n  default.grouplist = \"127.0.0.1:8091\"\n  enableDegrade = false\n  disable = false\n  max.commit.retry.timeout = \"-1\"\n  max.rollback.retry.timeout = \"-1\"\n  disableGlobalTransaction = false\n}\n\n\nclient {\n  async.commit.buffer.limit = 10000\n  lock {\n    retry.internal = 10\n    retry.times = 30\n  }\n  report.retry.count = 5\n  tm.commit.retry.count = 1\n  tm.rollback.retry.count = 1\n}\n\n## transaction log store\nstore {\n  ## store mode: file、db\n  mode = \"db\"\n\n  ## file store\n  file {\n    dir = \"sessionStore\"\n\n    # branch session size , if exceeded first try compress lockkey, still exceeded throws exceptions\n    max-branch-session-size = 16384\n    # globe session size , if exceeded throws exceptions\n    max-global-session-size = 512\n    # file buffer size , if exceeded allocate new buffer\n    file-write-buffer-cache-size = 16384\n    # when recover batch read size\n    session.reload.read_size = 100\n    # async, sync\n    flush-disk-mode = async\n  }\n\n  ## database store\n  db {\n    ## the implement of javax.sql.DataSource, such as DruidDataSource(druid)/BasicDataSource(dbcp) etc.\n    datasource = \"dbcp\"\n    ## mysql/oracle/h2/oceanbase etc.\n    db-type = \"mysql\"\n    driver-class-name = \"com.mysql.jdbc.Driver\"\n    url = \"jdbc:mysql://127.0.0.1:3306/seata\"\n    user = \"root\"\n    password = \"123456\"\n    min-conn = 1\n    max-conn = 3\n    global.table = \"global_table\"\n    branch.table = \"branch_table\"\n    lock-table = \"lock_table\"\n    query-limit = 100\n  }\n}\nlock {\n  ## the lock store mode: local、remote\n  mode = \"remote\"\n\n  local {\n    ## store locks in user's database\n  }\n\n  remote {\n    ## store locks in the seata's server\n  }\n}\nrecovery {\n  #schedule committing retry period in milliseconds\n  committing-retry-period = 1000\n  #schedule asyn committing retry period in milliseconds\n  asyn-committing-retry-period = 1000\n  #schedule rollbacking retry period in milliseconds\n  rollbacking-retry-period = 1000\n  #schedule timeout retry period in milliseconds\n  timeout-retry-period = 1000\n}\n\ntransaction {\n  undo.data.validation = true\n  undo.log.serialization = \"jackson\"\n  undo.log.save.days = 7\n  #schedule delete expired undo_log in milliseconds\n  undo.log.delete.period = 86400000\n  undo.log.table = \"undo_log\"\n}\n\n## metrics settings\nmetrics {\n  enabled = false\n  registry-type = \"compact\"\n  # multi exporters use comma divided\n  exporter-list = \"prometheus\"\n  exporter-prometheus-port = 9898\n}\n\nsupport {\n  ## spring\n  spring {\n    # auto proxy the DataSource bean\n    datasource.autoproxy = false\n  }\n}\n```\n\nregistry.conf\n\n```yaml\nregistry {\n  # file 、nacos 、eureka、redis、zk、consul、etcd3、sofa\n  type = \"nacos\"\n\n  nacos {\n    serverAddr = \"localhost:15003\"\n    namespace = \"\"\n    cluster = \"default\"\n  }\n  eureka {\n    serviceUrl = \"http://localhost:8761/eureka\"\n    application = \"default\"\n    weight = \"1\"\n  }\n  redis {\n    serverAddr = \"localhost:6379\"\n    db = \"0\"\n  }\n  zk {\n    cluster = \"default\"\n    serverAddr = \"127.0.0.1:2181\"\n    session.timeout = 6000\n    connect.timeout = 2000\n  }\n  consul {\n    cluster = \"default\"\n    serverAddr = \"127.0.0.1:8500\"\n  }\n  etcd3 {\n    cluster = \"default\"\n    serverAddr = \"http://localhost:2379\"\n  }\n  sofa {\n    serverAddr = \"127.0.0.1:9603\"\n    application = \"default\"\n    region = \"DEFAULT_ZONE\"\n    datacenter = \"DefaultDataCenter\"\n    cluster = \"default\"\n    group = \"SEATA_GROUP\"\n    addressWaitTime = \"3000\"\n  }\n  file {\n    name = \"file.conf\"\n  }\n}\n\nconfig {\n  # file、nacos 、apollo、zk、consul、etcd3\n  type = \"file\"\n\n  nacos {\n    serverAddr = \"localhost\"\n    namespace = \"\"\n  }\n  consul {\n    serverAddr = \"127.0.0.1:8500\"\n  }\n  apollo {\n    app.id = \"seata-server\"\n    apollo.meta = \"http://192.168.1.204:8801\"\n  }\n  zk {\n    serverAddr = \"127.0.0.1:2181\"\n    session.timeout = 6000\n    connect.timeout = 2000\n  }\n  etcd3 {\n    serverAddr = \"http://localhost:2379\"\n  }\n  file {\n    name = \"file.conf\"\n  }\n}\n```\n\n#### 代码部分\n\n##### 主启动\n\nSeataOrderMainApp2001\n\n```java\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration;\nimport org.springframework.cloud.client.discovery.EnableDiscoveryClient;\nimport org.springframework.cloud.openfeign.EnableFeignClients;\n\n@EnableDiscoveryClient\n@EnableFeignClients\n// 取消数据源的自动创建，而是使用自己定义的\n@SpringBootApplication(exclude = DataSourceAutoConfiguration.class)\npublic class SeataOrderMainApp2001 {\n\n  public static void main(String[] args) {\n    SpringApplication.run(SeataOrderMainApp2001.class, args);\n  }\n}\n```\n\n##### Domain层\n\nOrder\n\n```java\nimport java.math.BigDecimal;\nimport lombok.AllArgsConstructor;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\n\n@Data\n@AllArgsConstructor\n@NoArgsConstructor\npublic class Order {\n  private Long id;\n  private Long userId;\n  private Long productId;\n  private Integer count;\n  private BigDecimal money;\n  private Integer status; // 订单状态：0：创建中；1：已完结\n}\n```\n\nOrderDao\n\n```java\nimport com.atguigu.springcloud.alibaba.domain.Order;\nimport org.apache.ibatis.annotations.Mapper;\nimport org.apache.ibatis.annotations.Param;\n\n@Mapper\npublic interface OrderDao {\n  // 1 新建订单\n  void create(Order order);\n  // 2 修改订单状态，从零改为 1\n  void update(@Param(\"userId\") Long userId, @Param(\"status\") Integer status);\n}\n```\n\nOrderMapper.xml\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n  <!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\" >\n<mapper namespace=\"com.atguigu.springcloud.alibaba.dao.OrderDao\">\n  <resultMap id=\"BaseResultMap\" type=\"com.atguigu.springcloud.alibaba.domain.Order\">\n    <id column=\"id\" property=\"id\" jdbcType=\"BIGINT\"/>\n    <result column=\"user_id\" property=\"userId\" jdbcType=\"BIGINT\"/>\n    <result column=\"product_id\" property=\"productId\" jdbcType=\"BIGINT\"/>\n    <result column=\"count\" property=\"count\" jdbcType=\"INTEGER\"/>\n    <result column=\"money\" property=\"money\" jdbcType=\"DECIMAL\"/>\n    <result column=\"status\" property=\"status\" jdbcType=\"INTEGER\"/>\n  </resultMap>\n  <insert id=\"create\">\n    insert into t_order (id,user_id,product_id,count,money,status)\n    values (null,#{userId},#{productId},#{count},#{money},0);\n  </insert>\n  <update id=\"update\">\n    update t_order set status = 1\n    where user_id=#{userId} and status = #{status};\n  </update>\n</mapper>\n```\n\n##### Service层\n\nOrderService\n\n```java\nimport com.atguigu.springcloud.alibaba.domain.Order;\n\npublic interface OrderService {\n  void create(Order order);\n}\n```\n\nAccountService\n\n```java\nimport com.atguigu.springcloud.alibaba.domain.CommonResult;\nimport java.math.BigDecimal;\nimport org.springframework.cloud.openfeign.FeignClient;\nimport org.springframework.web.bind.annotation.PostMapping;\nimport org.springframework.web.bind.annotation.RequestParam;\n\n@FeignClient(value = \"seata-account-service\")\npublic interface AccountService {\n  @PostMapping(value = \"/account/decrease\")\n  CommonResult decrease(\n      @RequestParam(\"userId\") Long userId, @RequestParam(\"money\") BigDecimal money);\n}\n```\n\nStorageService\n\n```java\nimport com.atguigu.springcloud.alibaba.domain.CommonResult;\nimport org.springframework.cloud.openfeign.FeignClient;\nimport org.springframework.web.bind.annotation.PostMapping;\nimport org.springframework.web.bind.annotation.RequestParam;\n\n@FeignClient(value = \"seata-storage-service\")\npublic interface StorageService {\n  @PostMapping(value = \"/storage/decrease\")\n  CommonResult decrease(\n      @RequestParam(\"productId\") Long productId, @RequestParam(\"count\") Integer count);\n}\n```\n\nOrderServiceImpl\n\n```java\nimport com.atguigu.springcloud.alibaba.dao.OrderDao;\nimport com.atguigu.springcloud.alibaba.domain.Order;\nimport io.seata.spring.annotation.GlobalTransactional;\nimport javax.annotation.Resource;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.stereotype.Service;\n\n@Service\n@Slf4j\npublic class OrderServiceImpl implements OrderService {\n  @Resource private OrderDao orderDao;\n  @Resource private StorageService storageService;\n  @Resource private AccountService accountService;\n\n  /** 创建订单 -> 调用库存服务扣减库存 -> 调用账户服务扣减账户余额 -> 修改订单状态 简单说：下订单 -> 扣库存 -> 减余额 -> 改状态 */\n  @Override\n  public void create(Order order) {\n    log.info(\"----->开始新建订单\");\n    // 1 新建订单\n    orderDao.create(order);\n    // 2 扣减库存\n    log.info(\"----->订单微服务开始调用库存，做扣减Count\");\n    storageService.decrease(order.getProductId(), order.getCount());\n    log.info(\"----->订单微服务开始调用库存，做扣减end\");\n    // 3 扣减账户\n    log.info(\"----->订单微服务开始调用账户，做扣减Money\");\n    accountService.decrease(order.getUserId(), order.getMoney());\n    log.info(\"----->订单微服务开始调用账户，做扣减end\");\n    // 4 修改订单状态，从零到 1,1 代表已经完成\n    log.info(\"----->修改订单状态开始\");\n    orderDao.update(order.getUserId(), 0);\n    log.info(\"----->修改订单状态结束\");\n    log.info(\"----->下订单结束了，O(∩_∩)O哈哈~\");\n  }\n}\n```\n\n##### Config层\n\nDataSourceProxyConfig\n\n```java\nimport com.alibaba.druid.pool.DruidDataSource;\nimport io.seata.rm.datasource.DataSourceProxy;\nimport javax.sql.DataSource;\nimport org.apache.ibatis.session.SqlSessionFactory;\nimport org.mybatis.spring.SqlSessionFactoryBean;\nimport org.mybatis.spring.transaction.SpringManagedTransactionFactory;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.boot.context.properties.ConfigurationProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.core.io.support.PathMatchingResourcePatternResolver;\n/** 使用 Seata 对数据源进行代理 */\n@Configuration\npublic class DataSourceProxyConfig {\n  @Value(\"${mybatis.mapperLocations}\")\n  private String mapperLocations;\n\n  @Bean\n  @ConfigurationProperties(prefix = \"spring.datasource\")\n  public DataSource druidDataSource() {\n    return new DruidDataSource();\n  }\n\n  @Bean\n  public DataSourceProxy dataSourceProxy(DataSource dataSource) {\n    return new DataSourceProxy(dataSource);\n  }\n\n  @Bean\n  public SqlSessionFactory sqlSessionFactoryBean(DataSourceProxy dataSourceProxy) throws Exception {\n    SqlSessionFactoryBean sqlSessionFactoryBean = new SqlSessionFactoryBean();\n    sqlSessionFactoryBean.setDataSource(dataSourceProxy);\n    sqlSessionFactoryBean.setMapperLocations(\n        new PathMatchingResourcePatternResolver().getResources(mapperLocations));\n    sqlSessionFactoryBean.setTransactionFactory(new SpringManagedTransactionFactory());\n    return sqlSessionFactoryBean.getObject();\n  }\n}\n```\n\nMyBatisConfig\n\n```java\nimport org.mybatis.spring.annotation.MapperScan;\nimport org.springframework.context.annotation.Configuration;\n\n@Configuration\n@MapperScan({\"com.atguigu.springcloud.alibaba.dao\"})\npublic class MyBatisConfig {}\n```\n\n##### Controller层\n\nOrderController\n\n```java\nimport com.atguigu.springcloud.alibaba.domain.CommonResult;\nimport com.atguigu.springcloud.alibaba.domain.Order;\nimport com.atguigu.springcloud.alibaba.service.OrderService;\nimport javax.annotation.Resource;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\n@RestController\npublic class OrderController {\n  @Resource private OrderService orderService;\n\n  @GetMapping(\"/order/create\")\n  public CommonResult create(Order order) {\n    orderService.create(order);\n    return new CommonResult(200, \"订单创建成功\");\n  }\n}\n```\n\n### Storage-Module 模块搭建\n\n模块名：seata-Storage-service2002 \n\n职责：提供库存服务\n\n#### 配置部分\n\nPOM\n\n（与 seata-order-service2001 模块大致相同）\n\napplication.yml\n\n```yaml\nserver:\n  port: 2002\n\nspring:\n  application:\n    name: seata-storage-service\n  cloud:\n    alibaba:\n      seata:\n        #自定义事务组名称需要与 seata-server 中的对应\n        tx-service-group: fsp_tx_group\n    nacos:\n      discovery:\n        server-addr: localhost:15003\n  datasource:\n    driver-class-name: com.mysql.jdbc.Driver\n    url: jdbc:mysql://localhost:3306/seata_storage\n    username: root\n    password: 123456\n\nfeign:\n  hystrix:\n    enabled: false\n\nlogging:\n  level:\n    io:\n      seata: info\n\nmybatis:\n  mapperLocations: classpath:mapper/*.xml\n```\n\nfile.conf\n\n（与 seata-order-service2001 模块大致相同）\n\nregistry.conf\n\n（与 seata-order-service2001 模块大致相同）\n\n#### 代码部分\n\n##### 主启动\n\nSeataStorageMainApp2002\n\n```java\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration;\nimport org.springframework.cloud.client.discovery.EnableDiscoveryClient;\nimport org.springframework.cloud.openfeign.EnableFeignClients;\n\n@EnableDiscoveryClient\n@EnableFeignClients\n// 取消数据源的自动创建，而是使用自己定义的\n@SpringBootApplication(exclude = DataSourceAutoConfiguration.class)\npublic class SeataStorageMainApp2002 {\n\n  public static void main(String[] args) {\n    SpringApplication.run(SeataStorageMainApp2002.class, args);\n  }\n}\n```\n\n##### Domain层\n\nStorage\n\n```java\nimport lombok.Data;\n\n@Data\npublic class Storage {\n\n  private Long id;\n\n  /** 产品 id */\n  private Long productId;\n\n  /** 总库存 */\n  private Integer total;\n\n  /** 已用库存 */\n  private Integer used;\n\n  /** 剩余库存 */\n  private Integer residue;\n}\n```\n\nStorageDao\n\n```java\nimport org.apache.ibatis.annotations.Mapper;\nimport org.apache.ibatis.annotations.Param;\n\n@Mapper\npublic interface StorageDao {\n  // 扣减库存\n  void decrease(@Param(\"productId\") Long productId, @Param(\"count\") Integer count);\n}\n```\n\nStorageMapper.xml\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n  <!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\" >\n<mapper namespace=\"com.atguigu.springcloud.alibaba.dao.StorageDao\">\n  <resultMap id=\"BaseResultMap\" type=\"com.atguigu.springcloud.alibaba.domain.Storage\">\n    <id column=\"id\" property=\"id\" jdbcType=\"BIGINT\"/>\n    <result column=\"product_id\" property=\"productId\" jdbcType=\"BIGINT\"/>\n    <result column=\"total\" property=\"total\" jdbcType=\"INTEGER\"/>\n    <result column=\"used\" property=\"used\" jdbcType=\"INTEGER\"/>\n    <result column=\"residue\" property=\"residue\" jdbcType=\"INTEGER\"/>\n  </resultMap>\n  <update id=\"decrease\">\n    UPDATE\n    t_storage\n    SET\n    used = used + #{count},residue = residue - #{count}\n    WHERE\n    product_id = #{productId}\n  </update>\n</mapper>\n```\n\n##### Service层\n\nStorageService\n\n```java\npublic interface StorageService {\n  /** 扣减库存 */\n  void decrease(Long productId, Integer count);\n}\n```\n\nStorageServiceImpl\n\n```java\nimport com.atguigu.springcloud.alibaba.dao.StorageDao;\nimport javax.annotation.Resource;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.stereotype.Service;\n\n@Service\npublic class StorageServiceImpl implements StorageService {\n  private static final Logger LOGGER = LoggerFactory.getLogger(StorageServiceImpl.class);\n  @Resource private StorageDao storageDao;\n  /** 扣减库存 */\n  @Override\n  public void decrease(Long productId, Integer count) {\n    LOGGER.info(\"------->storage-service中扣减库存开始\");\n    storageDao.decrease(productId, count);\n    LOGGER.info(\"------->storage-service中扣减库存结束\");\n  }\n}\n```\n\n##### Config层\n\n（与 seata-order-service2001 模块大致相同）\n\n##### Controller层\n\nStorageController\n\n```java\nimport com.atguigu.springcloud.alibaba.domain.CommonResult;\nimport com.atguigu.springcloud.alibaba.service.StorageService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\n@RestController\npublic class StorageController {\n\n  @Autowired private StorageService storageService;\n\n  /** 扣减库存 */\n  @RequestMapping(\"/storage/decrease\")\n  public CommonResult decrease(Long productId, Integer count) {\n    storageService.decrease(productId, count);\n    return new CommonResult(200, \"扣减库存成功！\");\n  }\n}\n```\n\n### Account-Module 模块搭建\n\n模块名：seata-Account-service2003 \n\n职责：提供账号服务\n\n#### 配置部分\n\nPOM\n\n（与 seata-order-service2001 模块大致相同）\n\napplication.yml\n\n```yaml\nserver:\n  port: 2003\n\nspring:\n  application:\n    name: seata-account-service\n  cloud:\n    alibaba:\n      seata:\n        #自定义事务组名称需要与 seata-server 中的对应\n        tx-service-group: fsp_tx_group\n    nacos:\n      discovery:\n        server-addr: localhost:15003\n  datasource:\n    driver-class-name: com.mysql.jdbc.Driver\n    url: jdbc:mysql://localhost:3306/seata_account\n    username: root\n    password: 123456\n\nfeign:\n  hystrix:\n    enabled: false\n\nlogging:\n  level:\n    io:\n      seata: info\n\nmybatis:\n  mapperLocations: classpath:mapper/*.xml\n```\n\nfile.conf\n\n（与 seata-order-service2001 模块大致相同）\n\nregistry.conf\n\n（与 seata-order-service2001 模块大致相同）\n\n#### 代码部分\n\n##### 主启动\n\nSeataAccountMainApp2003\n\n```java\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration;\nimport org.springframework.cloud.client.discovery.EnableDiscoveryClient;\nimport org.springframework.cloud.openfeign.EnableFeignClients;\n\n@EnableDiscoveryClient\n@EnableFeignClients\n// 取消数据源的自动创建，而是使用自己定义的\n@SpringBootApplication(exclude = DataSourceAutoConfiguration.class)\npublic class SeataAccountMainApp2003 {\n\n  public static void main(String[] args) {\n    SpringApplication.run(SeataAccountMainApp2003.class, args);\n  }\n}\n```\n\n##### Domain层\n\nAccount\n\n```java\nimport java.math.BigDecimal;\nimport lombok.AllArgsConstructor;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\n\n@Data\n@AllArgsConstructor\n@NoArgsConstructor\npublic class Account {\n\n  private Long id;\n\n  /** 用户 id */\n  private Long userId;\n\n  /** 总额度 */\n  private BigDecimal total;\n\n  /** 已用额度 */\n  private BigDecimal used;\n\n  /** 剩余额度 */\n  private BigDecimal residue;\n}\n```\n\nAccountDao\n\n```java\nimport java.math.BigDecimal;\nimport org.apache.ibatis.annotations.Mapper;\nimport org.apache.ibatis.annotations.Param;\n\n@Mapper\npublic interface AccountDao {\n  /** 扣减账户余额 */\n  void decrease(@Param(\"userId\") Long userId, @Param(\"money\") BigDecimal money);\n}\n```\n\nAccountMapper.xml\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n  <!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\" >\n<mapper namespace=\"com.atguigu.springcloud.alibaba.dao.AccountDao\">\n  <resultMap id=\"BaseResultMap\" type=\"com.atguigu.springcloud.alibaba.domain.Account\">\n    <id column=\"id\" property=\"id\" jdbcType=\"BIGINT\"/>\n    <result column=\"user_id\" property=\"userId\" jdbcType=\"BIGINT\"/>\n    <result column=\"total\" property=\"total\" jdbcType=\"DECIMAL\"/>\n    <result column=\"used\" property=\"used\" jdbcType=\"DECIMAL\"/>\n    <result column=\"residue\" property=\"residue\" jdbcType=\"DECIMAL\"/>\n  </resultMap>\n  <update id=\"decrease\">\n    UPDATE t_account\n    SET\n    residue = residue - #{money},used = used + #{money}\n    WHERE\n    user_id = #{userId};\n  </update>\n</mapper>\n```\n\n##### Service层\n\nAccountService\n\n```java\nimport java.math.BigDecimal;\nimport org.springframework.web.bind.annotation.RequestParam;\n\npublic interface AccountService {\n  /**\n   * 扣减账户余额\n   *\n   * @param userId 用户 id\n   * @param money 金额\n   */\n  void decrease(@RequestParam(\"userId\") Long userId, @RequestParam(\"money\") BigDecimal money);\n}\n```\n\nAccountServiceImpl\n\n```java\nimport com.atguigu.springcloud.alibaba.dao.AccountDao;\nimport java.math.BigDecimal;\nimport java.util.concurrent.TimeUnit;\nimport javax.annotation.Resource;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.stereotype.Service;\n/** */\n@Service\npublic class AccountServiceImpl implements AccountService {\n  private static final Logger LOGGER = LoggerFactory.getLogger(AccountServiceImpl.class);\n  @Resource AccountDao accountDao;\n\n  /** 扣减账户余额 */\n  @Override\n  public void decrease(Long userId, BigDecimal money) {\n    LOGGER.info(\"------->account-service中扣减账户余额开始\");\n    accountDao.decrease(userId, money);\n    LOGGER.info(\"------->account-service中扣减账户余额结束\");\n  }\n}\n```\n\n##### Config层\n\n（与 seata-order-service2001 模块大致相同）\n\n##### Controller层\n\nAccountController\n\n```java\nimport com.atguigu.springcloud.alibaba.domain.CommonResult;\nimport com.atguigu.springcloud.alibaba.service.AccountService;\nimport java.math.BigDecimal;\nimport javax.annotation.Resource;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\n@RestController\npublic class AccountController {\n\n  @Resource AccountService accountService;\n\n  /** 扣减账户余额 */\n  @RequestMapping(\"/account/decrease\")\n  public CommonResult decrease(Long userId, BigDecimal money) {\n    accountService.decrease(userId, money);\n    return new CommonResult(200, \"扣减账户余额成功！\");\n  }\n}\n```\n\n### @GlobalTransactional 使用\n\n正常下单\n\n```http\nhttp://localhost:2001/order/create?userld=1&productld=1&count=10&money=100\n```\n\n正常情况下，下订单后会下订单、减库存、扣余额、改订单状态\n\n异常情况下，任何一个环节出错没有对应的回退机制，会导致中间任何一项数据出现脏数据\n\n#### 模拟 AccountServiceImpl 添加超时\n\nOpenFeign 的调用默认时间是 1s 以内，所以最后会抛异常\n\n```java\n@Service\npublic class AccountServiceImpl implements AccountService {\n  private static final Logger LOGGER = LoggerFactory.getLogger(AccountServiceImpl.class);\n  @Resource AccountDao accountDao;\n\n  /** 扣减账户余额 */\n  @Override\n  public void decrease(Long userId, BigDecimal money) {\n    LOGGER.info(\"------->account-service中扣减账户余额开始\");\n    // 模拟超时异常，全局事务回滚\n    // 暂停几秒钟线程\n    try {\n      TimeUnit.SECONDS.sleep(20);\n    } catch (InterruptedException e) {\n      e.printStackTrace();\n    }\n    accountDao.decrease(userId, money);\n    LOGGER.info(\"------->account-service中扣减账户余额结束\");\n  }\n}\n```\n\n数据库情况\n\n![img](未加全局事务的数据库情况.png)\n\n故障情况\n\n- 当库存和账户金额扣减后，订单状态并没有设置为已经完成，没有从零改为 1\n- 而且由于 feign 的重试机制，账户余额还有可能被多次扣减\n\n#### @GlobalTransactional开启全局事务\n\nOrderServiceImpl\n\n```java\nimport com.atguigu.springcloud.alibaba.dao.OrderDao;\nimport com.atguigu.springcloud.alibaba.domain.Order;\nimport io.seata.spring.annotation.GlobalTransactional;\nimport javax.annotation.Resource;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.stereotype.Service;\n\n@Service\n@Slf4j\npublic class OrderServiceImpl implements OrderService {\n  @Resource private OrderDao orderDao;\n  @Resource private StorageService storageService;\n  @Resource private AccountService accountService;\n\n  /** 创建订单 -> 调用库存服务扣减库存 -> 调用账户服务扣减账户余额 -> 修改订单状态 简单说：下订单 -> 扣库存 -> 减余额 -> 改状态 */\n  @Override\n  // rollbackFor = Exception.class 表示对任意异常都进行回滚\n  @GlobalTransactional(name = \"fsp-create-order\", rollbackFor = Exception.class)\n  public void create(Order order) {\n    log.info(\"----->开始新建订单\");\n    // 1 新建订单\n    orderDao.create(order);\n    // 2 扣减库存\n    log.info(\"----->订单微服务开始调用库存，做扣减Count\");\n    storageService.decrease(order.getProductId(), order.getCount());\n    log.info(\"----->订单微服务开始调用库存，做扣减end\");\n    // 3 扣减账户\n    log.info(\"----->订单微服务开始调用账户，做扣减Money\");\n    accountService.decrease(order.getUserId(), order.getMoney());\n    log.info(\"----->订单微服务开始调用账户，做扣减end\");\n    // 4 修改订单状态，从零到 1,1 代表已经完成\n    log.info(\"----->修改订单状态开始\");\n    orderDao.update(order.getUserId(), 0);\n    log.info(\"----->修改订单状态结束\");\n    log.info(\"----->下订单结束了，O(∩_∩)O哈哈~\");\n  }\n}\n```\n\n再次模拟 AccountServiceImpl 添加超时，下单后三个数据库数据都没有改变，达到了分支事务异常，全局回滚的效果\n\n# Seata 之全局事务原理\n\n### 事务二阶段执行流程\n\n- 一阶段加载：\n  \n  解析业务sql，找到业务sql要更新的业务数据，生成 before image\n  \n  执行业务sql，更新业务数据\n  \n  业务数据更新后，保存新的业务数据为 after image ，生成行锁\n\n- 二阶段提交：\n  \n  如果全部事务顺利提交，Seata框架将  before image、after image、行锁全部删除\n\n- 二阶段回滚：\n  \n  如果需要回滚，Seata将会用 before image 生成 逆向sql 还原业务数据，但需要先检查脏写，对比数据库当前业务数据和 after image，如果一致，则没有脏写，可以回滚；如果不一致，有脏写，则需要转人工处理。\n\n![img](事务二阶段执行流程.png)\n","slug":"Seata笔记","published":1,"updated":"2021-11-20T10:06:25.312Z","_id":"ckw1i535g00039syrbo2act8w","comments":1,"photos":[],"link":"","content":"<h2 id=\"分布式事务问题\"><a class=\"markdownIt-Anchor\" href=\"#分布式事务问题\">#</a> 分布式事务问题</h2>\n<p>分布式前</p>\n<ul>\n<li>\n<p>单机单库没这个问题</p>\n</li>\n<li>\n<p>从 1:1 -&gt; 1:N -&gt; N:N</p>\n<p>单体应用被拆分成微服务应用，原来的三个模块被拆分成三个独立的应用，分别使用三个独立的数据源，业务操作需要调用三个服务来完成。此时每个服务内部的数据一致性由本地事务来保证， 但是全局的数据一致性问题没法保证。</p>\n<p><img data-src=\"seata%E6%9E%B6%E6%9E%84.png\" alt=\"img\"></p>\n</li>\n</ul>\n<p>一句话：一次业务操作需要跨多个数据源或需要跨多个系统进行远程调用，就会产生分布式事务问题。</p>\n<h2 id=\"seata简介\"><a class=\"markdownIt-Anchor\" href=\"#seata简介\">#</a> Seata 简介</h2>\n<h3 id=\"是什么\"><a class=\"markdownIt-Anchor\" href=\"#是什么\">#</a> 是什么？</h3>\n<p>Seata 是一款开源的分布式事务解决方案，致力于提供高性能和简单易用的分布式事务服务。Seata 将为用户提供了 AT、TCC、SAGA 和 XA 事务模式，为用户打造一站式的分布式解决方案。</p>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL3NlYXRhLmlvL3poLWNuL2luZGV4Lmh0bWw=\">官方地址</span></p>\n<h3 id=\"1-xid3-组件模型\"><a class=\"markdownIt-Anchor\" href=\"#1-xid3-组件模型\">#</a> 1 XID+3 组件模型</h3>\n<h5 id=\"tc-transaction-coordinator-事务协调者\"><a class=\"markdownIt-Anchor\" href=\"#tc-transaction-coordinator-事务协调者\">#</a> TC (Transaction Coordinator) - 事务协调者</h5>\n<p>维护全局和分支事务的状态，驱动全局事务提交或回滚。</p>\n<h5 id=\"tm-transaction-manager-事务管理器\"><a class=\"markdownIt-Anchor\" href=\"#tm-transaction-manager-事务管理器\">#</a> TM (Transaction Manager) - 事务管理器</h5>\n<p>定义全局事务的范围：开始全局事务、提交或回滚全局事务。</p>\n<h5 id=\"rm-resource-manager-资源管理器\"><a class=\"markdownIt-Anchor\" href=\"#rm-resource-manager-资源管理器\">#</a> RM (Resource Manager) - 资源管理器</h5>\n<p>管理分支事务处理的资源，与 TC 交谈以注册分支事务和报告分支事务的状态，并驱动分支事务提交或回滚。</p>\n<h5 id=\"xidtransaction-id-全局事务id\"><a class=\"markdownIt-Anchor\" href=\"#xidtransaction-id-全局事务id\">#</a> XID (Transaction ID) - 全局事务 ID</h5>\n<h3 id=\"处理过程\"><a class=\"markdownIt-Anchor\" href=\"#处理过程\">#</a> 处理过程</h3>\n<ol>\n<li>TM 向 TC 申请开启一个全局事务，全局事务创建成功并生成一个全局唯一的 XID；</li>\n<li>XID 在微服务调用链路的上下文中传播；</li>\n<li>RM 向 TC 注册分支事务，将其纳入 XID 对应全局事务的管辖；</li>\n<li>TM 向 TC 发起针对 XID 的全局提交或回滚决议；</li>\n<li>TC 调度 XID 下管辖的全部分支事务完成提交或回滚请求。</li>\n</ol>\n<p><img data-src=\"seata%E6%A8%A1%E5%9E%8B%E6%B5%81%E7%A8%8B.png\" alt=\"img\"></p>\n<h2 id=\"seata实战\"><a class=\"markdownIt-Anchor\" href=\"#seata实战\">#</a> Seata 实战</h2>\n<h3 id=\"安装seata-server\"><a class=\"markdownIt-Anchor\" href=\"#安装seata-server\">#</a> 安装 Seata server</h3>\n<p>下载地址：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3NlYXRhL3NlYXRhL3JlbGVhc2Vz\">https://github.com/seata/seata/releases</span></p>\n<p>下载版本 - 1.4.2</p>\n<p>将 seata-server-1.4.2.tar.gz 解压到指定目录并修改 conf 目录下的 file.conf 配置文件</p>\n<p>将原始 file.conf 文件备份成 file.conf.bak</p>\n<h4 id=\"修改seata配置文件内容\"><a class=\"markdownIt-Anchor\" href=\"#修改seata配置文件内容\">#</a> 修改 Seata 配置文件内容</h4>\n<p>store 模块：修改 mode 为 db 模式，并增加数据库的相关配置</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">store</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">## store mode: file、db、redis</span></span><br><span class=\"line\">  <span class=\"string\">mode</span> <span class=\"string\">=</span> <span class=\"string\">&quot;db&quot;</span></span><br><span class=\"line\">  <span class=\"comment\">## rsa decryption public key</span></span><br><span class=\"line\">  <span class=\"string\">publicKey</span> <span class=\"string\">=</span> <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">  <span class=\"comment\">## file store property</span></span><br><span class=\"line\">  <span class=\"string\">file</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">## store location dir</span></span><br><span class=\"line\">    <span class=\"string\">dir</span> <span class=\"string\">=</span> <span class=\"string\">&quot;sessionStore&quot;</span></span><br><span class=\"line\">    <span class=\"comment\"># branch session size , if exceeded first try compress lockkey, still exceeded throws exceptions</span></span><br><span class=\"line\">    <span class=\"string\">maxBranchSessionSize</span> <span class=\"string\">=</span> <span class=\"number\">16384</span></span><br><span class=\"line\">    <span class=\"comment\"># globe session size , if exceeded throws exceptions</span></span><br><span class=\"line\">    <span class=\"string\">maxGlobalSessionSize</span> <span class=\"string\">=</span> <span class=\"number\">512</span></span><br><span class=\"line\">    <span class=\"comment\"># file buffer size , if exceeded allocate new buffer</span></span><br><span class=\"line\">    <span class=\"string\">fileWriteBufferCacheSize</span> <span class=\"string\">=</span> <span class=\"number\">16384</span></span><br><span class=\"line\">    <span class=\"comment\"># when recover batch read size</span></span><br><span class=\"line\">    <span class=\"string\">sessionReloadReadSize</span> <span class=\"string\">=</span> <span class=\"number\">100</span></span><br><span class=\"line\">    <span class=\"comment\"># async, sync</span></span><br><span class=\"line\">    <span class=\"string\">flushDiskMode</span> <span class=\"string\">=</span> <span class=\"string\">async</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">## database store property</span></span><br><span class=\"line\">  <span class=\"string\">db</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">## the implement of javax.sql.DataSource, such as DruidDataSource(druid)/BasicDataSource(dbcp)/HikariDataSource(hikari) etc.</span></span><br><span class=\"line\">    <span class=\"string\">datasource</span> <span class=\"string\">=</span> <span class=\"string\">&quot;dbcp&quot;</span></span><br><span class=\"line\">    <span class=\"comment\">## mysql/oracle/postgresql/h2/oceanbase etc.</span></span><br><span class=\"line\">    <span class=\"string\">dbType</span> <span class=\"string\">=</span> <span class=\"string\">&quot;mysql&quot;</span></span><br><span class=\"line\">    <span class=\"string\">driverClassName</span> <span class=\"string\">=</span> <span class=\"string\">&quot;com.mysql.cj.jdbc.Driver&quot;</span></span><br><span class=\"line\">    <span class=\"comment\">## if using mysql to store the data, recommend add rewriteBatchedStatements=true in jdbc connection param</span></span><br><span class=\"line\">    <span class=\"string\">url</span> <span class=\"string\">=</span> <span class=\"string\">&quot;jdbc:mysql://127.0.0.1:3306/seata?rewriteBatchedStatements=true&quot;</span></span><br><span class=\"line\">    <span class=\"string\">user</span> <span class=\"string\">=</span> <span class=\"string\">&quot;root&quot;</span></span><br><span class=\"line\">    <span class=\"string\">password</span> <span class=\"string\">=</span> <span class=\"string\">&quot;123456&quot;</span></span><br><span class=\"line\">    <span class=\"string\">minConn</span> <span class=\"string\">=</span> <span class=\"number\">5</span></span><br><span class=\"line\">    <span class=\"string\">maxConn</span> <span class=\"string\">=</span> <span class=\"number\">100</span></span><br><span class=\"line\">    <span class=\"string\">globalTable</span> <span class=\"string\">=</span> <span class=\"string\">&quot;global_table&quot;</span></span><br><span class=\"line\">    <span class=\"string\">branchTable</span> <span class=\"string\">=</span> <span class=\"string\">&quot;branch_table&quot;</span></span><br><span class=\"line\">    <span class=\"string\">lockTable</span> <span class=\"string\">=</span> <span class=\"string\">&quot;lock_table&quot;</span></span><br><span class=\"line\">    <span class=\"string\">queryLimit</span> <span class=\"string\">=</span> <span class=\"number\">100</span></span><br><span class=\"line\">    <span class=\"string\">maxWait</span> <span class=\"string\">=</span> <span class=\"number\">5000</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"建立seata数据库\"><a class=\"markdownIt-Anchor\" href=\"#建立seata数据库\">#</a> 建立 Seata 数据库</h3>\n<p>mysql 数据库新建库 seata，在 seata 库里建表</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- the table to store GlobalSession data</span></span><br><span class=\"line\"><span class=\"keyword\">drop</span> <span class=\"keyword\">table</span> if <span class=\"keyword\">exists</span> `global_table`;</span><br><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span> `global_table` (</span><br><span class=\"line\">  `xid` <span class=\"type\">varchar</span>(<span class=\"number\">128</span>)  <span class=\"keyword\">not</span> <span class=\"keyword\">null</span>,</span><br><span class=\"line\">  `transaction_id` <span class=\"type\">bigint</span>,</span><br><span class=\"line\">  `status` tinyint <span class=\"keyword\">not</span> <span class=\"keyword\">null</span>,</span><br><span class=\"line\">  `application_id` <span class=\"type\">varchar</span>(<span class=\"number\">32</span>),</span><br><span class=\"line\">  `transaction_service_group` <span class=\"type\">varchar</span>(<span class=\"number\">32</span>),</span><br><span class=\"line\">  `transaction_name` <span class=\"type\">varchar</span>(<span class=\"number\">128</span>),</span><br><span class=\"line\">  `timeout` <span class=\"type\">int</span>,</span><br><span class=\"line\">  `begin_time` <span class=\"type\">bigint</span>,</span><br><span class=\"line\">  `application_data` <span class=\"type\">varchar</span>(<span class=\"number\">2000</span>),</span><br><span class=\"line\">  `gmt_create` datetime,</span><br><span class=\"line\">  `gmt_modified` datetime,</span><br><span class=\"line\">  <span class=\"keyword\">primary</span> key (`xid`),</span><br><span class=\"line\">  key `idx_gmt_modified_status` (`gmt_modified`, `status`),</span><br><span class=\"line\">  key `idx_transaction_id` (`transaction_id`)</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- the table to store BranchSession data</span></span><br><span class=\"line\"><span class=\"keyword\">drop</span> <span class=\"keyword\">table</span> if <span class=\"keyword\">exists</span> `branch_table`;</span><br><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span> `branch_table` (</span><br><span class=\"line\">  `branch_id` <span class=\"type\">bigint</span> <span class=\"keyword\">not</span> <span class=\"keyword\">null</span>,</span><br><span class=\"line\">  `xid` <span class=\"type\">varchar</span>(<span class=\"number\">128</span>) <span class=\"keyword\">not</span> <span class=\"keyword\">null</span>,</span><br><span class=\"line\">  `transaction_id` <span class=\"type\">bigint</span> ,</span><br><span class=\"line\">  `resource_group_id` <span class=\"type\">varchar</span>(<span class=\"number\">32</span>),</span><br><span class=\"line\">  `resource_id` <span class=\"type\">varchar</span>(<span class=\"number\">256</span>) ,</span><br><span class=\"line\">  `lock_key` <span class=\"type\">varchar</span>(<span class=\"number\">128</span>) ,</span><br><span class=\"line\">  `branch_type` <span class=\"type\">varchar</span>(<span class=\"number\">8</span>) ,</span><br><span class=\"line\">  `status` tinyint,</span><br><span class=\"line\">  `client_id` <span class=\"type\">varchar</span>(<span class=\"number\">64</span>),</span><br><span class=\"line\">  `application_data` <span class=\"type\">varchar</span>(<span class=\"number\">2000</span>),</span><br><span class=\"line\">  `gmt_create` datetime,</span><br><span class=\"line\">  `gmt_modified` datetime,</span><br><span class=\"line\">  <span class=\"keyword\">primary</span> key (`branch_id`),</span><br><span class=\"line\">  key `idx_xid` (`xid`)</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- the table to store lock data</span></span><br><span class=\"line\"><span class=\"keyword\">drop</span> <span class=\"keyword\">table</span> if <span class=\"keyword\">exists</span> `lock_table`;</span><br><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span> `lock_table` (</span><br><span class=\"line\">  `row_key` <span class=\"type\">varchar</span>(<span class=\"number\">128</span>) <span class=\"keyword\">not</span> <span class=\"keyword\">null</span>,</span><br><span class=\"line\">  `xid` <span class=\"type\">varchar</span>(<span class=\"number\">96</span>),</span><br><span class=\"line\">  `transaction_id` long ,</span><br><span class=\"line\">  `branch_id` long,</span><br><span class=\"line\">  `resource_id` <span class=\"type\">varchar</span>(<span class=\"number\">256</span>) ,</span><br><span class=\"line\">  `table_name` <span class=\"type\">varchar</span>(<span class=\"number\">32</span>) ,</span><br><span class=\"line\">  `pk` <span class=\"type\">varchar</span>(<span class=\"number\">36</span>) ,</span><br><span class=\"line\">  `gmt_create` datetime ,</span><br><span class=\"line\">  `gmt_modified` datetime,</span><br><span class=\"line\">  <span class=\"keyword\">primary</span> key(`row_key`)</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<h3 id=\"连接nacos\"><a class=\"markdownIt-Anchor\" href=\"#连接nacos\">#</a> 连接 Nacos</h3>\n<p>修改 conf 目录下的 registry.conf 配置文件</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">registry</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\"># file 、nacos 、eureka、redis、zk、consul、etcd3、sofa</span></span><br><span class=\"line\">  <span class=\"comment\"># 设置注册中心为nacos</span></span><br><span class=\"line\">  <span class=\"string\">type</span> <span class=\"string\">=</span> <span class=\"string\">&quot;nacos&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"string\">nacos</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">## 设置nacos服务地址</span></span><br><span class=\"line\">    <span class=\"string\">serverAddr</span> <span class=\"string\">=</span> <span class=\"string\">&quot;localhost:8848&quot;</span></span><br><span class=\"line\">    <span class=\"string\">namespace</span> <span class=\"string\">=</span> <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"string\">cluster</span> <span class=\"string\">=</span> <span class=\"string\">&quot;default&quot;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"建立seata业务数据库\"><a class=\"markdownIt-Anchor\" href=\"#建立seata业务数据库\">#</a> 建立 Seata 业务数据库</h3>\n<h4 id=\"业务流程\"><a class=\"markdownIt-Anchor\" href=\"#业务流程\">#</a> 业务流程</h4>\n<p>浏览器模拟用户下单操作：</p>\n<ol>\n<li>调用订单服务增加订单记录</li>\n<li>调用库存服务减少相应库存</li>\n<li>调用账号服务减少账号存款</li>\n<li>调用订单服务调整订单状态为已支付</li>\n</ol>\n<h4 id=\"业务数据库\"><a class=\"markdownIt-Anchor\" href=\"#业务数据库\">#</a> 业务数据库</h4>\n<ul>\n<li>seata_order：存储订单的数据库</li>\n<li>seata_storage：存储库存的数据库</li>\n<li>seata_account：存储账户信息的数据库</li>\n</ul>\n<h4 id=\"建库语句\"><a class=\"markdownIt-Anchor\" href=\"#建库语句\">#</a> 建库语句</h4>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> DATABASE seata_order;</span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> DATABASE seata_storage;</span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> DATABASE seata_account;</span><br></pre></td></tr></table></figure>\n<h4 id=\"建表语句\"><a class=\"markdownIt-Anchor\" href=\"#建表语句\">#</a> 建表语句</h4>\n<p>seata_order 库下建 t_order 表</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> t_order (</span><br><span class=\"line\">    `id` <span class=\"type\">BIGINT</span>(<span class=\"number\">11</span>) <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span> AUTO_INCREMENT <span class=\"keyword\">PRIMARY</span> KEY,</span><br><span class=\"line\">    `user_id` <span class=\"type\">BIGINT</span>(<span class=\"number\">11</span>) <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">NULL</span> COMMENT <span class=\"string\">&#x27;用户id&#x27;</span>,</span><br><span class=\"line\">    `product_id` <span class=\"type\">BIGINT</span>(<span class=\"number\">11</span>) <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">NULL</span> COMMENT <span class=\"string\">&#x27;产品id&#x27;</span>,</span><br><span class=\"line\">    `count` <span class=\"type\">INT</span>(<span class=\"number\">11</span>) <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">NULL</span> COMMENT <span class=\"string\">&#x27;数量&#x27;</span>,</span><br><span class=\"line\">    `money` <span class=\"type\">DECIMAL</span>(<span class=\"number\">11</span>,<span class=\"number\">0</span>) <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">NULL</span> COMMENT<span class=\"string\">&#x27;金额&#x27;</span>,</span><br><span class=\"line\">    `status` <span class=\"type\">INT</span>(<span class=\"number\">1</span>) <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">NULL</span> COMMENT <span class=\"string\">&#x27;订单状态: 0:创建中; 1:已完结&#x27;</span></span><br><span class=\"line\">) ENGINE<span class=\"operator\">=</span>INNODB AUTO_INCREMENT<span class=\"operator\">=</span><span class=\"number\">2</span> <span class=\"keyword\">DEFAULT</span> CHARSET<span class=\"operator\">=</span>utf8;</span><br></pre></td></tr></table></figure>\n<p>seata_storage 库下建 t_storage 表</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> t_storage (</span><br><span class=\"line\">        `id` <span class=\"type\">BIGINT</span>(<span class=\"number\">11</span>) <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span> AUTO_INCREMENT <span class=\"keyword\">PRIMARY</span> KEY,</span><br><span class=\"line\">        `product_id` <span class=\"type\">BIGINT</span>(<span class=\"number\">11</span>) <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">NULL</span> COMMENT <span class=\"string\">&#x27;产品id&#x27;</span>,</span><br><span class=\"line\">        `total` <span class=\"type\">INT</span>(<span class=\"number\">11</span>) <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">NULL</span> COMMENT <span class=\"string\">&#x27;总库存&#x27;</span>,</span><br><span class=\"line\">        `used` <span class=\"type\">INT</span>(<span class=\"number\">11</span>) <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">NULL</span> COMMENT <span class=\"string\">&#x27;已用库存&#x27;</span>,</span><br><span class=\"line\">        `residue` <span class=\"type\">INT</span>(<span class=\"number\">11</span>) <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">NULL</span> COMMENT <span class=\"string\">&#x27;剩余库存&#x27;</span></span><br><span class=\"line\">) ENGINE<span class=\"operator\">=</span>INNODB AUTO_INCREMENT<span class=\"operator\">=</span><span class=\"number\">2</span> <span class=\"keyword\">DEFAULT</span> CHARSET<span class=\"operator\">=</span>utf8;</span><br><span class=\"line\"></span><br><span class=\"line\"># 初始化一条产品的库存记录</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> seata_storage.t_storage(`id`, `product_id`, `total`, `used`, `residue`)</span><br><span class=\"line\"><span class=\"keyword\">VALUES</span> (<span class=\"string\">&#x27;1&#x27;</span>, <span class=\"string\">&#x27;1&#x27;</span>, <span class=\"string\">&#x27;100&#x27;</span>, <span class=\"string\">&#x27;0&#x27;</span>,<span class=\"string\">&#x27;100&#x27;</span>);</span><br></pre></td></tr></table></figure>\n<p>seata_account 库下建 t_account 表</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> t_account(</span><br><span class=\"line\">    `id` <span class=\"type\">BIGINT</span>(<span class=\"number\">11</span>) <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span> AUTO_INCREMENT <span class=\"keyword\">PRIMARY</span> KEY COMMENT <span class=\"string\">&#x27;id&#x27;</span>,</span><br><span class=\"line\">    `user_id` <span class=\"type\">BIGINT</span>(<span class=\"number\">11</span>) <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">NULL</span> COMMENT <span class=\"string\">&#x27;用户id&#x27;</span>,</span><br><span class=\"line\">    `total` <span class=\"type\">DECIMAL</span>(<span class=\"number\">10</span>,<span class=\"number\">0</span>) <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">NULL</span> COMMENT <span class=\"string\">&#x27;总额度&#x27;</span>,</span><br><span class=\"line\">    `used` <span class=\"type\">DECIMAL</span>(<span class=\"number\">10</span>,<span class=\"number\">0</span>) <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">NULL</span> COMMENT <span class=\"string\">&#x27;已用余额&#x27;</span>,</span><br><span class=\"line\">    `residue` <span class=\"type\">DECIMAL</span>(<span class=\"number\">10</span>,<span class=\"number\">0</span>) <span class=\"keyword\">DEFAULT</span> <span class=\"string\">&#x27;0&#x27;</span> COMMENT <span class=\"string\">&#x27;剩余可用额度&#x27;</span></span><br><span class=\"line\">) ENGINE<span class=\"operator\">=</span>INNODB AUTO_INCREMENT<span class=\"operator\">=</span><span class=\"number\">2</span> <span class=\"keyword\">DEFAULT</span> CHARSET<span class=\"operator\">=</span>utf8;</span><br><span class=\"line\"></span><br><span class=\"line\"># 初始化一条用户记录</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> seata_account.t_account(`id`, `user_id`, `total`, `used`, `residue`)</span><br><span class=\"line\"><span class=\"keyword\">VALUES</span> (<span class=\"string\">&#x27;1&#x27;</span>, <span class=\"string\">&#x27;1&#x27;</span>, <span class=\"string\">&#x27;1000&#x27;</span>, <span class=\"string\">&#x27;0&#x27;</span>, <span class=\"string\">&#x27;1000&#x27;</span>);</span><br></pre></td></tr></table></figure>\n<p>seata_order、seata_storage、seata_account 库下建各自的回滚日志表</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">drop</span> <span class=\"keyword\">table</span> `undo_log`;</span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> `undo_log` (</span><br><span class=\"line\">  `id` <span class=\"type\">bigint</span>(<span class=\"number\">20</span>) <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span> AUTO_INCREMENT,</span><br><span class=\"line\">  `branch_id` <span class=\"type\">bigint</span>(<span class=\"number\">20</span>) <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span>,</span><br><span class=\"line\">  `xid` <span class=\"type\">varchar</span>(<span class=\"number\">100</span>) <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span>,</span><br><span class=\"line\">  `context` <span class=\"type\">varchar</span>(<span class=\"number\">128</span>) <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span>,</span><br><span class=\"line\">  `rollback_info` longblob <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span>,</span><br><span class=\"line\">  `log_status` <span class=\"type\">int</span>(<span class=\"number\">11</span>) <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span>,</span><br><span class=\"line\">  `log_created` datetime <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span>,</span><br><span class=\"line\">  `log_modified` datetime <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span>,</span><br><span class=\"line\">  `ext` <span class=\"type\">varchar</span>(<span class=\"number\">100</span>) <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">NULL</span>,</span><br><span class=\"line\">  <span class=\"keyword\">PRIMARY</span> KEY (`id`),</span><br><span class=\"line\">  <span class=\"keyword\">UNIQUE</span> KEY `ux_undo_log` (`xid`,`branch_id`)</span><br><span class=\"line\">) ENGINE<span class=\"operator\">=</span>InnoDB AUTO_INCREMENT<span class=\"operator\">=</span><span class=\"number\">1</span> <span class=\"keyword\">DEFAULT</span> CHARSET<span class=\"operator\">=</span>utf8;</span><br></pre></td></tr></table></figure>\n<h3 id=\"order-module-模块搭建\"><a class=\"markdownIt-Anchor\" href=\"#order-module-模块搭建\">#</a> Order-Module 模块搭建</h3>\n<p>模块名：seata-order-service2001</p>\n<p>职责：提供订单服务，下订单 -&gt; 减库存 -&gt; 扣余额 -&gt; 改订单状态</p>\n<h4 id=\"配置部分\"><a class=\"markdownIt-Anchor\" href=\"#配置部分\">#</a> 配置部分</h4>\n<p>POM</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">project</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>cloud2020<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.atguigu.springcloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.0-SNAPSHOT<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">modelVersion</span>&gt;</span>4.0.0<span class=\"tag\">&lt;/<span class=\"name\">modelVersion</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>seata-order-service2001<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">maven.compiler.source</span>&gt;</span>8<span class=\"tag\">&lt;/<span class=\"name\">maven.compiler.source</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">maven.compiler.target</span>&gt;</span>8<span class=\"tag\">&lt;/<span class=\"name\">maven.compiler.target</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--nacos--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.alibaba.cloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--seata--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.alibaba.cloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-seata<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">exclusions</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">exclusion</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>seata-all<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>io.seata<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">exclusion</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">exclusions</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>io.seata<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>seata-all<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>0.9.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--feign--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.cloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--web-actuator--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-web<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--mysql-druid--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>mysql<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mysql-connector-java<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--      &lt;version&gt;5.1.37&lt;/version&gt;--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.alibaba<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>druid-spring-boot-starter<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.1.10<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.mybatis.spring.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.0.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-test<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.projectlombok<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>lombok<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">optional</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">optional</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.atguigu.springcloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>cloudapicommons<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;project.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">project</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>application.yml</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">2001</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">application:</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">seata-order-service</span></span><br><span class=\"line\">  <span class=\"attr\">cloud:</span></span><br><span class=\"line\">    <span class=\"attr\">alibaba:</span></span><br><span class=\"line\">      <span class=\"attr\">seata:</span></span><br><span class=\"line\">        <span class=\"comment\">#自定义事务组名称需要与 seata-server 中的对应</span></span><br><span class=\"line\">        <span class=\"attr\">tx-service-group:</span> <span class=\"string\">fsp_tx_group</span></span><br><span class=\"line\">    <span class=\"attr\">nacos:</span></span><br><span class=\"line\">      <span class=\"attr\">discovery:</span></span><br><span class=\"line\">        <span class=\"attr\">server-addr:</span> <span class=\"string\">localhost:15003</span></span><br><span class=\"line\">  <span class=\"attr\">datasource:</span></span><br><span class=\"line\">    <span class=\"attr\">driver-class-name:</span> <span class=\"string\">com.mysql.jdbc.Driver</span></span><br><span class=\"line\">    <span class=\"attr\">url:</span> <span class=\"string\">jdbc:mysql://localhost:3306/seata_order</span></span><br><span class=\"line\">    <span class=\"attr\">username:</span> <span class=\"string\">root</span></span><br><span class=\"line\">    <span class=\"attr\">password:</span> <span class=\"number\">123456</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">feign:</span></span><br><span class=\"line\">  <span class=\"attr\">hystrix:</span></span><br><span class=\"line\">    <span class=\"attr\">enabled:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">logging:</span></span><br><span class=\"line\">  <span class=\"attr\">level:</span></span><br><span class=\"line\">    <span class=\"attr\">io:</span></span><br><span class=\"line\">      <span class=\"attr\">seata:</span> <span class=\"string\">info</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">mybatis:</span></span><br><span class=\"line\">  <span class=\"attr\">mapperLocations:</span> <span class=\"string\">classpath:mapper/*.xml</span></span><br></pre></td></tr></table></figure>\n<p>file.conf</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">transport</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\"># tcp udt unix-domain-socket</span></span><br><span class=\"line\">  <span class=\"string\">type</span> <span class=\"string\">=</span> <span class=\"string\">&quot;TCP&quot;</span></span><br><span class=\"line\">  <span class=\"comment\">#NIO NATIVE</span></span><br><span class=\"line\">  <span class=\"string\">server</span> <span class=\"string\">=</span> <span class=\"string\">&quot;NIO&quot;</span></span><br><span class=\"line\">  <span class=\"comment\">#enable heartbeat</span></span><br><span class=\"line\">  <span class=\"string\">heartbeat</span> <span class=\"string\">=</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"comment\">#thread factory for netty</span></span><br><span class=\"line\">  <span class=\"string\">thread-factory</span> &#123;</span><br><span class=\"line\">    <span class=\"string\">boss-thread-prefix</span> <span class=\"string\">=</span> <span class=\"string\">&quot;NettyBoss&quot;</span></span><br><span class=\"line\">    <span class=\"string\">worker-thread-prefix</span> <span class=\"string\">=</span> <span class=\"string\">&quot;NettyServerNIOWorker&quot;</span></span><br><span class=\"line\">    <span class=\"string\">server-executor-thread-prefix</span> <span class=\"string\">=</span> <span class=\"string\">&quot;NettyServerBizHandler&quot;</span></span><br><span class=\"line\">    <span class=\"string\">share-boss-worker</span> <span class=\"string\">=</span> <span class=\"literal\">false</span></span><br><span class=\"line\">    <span class=\"string\">client-selector-thread-prefix</span> <span class=\"string\">=</span> <span class=\"string\">&quot;NettyClientSelector&quot;</span></span><br><span class=\"line\">    <span class=\"string\">client-selector-thread-size</span> <span class=\"string\">=</span> <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"string\">client-worker-thread-prefix</span> <span class=\"string\">=</span> <span class=\"string\">&quot;NettyClientWorkerThread&quot;</span></span><br><span class=\"line\">    <span class=\"comment\"># netty boss thread size,will not be used for UDT</span></span><br><span class=\"line\">    <span class=\"string\">boss-thread-size</span> <span class=\"string\">=</span> <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"comment\">#auto default pin or 8</span></span><br><span class=\"line\">    <span class=\"string\">worker-thread-size</span> <span class=\"string\">=</span> <span class=\"number\">8</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"string\">shutdown</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\"># when destroy server, wait seconds</span></span><br><span class=\"line\">    <span class=\"string\">wait</span> <span class=\"string\">=</span> <span class=\"number\">3</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"string\">serialization</span> <span class=\"string\">=</span> <span class=\"string\">&quot;seata&quot;</span></span><br><span class=\"line\">  <span class=\"string\">compressor</span> <span class=\"string\">=</span> <span class=\"string\">&quot;none&quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">service</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"string\">vgroup_mapping.fsp_tx_group</span> <span class=\"string\">=</span> <span class=\"string\">&quot;default&quot;</span> <span class=\"comment\">#修改自定义事务组名称</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"string\">default.grouplist</span> <span class=\"string\">=</span> <span class=\"string\">&quot;127.0.0.1:8091&quot;</span></span><br><span class=\"line\">  <span class=\"string\">enableDegrade</span> <span class=\"string\">=</span> <span class=\"literal\">false</span></span><br><span class=\"line\">  <span class=\"string\">disable</span> <span class=\"string\">=</span> <span class=\"literal\">false</span></span><br><span class=\"line\">  <span class=\"string\">max.commit.retry.timeout</span> <span class=\"string\">=</span> <span class=\"string\">&quot;-1&quot;</span></span><br><span class=\"line\">  <span class=\"string\">max.rollback.retry.timeout</span> <span class=\"string\">=</span> <span class=\"string\">&quot;-1&quot;</span></span><br><span class=\"line\">  <span class=\"string\">disableGlobalTransaction</span> <span class=\"string\">=</span> <span class=\"literal\">false</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">client</span> &#123;</span><br><span class=\"line\">  <span class=\"string\">async.commit.buffer.limit</span> <span class=\"string\">=</span> <span class=\"number\">10000</span></span><br><span class=\"line\">  <span class=\"string\">lock</span> &#123;</span><br><span class=\"line\">    <span class=\"string\">retry.internal</span> <span class=\"string\">=</span> <span class=\"number\">10</span></span><br><span class=\"line\">    <span class=\"string\">retry.times</span> <span class=\"string\">=</span> <span class=\"number\">30</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"string\">report.retry.count</span> <span class=\"string\">=</span> <span class=\"number\">5</span></span><br><span class=\"line\">  <span class=\"string\">tm.commit.retry.count</span> <span class=\"string\">=</span> <span class=\"number\">1</span></span><br><span class=\"line\">  <span class=\"string\">tm.rollback.retry.count</span> <span class=\"string\">=</span> <span class=\"number\">1</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## transaction log store</span></span><br><span class=\"line\"><span class=\"string\">store</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">## store mode: file、db</span></span><br><span class=\"line\">  <span class=\"string\">mode</span> <span class=\"string\">=</span> <span class=\"string\">&quot;db&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">## file store</span></span><br><span class=\"line\">  <span class=\"string\">file</span> &#123;</span><br><span class=\"line\">    <span class=\"string\">dir</span> <span class=\"string\">=</span> <span class=\"string\">&quot;sessionStore&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># branch session size , if exceeded first try compress lockkey, still exceeded throws exceptions</span></span><br><span class=\"line\">    <span class=\"string\">max-branch-session-size</span> <span class=\"string\">=</span> <span class=\"number\">16384</span></span><br><span class=\"line\">    <span class=\"comment\"># globe session size , if exceeded throws exceptions</span></span><br><span class=\"line\">    <span class=\"string\">max-global-session-size</span> <span class=\"string\">=</span> <span class=\"number\">512</span></span><br><span class=\"line\">    <span class=\"comment\"># file buffer size , if exceeded allocate new buffer</span></span><br><span class=\"line\">    <span class=\"string\">file-write-buffer-cache-size</span> <span class=\"string\">=</span> <span class=\"number\">16384</span></span><br><span class=\"line\">    <span class=\"comment\"># when recover batch read size</span></span><br><span class=\"line\">    <span class=\"string\">session.reload.read_size</span> <span class=\"string\">=</span> <span class=\"number\">100</span></span><br><span class=\"line\">    <span class=\"comment\"># async, sync</span></span><br><span class=\"line\">    <span class=\"string\">flush-disk-mode</span> <span class=\"string\">=</span> <span class=\"string\">async</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">## database store</span></span><br><span class=\"line\">  <span class=\"string\">db</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">## the implement of javax.sql.DataSource, such as DruidDataSource(druid)/BasicDataSource(dbcp) etc.</span></span><br><span class=\"line\">    <span class=\"string\">datasource</span> <span class=\"string\">=</span> <span class=\"string\">&quot;dbcp&quot;</span></span><br><span class=\"line\">    <span class=\"comment\">## mysql/oracle/h2/oceanbase etc.</span></span><br><span class=\"line\">    <span class=\"string\">db-type</span> <span class=\"string\">=</span> <span class=\"string\">&quot;mysql&quot;</span></span><br><span class=\"line\">    <span class=\"string\">driver-class-name</span> <span class=\"string\">=</span> <span class=\"string\">&quot;com.mysql.jdbc.Driver&quot;</span></span><br><span class=\"line\">    <span class=\"string\">url</span> <span class=\"string\">=</span> <span class=\"string\">&quot;jdbc:mysql://127.0.0.1:3306/seata&quot;</span></span><br><span class=\"line\">    <span class=\"string\">user</span> <span class=\"string\">=</span> <span class=\"string\">&quot;root&quot;</span></span><br><span class=\"line\">    <span class=\"string\">password</span> <span class=\"string\">=</span> <span class=\"string\">&quot;123456&quot;</span></span><br><span class=\"line\">    <span class=\"string\">min-conn</span> <span class=\"string\">=</span> <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"string\">max-conn</span> <span class=\"string\">=</span> <span class=\"number\">3</span></span><br><span class=\"line\">    <span class=\"string\">global.table</span> <span class=\"string\">=</span> <span class=\"string\">&quot;global_table&quot;</span></span><br><span class=\"line\">    <span class=\"string\">branch.table</span> <span class=\"string\">=</span> <span class=\"string\">&quot;branch_table&quot;</span></span><br><span class=\"line\">    <span class=\"string\">lock-table</span> <span class=\"string\">=</span> <span class=\"string\">&quot;lock_table&quot;</span></span><br><span class=\"line\">    <span class=\"string\">query-limit</span> <span class=\"string\">=</span> <span class=\"number\">100</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"string\">lock</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">## the lock store mode: local、remote</span></span><br><span class=\"line\">  <span class=\"string\">mode</span> <span class=\"string\">=</span> <span class=\"string\">&quot;remote&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"string\">local</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">## store locks in user&#x27;s database</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"string\">remote</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">## store locks in the seata&#x27;s server</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"string\">recovery</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">#schedule committing retry period in milliseconds</span></span><br><span class=\"line\">  <span class=\"string\">committing-retry-period</span> <span class=\"string\">=</span> <span class=\"number\">1000</span></span><br><span class=\"line\">  <span class=\"comment\">#schedule asyn committing retry period in milliseconds</span></span><br><span class=\"line\">  <span class=\"string\">asyn-committing-retry-period</span> <span class=\"string\">=</span> <span class=\"number\">1000</span></span><br><span class=\"line\">  <span class=\"comment\">#schedule rollbacking retry period in milliseconds</span></span><br><span class=\"line\">  <span class=\"string\">rollbacking-retry-period</span> <span class=\"string\">=</span> <span class=\"number\">1000</span></span><br><span class=\"line\">  <span class=\"comment\">#schedule timeout retry period in milliseconds</span></span><br><span class=\"line\">  <span class=\"string\">timeout-retry-period</span> <span class=\"string\">=</span> <span class=\"number\">1000</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">transaction</span> &#123;</span><br><span class=\"line\">  <span class=\"string\">undo.data.validation</span> <span class=\"string\">=</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"string\">undo.log.serialization</span> <span class=\"string\">=</span> <span class=\"string\">&quot;jackson&quot;</span></span><br><span class=\"line\">  <span class=\"string\">undo.log.save.days</span> <span class=\"string\">=</span> <span class=\"number\">7</span></span><br><span class=\"line\">  <span class=\"comment\">#schedule delete expired undo_log in milliseconds</span></span><br><span class=\"line\">  <span class=\"string\">undo.log.delete.period</span> <span class=\"string\">=</span> <span class=\"number\">86400000</span></span><br><span class=\"line\">  <span class=\"string\">undo.log.table</span> <span class=\"string\">=</span> <span class=\"string\">&quot;undo_log&quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## metrics settings</span></span><br><span class=\"line\"><span class=\"string\">metrics</span> &#123;</span><br><span class=\"line\">  <span class=\"string\">enabled</span> <span class=\"string\">=</span> <span class=\"literal\">false</span></span><br><span class=\"line\">  <span class=\"string\">registry-type</span> <span class=\"string\">=</span> <span class=\"string\">&quot;compact&quot;</span></span><br><span class=\"line\">  <span class=\"comment\"># multi exporters use comma divided</span></span><br><span class=\"line\">  <span class=\"string\">exporter-list</span> <span class=\"string\">=</span> <span class=\"string\">&quot;prometheus&quot;</span></span><br><span class=\"line\">  <span class=\"string\">exporter-prometheus-port</span> <span class=\"string\">=</span> <span class=\"number\">9898</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">support</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">## spring</span></span><br><span class=\"line\">  <span class=\"string\">spring</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\"># auto proxy the DataSource bean</span></span><br><span class=\"line\">    <span class=\"string\">datasource.autoproxy</span> <span class=\"string\">=</span> <span class=\"literal\">false</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>registry.conf</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">registry</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\"># file 、nacos 、eureka、redis、zk、consul、etcd3、sofa</span></span><br><span class=\"line\">  <span class=\"string\">type</span> <span class=\"string\">=</span> <span class=\"string\">&quot;nacos&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"string\">nacos</span> &#123;</span><br><span class=\"line\">    <span class=\"string\">serverAddr</span> <span class=\"string\">=</span> <span class=\"string\">&quot;localhost:15003&quot;</span></span><br><span class=\"line\">    <span class=\"string\">namespace</span> <span class=\"string\">=</span> <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"string\">cluster</span> <span class=\"string\">=</span> <span class=\"string\">&quot;default&quot;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"string\">eureka</span> &#123;</span><br><span class=\"line\">    <span class=\"string\">serviceUrl</span> <span class=\"string\">=</span> <span class=\"string\">&quot;http://localhost:8761/eureka&quot;</span></span><br><span class=\"line\">    <span class=\"string\">application</span> <span class=\"string\">=</span> <span class=\"string\">&quot;default&quot;</span></span><br><span class=\"line\">    <span class=\"string\">weight</span> <span class=\"string\">=</span> <span class=\"string\">&quot;1&quot;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"string\">redis</span> &#123;</span><br><span class=\"line\">    <span class=\"string\">serverAddr</span> <span class=\"string\">=</span> <span class=\"string\">&quot;localhost:6379&quot;</span></span><br><span class=\"line\">    <span class=\"string\">db</span> <span class=\"string\">=</span> <span class=\"string\">&quot;0&quot;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"string\">zk</span> &#123;</span><br><span class=\"line\">    <span class=\"string\">cluster</span> <span class=\"string\">=</span> <span class=\"string\">&quot;default&quot;</span></span><br><span class=\"line\">    <span class=\"string\">serverAddr</span> <span class=\"string\">=</span> <span class=\"string\">&quot;127.0.0.1:2181&quot;</span></span><br><span class=\"line\">    <span class=\"string\">session.timeout</span> <span class=\"string\">=</span> <span class=\"number\">6000</span></span><br><span class=\"line\">    <span class=\"string\">connect.timeout</span> <span class=\"string\">=</span> <span class=\"number\">2000</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"string\">consul</span> &#123;</span><br><span class=\"line\">    <span class=\"string\">cluster</span> <span class=\"string\">=</span> <span class=\"string\">&quot;default&quot;</span></span><br><span class=\"line\">    <span class=\"string\">serverAddr</span> <span class=\"string\">=</span> <span class=\"string\">&quot;127.0.0.1:8500&quot;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"string\">etcd3</span> &#123;</span><br><span class=\"line\">    <span class=\"string\">cluster</span> <span class=\"string\">=</span> <span class=\"string\">&quot;default&quot;</span></span><br><span class=\"line\">    <span class=\"string\">serverAddr</span> <span class=\"string\">=</span> <span class=\"string\">&quot;http://localhost:2379&quot;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"string\">sofa</span> &#123;</span><br><span class=\"line\">    <span class=\"string\">serverAddr</span> <span class=\"string\">=</span> <span class=\"string\">&quot;127.0.0.1:9603&quot;</span></span><br><span class=\"line\">    <span class=\"string\">application</span> <span class=\"string\">=</span> <span class=\"string\">&quot;default&quot;</span></span><br><span class=\"line\">    <span class=\"string\">region</span> <span class=\"string\">=</span> <span class=\"string\">&quot;DEFAULT_ZONE&quot;</span></span><br><span class=\"line\">    <span class=\"string\">datacenter</span> <span class=\"string\">=</span> <span class=\"string\">&quot;DefaultDataCenter&quot;</span></span><br><span class=\"line\">    <span class=\"string\">cluster</span> <span class=\"string\">=</span> <span class=\"string\">&quot;default&quot;</span></span><br><span class=\"line\">    <span class=\"string\">group</span> <span class=\"string\">=</span> <span class=\"string\">&quot;SEATA_GROUP&quot;</span></span><br><span class=\"line\">    <span class=\"string\">addressWaitTime</span> <span class=\"string\">=</span> <span class=\"string\">&quot;3000&quot;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"string\">file</span> &#123;</span><br><span class=\"line\">    <span class=\"string\">name</span> <span class=\"string\">=</span> <span class=\"string\">&quot;file.conf&quot;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">config</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\"># file、nacos 、apollo、zk、consul、etcd3</span></span><br><span class=\"line\">  <span class=\"string\">type</span> <span class=\"string\">=</span> <span class=\"string\">&quot;file&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"string\">nacos</span> &#123;</span><br><span class=\"line\">    <span class=\"string\">serverAddr</span> <span class=\"string\">=</span> <span class=\"string\">&quot;localhost&quot;</span></span><br><span class=\"line\">    <span class=\"string\">namespace</span> <span class=\"string\">=</span> <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"string\">consul</span> &#123;</span><br><span class=\"line\">    <span class=\"string\">serverAddr</span> <span class=\"string\">=</span> <span class=\"string\">&quot;127.0.0.1:8500&quot;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"string\">apollo</span> &#123;</span><br><span class=\"line\">    <span class=\"string\">app.id</span> <span class=\"string\">=</span> <span class=\"string\">&quot;seata-server&quot;</span></span><br><span class=\"line\">    <span class=\"string\">apollo.meta</span> <span class=\"string\">=</span> <span class=\"string\">&quot;http://192.168.1.204:8801&quot;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"string\">zk</span> &#123;</span><br><span class=\"line\">    <span class=\"string\">serverAddr</span> <span class=\"string\">=</span> <span class=\"string\">&quot;127.0.0.1:2181&quot;</span></span><br><span class=\"line\">    <span class=\"string\">session.timeout</span> <span class=\"string\">=</span> <span class=\"number\">6000</span></span><br><span class=\"line\">    <span class=\"string\">connect.timeout</span> <span class=\"string\">=</span> <span class=\"number\">2000</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"string\">etcd3</span> &#123;</span><br><span class=\"line\">    <span class=\"string\">serverAddr</span> <span class=\"string\">=</span> <span class=\"string\">&quot;http://localhost:2379&quot;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"string\">file</span> &#123;</span><br><span class=\"line\">    <span class=\"string\">name</span> <span class=\"string\">=</span> <span class=\"string\">&quot;file.conf&quot;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"代码部分\"><a class=\"markdownIt-Anchor\" href=\"#代码部分\">#</a> 代码部分</h4>\n<h5 id=\"主启动\"><a class=\"markdownIt-Anchor\" href=\"#主启动\">#</a> 主启动</h5>\n<p>SeataOrderMainApp2001</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.SpringApplication;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.cloud.client.discovery.EnableDiscoveryClient;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.cloud.openfeign.EnableFeignClients;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@EnableDiscoveryClient</span></span><br><span class=\"line\"><span class=\"meta\">@EnableFeignClients</span></span><br><span class=\"line\"><span class=\"comment\">// 取消数据源的自动创建，而是使用自己定义的</span></span><br><span class=\"line\"><span class=\"meta\">@SpringBootApplication(exclude = DataSourceAutoConfiguration.class)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SeataOrderMainApp2001</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    SpringApplication.run(SeataOrderMainApp2001.class, args);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"domain层\"><a class=\"markdownIt-Anchor\" href=\"#domain层\">#</a> Domain 层</h5>\n<p>Order</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.math.BigDecimal;</span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.AllArgsConstructor;</span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.Data;</span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.NoArgsConstructor;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"meta\">@AllArgsConstructor</span></span><br><span class=\"line\"><span class=\"meta\">@NoArgsConstructor</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Order</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> Long id;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> Long userId;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> Long productId;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> Integer count;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> BigDecimal money;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> Integer status; <span class=\"comment\">// 订单状态：0：创建中；1：已完结</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>OrderDao</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> com.atguigu.springcloud.alibaba.domain.Order;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.ibatis.annotations.Mapper;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.ibatis.annotations.Param;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Mapper</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">OrderDao</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 1 新建订单</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">create</span><span class=\"params\">(Order order)</span></span>;</span><br><span class=\"line\">  <span class=\"comment\">// 2 修改订单状态，从零改为 1</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">update</span><span class=\"params\">(<span class=\"meta\">@Param(&quot;userId&quot;)</span> Long userId, <span class=\"meta\">@Param(&quot;status&quot;)</span> Integer status)</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>OrderMapper.xml</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class=\"line\">  <span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">mapper</span> <span class=\"meta-keyword\">PUBLIC</span> <span class=\"meta-string\">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class=\"meta-string\">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span> &gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">mapper</span> <span class=\"attr\">namespace</span>=<span class=\"string\">&quot;com.atguigu.springcloud.alibaba.dao.OrderDao&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">resultMap</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BaseResultMap&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;com.atguigu.springcloud.alibaba.domain.Order&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">id</span> <span class=\"attr\">column</span>=<span class=\"string\">&quot;id&quot;</span> <span class=\"attr\">property</span>=<span class=\"string\">&quot;id&quot;</span> <span class=\"attr\">jdbcType</span>=<span class=\"string\">&quot;BIGINT&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">column</span>=<span class=\"string\">&quot;user_id&quot;</span> <span class=\"attr\">property</span>=<span class=\"string\">&quot;userId&quot;</span> <span class=\"attr\">jdbcType</span>=<span class=\"string\">&quot;BIGINT&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">column</span>=<span class=\"string\">&quot;product_id&quot;</span> <span class=\"attr\">property</span>=<span class=\"string\">&quot;productId&quot;</span> <span class=\"attr\">jdbcType</span>=<span class=\"string\">&quot;BIGINT&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">column</span>=<span class=\"string\">&quot;count&quot;</span> <span class=\"attr\">property</span>=<span class=\"string\">&quot;count&quot;</span> <span class=\"attr\">jdbcType</span>=<span class=\"string\">&quot;INTEGER&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">column</span>=<span class=\"string\">&quot;money&quot;</span> <span class=\"attr\">property</span>=<span class=\"string\">&quot;money&quot;</span> <span class=\"attr\">jdbcType</span>=<span class=\"string\">&quot;DECIMAL&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">column</span>=<span class=\"string\">&quot;status&quot;</span> <span class=\"attr\">property</span>=<span class=\"string\">&quot;status&quot;</span> <span class=\"attr\">jdbcType</span>=<span class=\"string\">&quot;INTEGER&quot;</span>/&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">resultMap</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">insert</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;create&quot;</span>&gt;</span></span><br><span class=\"line\">    insert into t_order (id,user_id,product_id,count,money,status)</span><br><span class=\"line\">    values (null,#&#123;userId&#125;,#&#123;productId&#125;,#&#123;count&#125;,#&#123;money&#125;,0);</span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">insert</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">update</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;update&quot;</span>&gt;</span></span><br><span class=\"line\">    update t_order set status = 1</span><br><span class=\"line\">    where user_id=#&#123;userId&#125; and status = #&#123;status&#125;;</span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">update</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"service层\"><a class=\"markdownIt-Anchor\" href=\"#service层\">#</a> Service 层</h5>\n<p>OrderService</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> com.atguigu.springcloud.alibaba.domain.Order;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">OrderService</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">create</span><span class=\"params\">(Order order)</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>AccountService</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> com.atguigu.springcloud.alibaba.domain.CommonResult;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.math.BigDecimal;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.cloud.openfeign.FeignClient;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.PostMapping;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RequestParam;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@FeignClient(value = &quot;seata-account-service&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">AccountService</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"meta\">@PostMapping(value = &quot;/account/decrease&quot;)</span></span><br><span class=\"line\">  <span class=\"function\">CommonResult <span class=\"title\">decrease</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">      <span class=\"meta\">@RequestParam(&quot;userId&quot;)</span> Long userId, <span class=\"meta\">@RequestParam(&quot;money&quot;)</span> BigDecimal money)</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>StorageService</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> com.atguigu.springcloud.alibaba.domain.CommonResult;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.cloud.openfeign.FeignClient;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.PostMapping;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RequestParam;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@FeignClient(value = &quot;seata-storage-service&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">StorageService</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"meta\">@PostMapping(value = &quot;/storage/decrease&quot;)</span></span><br><span class=\"line\">  <span class=\"function\">CommonResult <span class=\"title\">decrease</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">      <span class=\"meta\">@RequestParam(&quot;productId&quot;)</span> Long productId, <span class=\"meta\">@RequestParam(&quot;count&quot;)</span> Integer count)</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>OrderServiceImpl</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> com.atguigu.springcloud.alibaba.dao.OrderDao;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.atguigu.springcloud.alibaba.domain.Order;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.seata.spring.annotation.GlobalTransactional;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.annotation.Resource;</span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Service;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OrderServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title\">OrderService</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"meta\">@Resource</span> <span class=\"keyword\">private</span> OrderDao orderDao;</span><br><span class=\"line\">  <span class=\"meta\">@Resource</span> <span class=\"keyword\">private</span> StorageService storageService;</span><br><span class=\"line\">  <span class=\"meta\">@Resource</span> <span class=\"keyword\">private</span> AccountService accountService;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/** 创建订单 -&gt; 调用库存服务扣减库存 -&gt; 调用账户服务扣减账户余额 -&gt; 修改订单状态 简单说：下订单 -&gt; 扣库存 -&gt; 减余额 -&gt; 改状态 */</span></span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">create</span><span class=\"params\">(Order order)</span> </span>&#123;</span><br><span class=\"line\">    log.info(<span class=\"string\">&quot;-----&gt;开始新建订单&quot;</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 1 新建订单</span></span><br><span class=\"line\">    orderDao.create(order);</span><br><span class=\"line\">    <span class=\"comment\">// 2 扣减库存</span></span><br><span class=\"line\">    log.info(<span class=\"string\">&quot;-----&gt;订单微服务开始调用库存，做扣减Count&quot;</span>);</span><br><span class=\"line\">    storageService.decrease(order.getProductId(), order.getCount());</span><br><span class=\"line\">    log.info(<span class=\"string\">&quot;-----&gt;订单微服务开始调用库存，做扣减end&quot;</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 3 扣减账户</span></span><br><span class=\"line\">    log.info(<span class=\"string\">&quot;-----&gt;订单微服务开始调用账户，做扣减Money&quot;</span>);</span><br><span class=\"line\">    accountService.decrease(order.getUserId(), order.getMoney());</span><br><span class=\"line\">    log.info(<span class=\"string\">&quot;-----&gt;订单微服务开始调用账户，做扣减end&quot;</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 4 修改订单状态，从零到 1,1 代表已经完成</span></span><br><span class=\"line\">    log.info(<span class=\"string\">&quot;-----&gt;修改订单状态开始&quot;</span>);</span><br><span class=\"line\">    orderDao.update(order.getUserId(), <span class=\"number\">0</span>);</span><br><span class=\"line\">    log.info(<span class=\"string\">&quot;-----&gt;修改订单状态结束&quot;</span>);</span><br><span class=\"line\">    log.info(<span class=\"string\">&quot;-----&gt;下订单结束了，O(∩_∩)O哈哈~&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"config层\"><a class=\"markdownIt-Anchor\" href=\"#config层\">#</a> Config 层</h5>\n<p>DataSourceProxyConfig</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.druid.pool.DruidDataSource;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.seata.rm.datasource.DataSourceProxy;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.sql.DataSource;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.mybatis.spring.SqlSessionFactoryBean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.mybatis.spring.transaction.SpringManagedTransactionFactory;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Bean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Configuration;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.core.io.support.PathMatchingResourcePatternResolver;</span><br><span class=\"line\"><span class=\"comment\">/** 使用 Seata 对数据源进行代理 */</span></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DataSourceProxyConfig</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"meta\">@Value(&quot;$&#123;mybatis.mapperLocations&#125;&quot;)</span></span><br><span class=\"line\">  <span class=\"keyword\">private</span> String mapperLocations;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Bean</span></span><br><span class=\"line\">  <span class=\"meta\">@ConfigurationProperties(prefix = &quot;spring.datasource&quot;)</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> DataSource <span class=\"title\">druidDataSource</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> DruidDataSource();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Bean</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> DataSourceProxy <span class=\"title\">dataSourceProxy</span><span class=\"params\">(DataSource dataSource)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> DataSourceProxy(dataSource);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Bean</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> SqlSessionFactory <span class=\"title\">sqlSessionFactoryBean</span><span class=\"params\">(DataSourceProxy dataSourceProxy)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">    SqlSessionFactoryBean sqlSessionFactoryBean = <span class=\"keyword\">new</span> SqlSessionFactoryBean();</span><br><span class=\"line\">    sqlSessionFactoryBean.setDataSource(dataSourceProxy);</span><br><span class=\"line\">    sqlSessionFactoryBean.setMapperLocations(</span><br><span class=\"line\">        <span class=\"keyword\">new</span> PathMatchingResourcePatternResolver().getResources(mapperLocations));</span><br><span class=\"line\">    sqlSessionFactoryBean.setTransactionFactory(<span class=\"keyword\">new</span> SpringManagedTransactionFactory());</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sqlSessionFactoryBean.getObject();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>MyBatisConfig</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> org.mybatis.spring.annotation.MapperScan;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Configuration;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"meta\">@MapperScan(&#123;&quot;com.atguigu.springcloud.alibaba.dao&quot;&#125;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyBatisConfig</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"controller层\"><a class=\"markdownIt-Anchor\" href=\"#controller层\">#</a> Controller 层</h5>\n<p>OrderController</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> com.atguigu.springcloud.alibaba.domain.CommonResult;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.atguigu.springcloud.alibaba.domain.Order;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.atguigu.springcloud.alibaba.service.OrderService;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.annotation.Resource;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OrderController</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"meta\">@Resource</span> <span class=\"keyword\">private</span> OrderService orderService;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@GetMapping(&quot;/order/create&quot;)</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> CommonResult <span class=\"title\">create</span><span class=\"params\">(Order order)</span> </span>&#123;</span><br><span class=\"line\">    orderService.create(order);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> CommonResult(<span class=\"number\">200</span>, <span class=\"string\">&quot;订单创建成功&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"storage-module-模块搭建\"><a class=\"markdownIt-Anchor\" href=\"#storage-module-模块搭建\">#</a> Storage-Module 模块搭建</h3>\n<p>模块名：seata-Storage-service2002</p>\n<p>职责：提供库存服务</p>\n<h4 id=\"配置部分-2\"><a class=\"markdownIt-Anchor\" href=\"#配置部分-2\">#</a> 配置部分</h4>\n<p>POM</p>\n<p>（与 seata-order-service2001 模块大致相同）</p>\n<p>application.yml</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">2002</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">application:</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">seata-storage-service</span></span><br><span class=\"line\">  <span class=\"attr\">cloud:</span></span><br><span class=\"line\">    <span class=\"attr\">alibaba:</span></span><br><span class=\"line\">      <span class=\"attr\">seata:</span></span><br><span class=\"line\">        <span class=\"comment\">#自定义事务组名称需要与 seata-server 中的对应</span></span><br><span class=\"line\">        <span class=\"attr\">tx-service-group:</span> <span class=\"string\">fsp_tx_group</span></span><br><span class=\"line\">    <span class=\"attr\">nacos:</span></span><br><span class=\"line\">      <span class=\"attr\">discovery:</span></span><br><span class=\"line\">        <span class=\"attr\">server-addr:</span> <span class=\"string\">localhost:15003</span></span><br><span class=\"line\">  <span class=\"attr\">datasource:</span></span><br><span class=\"line\">    <span class=\"attr\">driver-class-name:</span> <span class=\"string\">com.mysql.jdbc.Driver</span></span><br><span class=\"line\">    <span class=\"attr\">url:</span> <span class=\"string\">jdbc:mysql://localhost:3306/seata_storage</span></span><br><span class=\"line\">    <span class=\"attr\">username:</span> <span class=\"string\">root</span></span><br><span class=\"line\">    <span class=\"attr\">password:</span> <span class=\"number\">123456</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">feign:</span></span><br><span class=\"line\">  <span class=\"attr\">hystrix:</span></span><br><span class=\"line\">    <span class=\"attr\">enabled:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">logging:</span></span><br><span class=\"line\">  <span class=\"attr\">level:</span></span><br><span class=\"line\">    <span class=\"attr\">io:</span></span><br><span class=\"line\">      <span class=\"attr\">seata:</span> <span class=\"string\">info</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">mybatis:</span></span><br><span class=\"line\">  <span class=\"attr\">mapperLocations:</span> <span class=\"string\">classpath:mapper/*.xml</span></span><br></pre></td></tr></table></figure>\n<p>file.conf</p>\n<p>（与 seata-order-service2001 模块大致相同）</p>\n<p>registry.conf</p>\n<p>（与 seata-order-service2001 模块大致相同）</p>\n<h4 id=\"代码部分-2\"><a class=\"markdownIt-Anchor\" href=\"#代码部分-2\">#</a> 代码部分</h4>\n<h5 id=\"主启动-2\"><a class=\"markdownIt-Anchor\" href=\"#主启动-2\">#</a> 主启动</h5>\n<p>SeataStorageMainApp2002</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.SpringApplication;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.cloud.client.discovery.EnableDiscoveryClient;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.cloud.openfeign.EnableFeignClients;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@EnableDiscoveryClient</span></span><br><span class=\"line\"><span class=\"meta\">@EnableFeignClients</span></span><br><span class=\"line\"><span class=\"comment\">// 取消数据源的自动创建，而是使用自己定义的</span></span><br><span class=\"line\"><span class=\"meta\">@SpringBootApplication(exclude = DataSourceAutoConfiguration.class)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SeataStorageMainApp2002</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    SpringApplication.run(SeataStorageMainApp2002.class, args);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"domain层-2\"><a class=\"markdownIt-Anchor\" href=\"#domain层-2\">#</a> Domain 层</h5>\n<p>Storage</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> lombok.Data;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Storage</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">private</span> Long id;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/** 产品 id */</span></span><br><span class=\"line\">  <span class=\"keyword\">private</span> Long productId;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/** 总库存 */</span></span><br><span class=\"line\">  <span class=\"keyword\">private</span> Integer total;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/** 已用库存 */</span></span><br><span class=\"line\">  <span class=\"keyword\">private</span> Integer used;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/** 剩余库存 */</span></span><br><span class=\"line\">  <span class=\"keyword\">private</span> Integer residue;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>StorageDao</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> org.apache.ibatis.annotations.Mapper;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.ibatis.annotations.Param;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Mapper</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">StorageDao</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 扣减库存</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">decrease</span><span class=\"params\">(<span class=\"meta\">@Param(&quot;productId&quot;)</span> Long productId, <span class=\"meta\">@Param(&quot;count&quot;)</span> Integer count)</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>StorageMapper.xml</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class=\"line\">  <span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">mapper</span> <span class=\"meta-keyword\">PUBLIC</span> <span class=\"meta-string\">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class=\"meta-string\">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span> &gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">mapper</span> <span class=\"attr\">namespace</span>=<span class=\"string\">&quot;com.atguigu.springcloud.alibaba.dao.StorageDao&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">resultMap</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BaseResultMap&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;com.atguigu.springcloud.alibaba.domain.Storage&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">id</span> <span class=\"attr\">column</span>=<span class=\"string\">&quot;id&quot;</span> <span class=\"attr\">property</span>=<span class=\"string\">&quot;id&quot;</span> <span class=\"attr\">jdbcType</span>=<span class=\"string\">&quot;BIGINT&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">column</span>=<span class=\"string\">&quot;product_id&quot;</span> <span class=\"attr\">property</span>=<span class=\"string\">&quot;productId&quot;</span> <span class=\"attr\">jdbcType</span>=<span class=\"string\">&quot;BIGINT&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">column</span>=<span class=\"string\">&quot;total&quot;</span> <span class=\"attr\">property</span>=<span class=\"string\">&quot;total&quot;</span> <span class=\"attr\">jdbcType</span>=<span class=\"string\">&quot;INTEGER&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">column</span>=<span class=\"string\">&quot;used&quot;</span> <span class=\"attr\">property</span>=<span class=\"string\">&quot;used&quot;</span> <span class=\"attr\">jdbcType</span>=<span class=\"string\">&quot;INTEGER&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">column</span>=<span class=\"string\">&quot;residue&quot;</span> <span class=\"attr\">property</span>=<span class=\"string\">&quot;residue&quot;</span> <span class=\"attr\">jdbcType</span>=<span class=\"string\">&quot;INTEGER&quot;</span>/&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">resultMap</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">update</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;decrease&quot;</span>&gt;</span></span><br><span class=\"line\">    UPDATE</span><br><span class=\"line\">    t_storage</span><br><span class=\"line\">    SET</span><br><span class=\"line\">    used = used + #&#123;count&#125;,residue = residue - #&#123;count&#125;</span><br><span class=\"line\">    WHERE</span><br><span class=\"line\">    product_id = #&#123;productId&#125;</span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">update</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"service层-2\"><a class=\"markdownIt-Anchor\" href=\"#service层-2\">#</a> Service 层</h5>\n<p>StorageService</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">StorageService</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">/** 扣减库存 */</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">decrease</span><span class=\"params\">(Long productId, Integer count)</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>StorageServiceImpl</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> com.atguigu.springcloud.alibaba.dao.StorageDao;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.annotation.Resource;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.slf4j.Logger;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.slf4j.LoggerFactory;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Service;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StorageServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title\">StorageService</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Logger LOGGER = LoggerFactory.getLogger(StorageServiceImpl.class);</span><br><span class=\"line\">  <span class=\"meta\">@Resource</span> <span class=\"keyword\">private</span> StorageDao storageDao;</span><br><span class=\"line\">  <span class=\"comment\">/** 扣减库存 */</span></span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">decrease</span><span class=\"params\">(Long productId, Integer count)</span> </span>&#123;</span><br><span class=\"line\">    LOGGER.info(<span class=\"string\">&quot;-------&gt;storage-service中扣减库存开始&quot;</span>);</span><br><span class=\"line\">    storageDao.decrease(productId, count);</span><br><span class=\"line\">    LOGGER.info(<span class=\"string\">&quot;-------&gt;storage-service中扣减库存结束&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"config层-2\"><a class=\"markdownIt-Anchor\" href=\"#config层-2\">#</a> Config 层</h5>\n<p>（与 seata-order-service2001 模块大致相同）</p>\n<h5 id=\"controller层-2\"><a class=\"markdownIt-Anchor\" href=\"#controller层-2\">#</a> Controller 层</h5>\n<p>StorageController</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> com.atguigu.springcloud.alibaba.domain.CommonResult;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.atguigu.springcloud.alibaba.service.StorageService;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StorageController</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Autowired</span> <span class=\"keyword\">private</span> StorageService storageService;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/** 扣减库存 */</span></span><br><span class=\"line\">  <span class=\"meta\">@RequestMapping(&quot;/storage/decrease&quot;)</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> CommonResult <span class=\"title\">decrease</span><span class=\"params\">(Long productId, Integer count)</span> </span>&#123;</span><br><span class=\"line\">    storageService.decrease(productId, count);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> CommonResult(<span class=\"number\">200</span>, <span class=\"string\">&quot;扣减库存成功！&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"account-module-模块搭建\"><a class=\"markdownIt-Anchor\" href=\"#account-module-模块搭建\">#</a> Account-Module 模块搭建</h3>\n<p>模块名：seata-Account-service2003</p>\n<p>职责：提供账号服务</p>\n<h4 id=\"配置部分-3\"><a class=\"markdownIt-Anchor\" href=\"#配置部分-3\">#</a> 配置部分</h4>\n<p>POM</p>\n<p>（与 seata-order-service2001 模块大致相同）</p>\n<p>application.yml</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">2003</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">application:</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">seata-account-service</span></span><br><span class=\"line\">  <span class=\"attr\">cloud:</span></span><br><span class=\"line\">    <span class=\"attr\">alibaba:</span></span><br><span class=\"line\">      <span class=\"attr\">seata:</span></span><br><span class=\"line\">        <span class=\"comment\">#自定义事务组名称需要与 seata-server 中的对应</span></span><br><span class=\"line\">        <span class=\"attr\">tx-service-group:</span> <span class=\"string\">fsp_tx_group</span></span><br><span class=\"line\">    <span class=\"attr\">nacos:</span></span><br><span class=\"line\">      <span class=\"attr\">discovery:</span></span><br><span class=\"line\">        <span class=\"attr\">server-addr:</span> <span class=\"string\">localhost:15003</span></span><br><span class=\"line\">  <span class=\"attr\">datasource:</span></span><br><span class=\"line\">    <span class=\"attr\">driver-class-name:</span> <span class=\"string\">com.mysql.jdbc.Driver</span></span><br><span class=\"line\">    <span class=\"attr\">url:</span> <span class=\"string\">jdbc:mysql://localhost:3306/seata_account</span></span><br><span class=\"line\">    <span class=\"attr\">username:</span> <span class=\"string\">root</span></span><br><span class=\"line\">    <span class=\"attr\">password:</span> <span class=\"number\">123456</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">feign:</span></span><br><span class=\"line\">  <span class=\"attr\">hystrix:</span></span><br><span class=\"line\">    <span class=\"attr\">enabled:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">logging:</span></span><br><span class=\"line\">  <span class=\"attr\">level:</span></span><br><span class=\"line\">    <span class=\"attr\">io:</span></span><br><span class=\"line\">      <span class=\"attr\">seata:</span> <span class=\"string\">info</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">mybatis:</span></span><br><span class=\"line\">  <span class=\"attr\">mapperLocations:</span> <span class=\"string\">classpath:mapper/*.xml</span></span><br></pre></td></tr></table></figure>\n<p>file.conf</p>\n<p>（与 seata-order-service2001 模块大致相同）</p>\n<p>registry.conf</p>\n<p>（与 seata-order-service2001 模块大致相同）</p>\n<h4 id=\"代码部分-3\"><a class=\"markdownIt-Anchor\" href=\"#代码部分-3\">#</a> 代码部分</h4>\n<h5 id=\"主启动-3\"><a class=\"markdownIt-Anchor\" href=\"#主启动-3\">#</a> 主启动</h5>\n<p>SeataAccountMainApp2003</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.SpringApplication;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.cloud.client.discovery.EnableDiscoveryClient;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.cloud.openfeign.EnableFeignClients;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@EnableDiscoveryClient</span></span><br><span class=\"line\"><span class=\"meta\">@EnableFeignClients</span></span><br><span class=\"line\"><span class=\"comment\">// 取消数据源的自动创建，而是使用自己定义的</span></span><br><span class=\"line\"><span class=\"meta\">@SpringBootApplication(exclude = DataSourceAutoConfiguration.class)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SeataAccountMainApp2003</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    SpringApplication.run(SeataAccountMainApp2003.class, args);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"domain层-3\"><a class=\"markdownIt-Anchor\" href=\"#domain层-3\">#</a> Domain 层</h5>\n<p>Account</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.math.BigDecimal;</span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.AllArgsConstructor;</span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.Data;</span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.NoArgsConstructor;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"meta\">@AllArgsConstructor</span></span><br><span class=\"line\"><span class=\"meta\">@NoArgsConstructor</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Account</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">private</span> Long id;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/** 用户 id */</span></span><br><span class=\"line\">  <span class=\"keyword\">private</span> Long userId;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/** 总额度 */</span></span><br><span class=\"line\">  <span class=\"keyword\">private</span> BigDecimal total;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/** 已用额度 */</span></span><br><span class=\"line\">  <span class=\"keyword\">private</span> BigDecimal used;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/** 剩余额度 */</span></span><br><span class=\"line\">  <span class=\"keyword\">private</span> BigDecimal residue;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>AccountDao</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.math.BigDecimal;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.ibatis.annotations.Mapper;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.ibatis.annotations.Param;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Mapper</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">AccountDao</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">/** 扣减账户余额 */</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">decrease</span><span class=\"params\">(<span class=\"meta\">@Param(&quot;userId&quot;)</span> Long userId, <span class=\"meta\">@Param(&quot;money&quot;)</span> BigDecimal money)</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>AccountMapper.xml</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class=\"line\">  <span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">mapper</span> <span class=\"meta-keyword\">PUBLIC</span> <span class=\"meta-string\">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class=\"meta-string\">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span> &gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">mapper</span> <span class=\"attr\">namespace</span>=<span class=\"string\">&quot;com.atguigu.springcloud.alibaba.dao.AccountDao&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">resultMap</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BaseResultMap&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;com.atguigu.springcloud.alibaba.domain.Account&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">id</span> <span class=\"attr\">column</span>=<span class=\"string\">&quot;id&quot;</span> <span class=\"attr\">property</span>=<span class=\"string\">&quot;id&quot;</span> <span class=\"attr\">jdbcType</span>=<span class=\"string\">&quot;BIGINT&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">column</span>=<span class=\"string\">&quot;user_id&quot;</span> <span class=\"attr\">property</span>=<span class=\"string\">&quot;userId&quot;</span> <span class=\"attr\">jdbcType</span>=<span class=\"string\">&quot;BIGINT&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">column</span>=<span class=\"string\">&quot;total&quot;</span> <span class=\"attr\">property</span>=<span class=\"string\">&quot;total&quot;</span> <span class=\"attr\">jdbcType</span>=<span class=\"string\">&quot;DECIMAL&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">column</span>=<span class=\"string\">&quot;used&quot;</span> <span class=\"attr\">property</span>=<span class=\"string\">&quot;used&quot;</span> <span class=\"attr\">jdbcType</span>=<span class=\"string\">&quot;DECIMAL&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">column</span>=<span class=\"string\">&quot;residue&quot;</span> <span class=\"attr\">property</span>=<span class=\"string\">&quot;residue&quot;</span> <span class=\"attr\">jdbcType</span>=<span class=\"string\">&quot;DECIMAL&quot;</span>/&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">resultMap</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">update</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;decrease&quot;</span>&gt;</span></span><br><span class=\"line\">    UPDATE t_account</span><br><span class=\"line\">    SET</span><br><span class=\"line\">    residue = residue - #&#123;money&#125;,used = used + #&#123;money&#125;</span><br><span class=\"line\">    WHERE</span><br><span class=\"line\">    user_id = #&#123;userId&#125;;</span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">update</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"service层-3\"><a class=\"markdownIt-Anchor\" href=\"#service层-3\">#</a> Service 层</h5>\n<p>AccountService</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.math.BigDecimal;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RequestParam;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">AccountService</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 扣减账户余额</span></span><br><span class=\"line\"><span class=\"comment\">   *</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> userId 用户 id</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> money 金额</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">decrease</span><span class=\"params\">(<span class=\"meta\">@RequestParam(&quot;userId&quot;)</span> Long userId, <span class=\"meta\">@RequestParam(&quot;money&quot;)</span> BigDecimal money)</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>AccountServiceImpl</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> com.atguigu.springcloud.alibaba.dao.AccountDao;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.math.BigDecimal;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.TimeUnit;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.annotation.Resource;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.slf4j.Logger;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.slf4j.LoggerFactory;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Service;</span><br><span class=\"line\"><span class=\"comment\">/** */</span></span><br><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AccountServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title\">AccountService</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Logger LOGGER = LoggerFactory.getLogger(AccountServiceImpl.class);</span><br><span class=\"line\">  <span class=\"meta\">@Resource</span> AccountDao accountDao;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/** 扣减账户余额 */</span></span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">decrease</span><span class=\"params\">(Long userId, BigDecimal money)</span> </span>&#123;</span><br><span class=\"line\">    LOGGER.info(<span class=\"string\">&quot;-------&gt;account-service中扣减账户余额开始&quot;</span>);</span><br><span class=\"line\">    accountDao.decrease(userId, money);</span><br><span class=\"line\">    LOGGER.info(<span class=\"string\">&quot;-------&gt;account-service中扣减账户余额结束&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"config层-3\"><a class=\"markdownIt-Anchor\" href=\"#config层-3\">#</a> Config 层</h5>\n<p>（与 seata-order-service2001 模块大致相同）</p>\n<h5 id=\"controller层-3\"><a class=\"markdownIt-Anchor\" href=\"#controller层-3\">#</a> Controller 层</h5>\n<p>AccountController</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> com.atguigu.springcloud.alibaba.domain.CommonResult;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.atguigu.springcloud.alibaba.service.AccountService;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.math.BigDecimal;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.annotation.Resource;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AccountController</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Resource</span> AccountService accountService;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/** 扣减账户余额 */</span></span><br><span class=\"line\">  <span class=\"meta\">@RequestMapping(&quot;/account/decrease&quot;)</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> CommonResult <span class=\"title\">decrease</span><span class=\"params\">(Long userId, BigDecimal money)</span> </span>&#123;</span><br><span class=\"line\">    accountService.decrease(userId, money);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> CommonResult(<span class=\"number\">200</span>, <span class=\"string\">&quot;扣减账户余额成功！&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"globaltransactional-使用\"><a class=\"markdownIt-Anchor\" href=\"#globaltransactional-使用\">#</a> @GlobalTransactional 使用</h3>\n<p>正常下单</p>\n<figure class=\"highlight http\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://localhost:2001/order/create?userld=1&amp;productld=1&amp;count=10&amp;money=100</span><br></pre></td></tr></table></figure>\n<p>正常情况下，下订单后会下订单、减库存、扣余额、改订单状态</p>\n<p>异常情况下，任何一个环节出错没有对应的回退机制，会导致中间任何一项数据出现脏数据</p>\n<h4 id=\"模拟-accountserviceimpl-添加超时\"><a class=\"markdownIt-Anchor\" href=\"#模拟-accountserviceimpl-添加超时\">#</a> 模拟 AccountServiceImpl 添加超时</h4>\n<p>OpenFeign 的调用默认时间是 1s 以内，所以最后会抛异常</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AccountServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title\">AccountService</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Logger LOGGER = LoggerFactory.getLogger(AccountServiceImpl.class);</span><br><span class=\"line\">  <span class=\"meta\">@Resource</span> AccountDao accountDao;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/** 扣减账户余额 */</span></span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">decrease</span><span class=\"params\">(Long userId, BigDecimal money)</span> </span>&#123;</span><br><span class=\"line\">    LOGGER.info(<span class=\"string\">&quot;-------&gt;account-service中扣减账户余额开始&quot;</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 模拟超时异常，全局事务回滚</span></span><br><span class=\"line\">    <span class=\"comment\">// 暂停几秒钟线程</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      TimeUnit.SECONDS.sleep(<span class=\"number\">20</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">      e.printStackTrace();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    accountDao.decrease(userId, money);</span><br><span class=\"line\">    LOGGER.info(<span class=\"string\">&quot;-------&gt;account-service中扣减账户余额结束&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>数据库情况</p>\n<p><img data-src=\"%E6%9C%AA%E5%8A%A0%E5%85%A8%E5%B1%80%E4%BA%8B%E5%8A%A1%E7%9A%84%E6%95%B0%E6%8D%AE%E5%BA%93%E6%83%85%E5%86%B5.png\" alt=\"img\"></p>\n<p>故障情况</p>\n<ul>\n<li>当库存和账户金额扣减后，订单状态并没有设置为已经完成，没有从零改为 1</li>\n<li>而且由于 feign 的重试机制，账户余额还有可能被多次扣减</li>\n</ul>\n<h4 id=\"globaltransactional开启全局事务\"><a class=\"markdownIt-Anchor\" href=\"#globaltransactional开启全局事务\">#</a> @GlobalTransactional 开启全局事务</h4>\n<p>OrderServiceImpl</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> com.atguigu.springcloud.alibaba.dao.OrderDao;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.atguigu.springcloud.alibaba.domain.Order;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.seata.spring.annotation.GlobalTransactional;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.annotation.Resource;</span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Service;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OrderServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title\">OrderService</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"meta\">@Resource</span> <span class=\"keyword\">private</span> OrderDao orderDao;</span><br><span class=\"line\">  <span class=\"meta\">@Resource</span> <span class=\"keyword\">private</span> StorageService storageService;</span><br><span class=\"line\">  <span class=\"meta\">@Resource</span> <span class=\"keyword\">private</span> AccountService accountService;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/** 创建订单 -&gt; 调用库存服务扣减库存 -&gt; 调用账户服务扣减账户余额 -&gt; 修改订单状态 简单说：下订单 -&gt; 扣库存 -&gt; 减余额 -&gt; 改状态 */</span></span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"comment\">// rollbackFor = Exception.class 表示对任意异常都进行回滚</span></span><br><span class=\"line\">  <span class=\"meta\">@GlobalTransactional(name = &quot;fsp-create-order&quot;, rollbackFor = Exception.class)</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">create</span><span class=\"params\">(Order order)</span> </span>&#123;</span><br><span class=\"line\">    log.info(<span class=\"string\">&quot;-----&gt;开始新建订单&quot;</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 1 新建订单</span></span><br><span class=\"line\">    orderDao.create(order);</span><br><span class=\"line\">    <span class=\"comment\">// 2 扣减库存</span></span><br><span class=\"line\">    log.info(<span class=\"string\">&quot;-----&gt;订单微服务开始调用库存，做扣减Count&quot;</span>);</span><br><span class=\"line\">    storageService.decrease(order.getProductId(), order.getCount());</span><br><span class=\"line\">    log.info(<span class=\"string\">&quot;-----&gt;订单微服务开始调用库存，做扣减end&quot;</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 3 扣减账户</span></span><br><span class=\"line\">    log.info(<span class=\"string\">&quot;-----&gt;订单微服务开始调用账户，做扣减Money&quot;</span>);</span><br><span class=\"line\">    accountService.decrease(order.getUserId(), order.getMoney());</span><br><span class=\"line\">    log.info(<span class=\"string\">&quot;-----&gt;订单微服务开始调用账户，做扣减end&quot;</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 4 修改订单状态，从零到 1,1 代表已经完成</span></span><br><span class=\"line\">    log.info(<span class=\"string\">&quot;-----&gt;修改订单状态开始&quot;</span>);</span><br><span class=\"line\">    orderDao.update(order.getUserId(), <span class=\"number\">0</span>);</span><br><span class=\"line\">    log.info(<span class=\"string\">&quot;-----&gt;修改订单状态结束&quot;</span>);</span><br><span class=\"line\">    log.info(<span class=\"string\">&quot;-----&gt;下订单结束了，O(∩_∩)O哈哈~&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>再次模拟 AccountServiceImpl 添加超时，下单后三个数据库数据都没有改变，达到了分支事务异常，全局回滚的效果</p>\n<h1 id=\"seata-之全局事务原理\"><a class=\"markdownIt-Anchor\" href=\"#seata-之全局事务原理\">#</a> Seata 之全局事务原理</h1>\n<h3 id=\"事务二阶段执行流程\"><a class=\"markdownIt-Anchor\" href=\"#事务二阶段执行流程\">#</a> 事务二阶段执行流程</h3>\n<ul>\n<li>\n<p>一阶段加载：</p>\n<p>解析业务 sql，找到业务 sql 要更新的业务数据，生成 before image</p>\n<p>执行业务 sql，更新业务数据</p>\n<p>业务数据更新后，保存新的业务数据为 after image ，生成行锁</p>\n</li>\n<li>\n<p>二阶段提交：</p>\n<p>如果全部事务顺利提交，Seata 框架将  before image、after image、行锁全部删除</p>\n</li>\n<li>\n<p>二阶段回滚：</p>\n<p>如果需要回滚，Seata 将会用 before image 生成 逆向 sql 还原业务数据，但需要先检查脏写，对比数据库当前业务数据和 after image，如果一致，则没有脏写，可以回滚；如果不一致，有脏写，则需要转人工处理。</p>\n</li>\n</ul>\n<p><img data-src=\"%E4%BA%8B%E5%8A%A1%E4%BA%8C%E9%98%B6%E6%AE%B5%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B.png\" alt=\"img\"></p>\n","site":{"data":{"languages":{"zh-CN":{"post":{"copyright":{"author":"本文博主"}}},"en":{"menu":{"travellings":"Travellings"}}}}},"length":34226,"excerpt":"","more":"<h2 id=\"分布式事务问题\"><a class=\"markdownIt-Anchor\" href=\"#分布式事务问题\">#</a> 分布式事务问题</h2>\n<p>分布式前</p>\n<ul>\n<li>\n<p>单机单库没这个问题</p>\n</li>\n<li>\n<p>从 1:1 -&gt; 1:N -&gt; N:N</p>\n<p>单体应用被拆分成微服务应用，原来的三个模块被拆分成三个独立的应用，分别使用三个独立的数据源，业务操作需要调用三个服务来完成。此时每个服务内部的数据一致性由本地事务来保证， 但是全局的数据一致性问题没法保证。</p>\n<p><img data-src=\"seata%E6%9E%B6%E6%9E%84.png\" alt=\"img\"></p>\n</li>\n</ul>\n<p>一句话：一次业务操作需要跨多个数据源或需要跨多个系统进行远程调用，就会产生分布式事务问题。</p>\n<h2 id=\"seata简介\"><a class=\"markdownIt-Anchor\" href=\"#seata简介\">#</a> Seata 简介</h2>\n<h3 id=\"是什么\"><a class=\"markdownIt-Anchor\" href=\"#是什么\">#</a> 是什么？</h3>\n<p>Seata 是一款开源的分布式事务解决方案，致力于提供高性能和简单易用的分布式事务服务。Seata 将为用户提供了 AT、TCC、SAGA 和 XA 事务模式，为用户打造一站式的分布式解决方案。</p>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL3NlYXRhLmlvL3poLWNuL2luZGV4Lmh0bWw=\">官方地址</span></p>\n<h3 id=\"1-xid3-组件模型\"><a class=\"markdownIt-Anchor\" href=\"#1-xid3-组件模型\">#</a> 1 XID+3 组件模型</h3>\n<h5 id=\"tc-transaction-coordinator-事务协调者\"><a class=\"markdownIt-Anchor\" href=\"#tc-transaction-coordinator-事务协调者\">#</a> TC (Transaction Coordinator) - 事务协调者</h5>\n<p>维护全局和分支事务的状态，驱动全局事务提交或回滚。</p>\n<h5 id=\"tm-transaction-manager-事务管理器\"><a class=\"markdownIt-Anchor\" href=\"#tm-transaction-manager-事务管理器\">#</a> TM (Transaction Manager) - 事务管理器</h5>\n<p>定义全局事务的范围：开始全局事务、提交或回滚全局事务。</p>\n<h5 id=\"rm-resource-manager-资源管理器\"><a class=\"markdownIt-Anchor\" href=\"#rm-resource-manager-资源管理器\">#</a> RM (Resource Manager) - 资源管理器</h5>\n<p>管理分支事务处理的资源，与 TC 交谈以注册分支事务和报告分支事务的状态，并驱动分支事务提交或回滚。</p>\n<h5 id=\"xidtransaction-id-全局事务id\"><a class=\"markdownIt-Anchor\" href=\"#xidtransaction-id-全局事务id\">#</a> XID (Transaction ID) - 全局事务 ID</h5>\n<h3 id=\"处理过程\"><a class=\"markdownIt-Anchor\" href=\"#处理过程\">#</a> 处理过程</h3>\n<ol>\n<li>TM 向 TC 申请开启一个全局事务，全局事务创建成功并生成一个全局唯一的 XID；</li>\n<li>XID 在微服务调用链路的上下文中传播；</li>\n<li>RM 向 TC 注册分支事务，将其纳入 XID 对应全局事务的管辖；</li>\n<li>TM 向 TC 发起针对 XID 的全局提交或回滚决议；</li>\n<li>TC 调度 XID 下管辖的全部分支事务完成提交或回滚请求。</li>\n</ol>\n<p><img data-src=\"seata%E6%A8%A1%E5%9E%8B%E6%B5%81%E7%A8%8B.png\" alt=\"img\"></p>\n<h2 id=\"seata实战\"><a class=\"markdownIt-Anchor\" href=\"#seata实战\">#</a> Seata 实战</h2>\n<h3 id=\"安装seata-server\"><a class=\"markdownIt-Anchor\" href=\"#安装seata-server\">#</a> 安装 Seata server</h3>\n<p>下载地址：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3NlYXRhL3NlYXRhL3JlbGVhc2Vz\">https://github.com/seata/seata/releases</span></p>\n<p>下载版本 - 1.4.2</p>\n<p>将 seata-server-1.4.2.tar.gz 解压到指定目录并修改 conf 目录下的 file.conf 配置文件</p>\n<p>将原始 file.conf 文件备份成 file.conf.bak</p>\n<h4 id=\"修改seata配置文件内容\"><a class=\"markdownIt-Anchor\" href=\"#修改seata配置文件内容\">#</a> 修改 Seata 配置文件内容</h4>\n<p>store 模块：修改 mode 为 db 模式，并增加数据库的相关配置</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">store</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">## store mode: file、db、redis</span></span><br><span class=\"line\">  <span class=\"string\">mode</span> <span class=\"string\">=</span> <span class=\"string\">&quot;db&quot;</span></span><br><span class=\"line\">  <span class=\"comment\">## rsa decryption public key</span></span><br><span class=\"line\">  <span class=\"string\">publicKey</span> <span class=\"string\">=</span> <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">  <span class=\"comment\">## file store property</span></span><br><span class=\"line\">  <span class=\"string\">file</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">## store location dir</span></span><br><span class=\"line\">    <span class=\"string\">dir</span> <span class=\"string\">=</span> <span class=\"string\">&quot;sessionStore&quot;</span></span><br><span class=\"line\">    <span class=\"comment\"># branch session size , if exceeded first try compress lockkey, still exceeded throws exceptions</span></span><br><span class=\"line\">    <span class=\"string\">maxBranchSessionSize</span> <span class=\"string\">=</span> <span class=\"number\">16384</span></span><br><span class=\"line\">    <span class=\"comment\"># globe session size , if exceeded throws exceptions</span></span><br><span class=\"line\">    <span class=\"string\">maxGlobalSessionSize</span> <span class=\"string\">=</span> <span class=\"number\">512</span></span><br><span class=\"line\">    <span class=\"comment\"># file buffer size , if exceeded allocate new buffer</span></span><br><span class=\"line\">    <span class=\"string\">fileWriteBufferCacheSize</span> <span class=\"string\">=</span> <span class=\"number\">16384</span></span><br><span class=\"line\">    <span class=\"comment\"># when recover batch read size</span></span><br><span class=\"line\">    <span class=\"string\">sessionReloadReadSize</span> <span class=\"string\">=</span> <span class=\"number\">100</span></span><br><span class=\"line\">    <span class=\"comment\"># async, sync</span></span><br><span class=\"line\">    <span class=\"string\">flushDiskMode</span> <span class=\"string\">=</span> <span class=\"string\">async</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">## database store property</span></span><br><span class=\"line\">  <span class=\"string\">db</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">## the implement of javax.sql.DataSource, such as DruidDataSource(druid)/BasicDataSource(dbcp)/HikariDataSource(hikari) etc.</span></span><br><span class=\"line\">    <span class=\"string\">datasource</span> <span class=\"string\">=</span> <span class=\"string\">&quot;dbcp&quot;</span></span><br><span class=\"line\">    <span class=\"comment\">## mysql/oracle/postgresql/h2/oceanbase etc.</span></span><br><span class=\"line\">    <span class=\"string\">dbType</span> <span class=\"string\">=</span> <span class=\"string\">&quot;mysql&quot;</span></span><br><span class=\"line\">    <span class=\"string\">driverClassName</span> <span class=\"string\">=</span> <span class=\"string\">&quot;com.mysql.cj.jdbc.Driver&quot;</span></span><br><span class=\"line\">    <span class=\"comment\">## if using mysql to store the data, recommend add rewriteBatchedStatements=true in jdbc connection param</span></span><br><span class=\"line\">    <span class=\"string\">url</span> <span class=\"string\">=</span> <span class=\"string\">&quot;jdbc:mysql://127.0.0.1:3306/seata?rewriteBatchedStatements=true&quot;</span></span><br><span class=\"line\">    <span class=\"string\">user</span> <span class=\"string\">=</span> <span class=\"string\">&quot;root&quot;</span></span><br><span class=\"line\">    <span class=\"string\">password</span> <span class=\"string\">=</span> <span class=\"string\">&quot;123456&quot;</span></span><br><span class=\"line\">    <span class=\"string\">minConn</span> <span class=\"string\">=</span> <span class=\"number\">5</span></span><br><span class=\"line\">    <span class=\"string\">maxConn</span> <span class=\"string\">=</span> <span class=\"number\">100</span></span><br><span class=\"line\">    <span class=\"string\">globalTable</span> <span class=\"string\">=</span> <span class=\"string\">&quot;global_table&quot;</span></span><br><span class=\"line\">    <span class=\"string\">branchTable</span> <span class=\"string\">=</span> <span class=\"string\">&quot;branch_table&quot;</span></span><br><span class=\"line\">    <span class=\"string\">lockTable</span> <span class=\"string\">=</span> <span class=\"string\">&quot;lock_table&quot;</span></span><br><span class=\"line\">    <span class=\"string\">queryLimit</span> <span class=\"string\">=</span> <span class=\"number\">100</span></span><br><span class=\"line\">    <span class=\"string\">maxWait</span> <span class=\"string\">=</span> <span class=\"number\">5000</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"建立seata数据库\"><a class=\"markdownIt-Anchor\" href=\"#建立seata数据库\">#</a> 建立 Seata 数据库</h3>\n<p>mysql 数据库新建库 seata，在 seata 库里建表</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- the table to store GlobalSession data</span></span><br><span class=\"line\"><span class=\"keyword\">drop</span> <span class=\"keyword\">table</span> if <span class=\"keyword\">exists</span> `global_table`;</span><br><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span> `global_table` (</span><br><span class=\"line\">  `xid` <span class=\"type\">varchar</span>(<span class=\"number\">128</span>)  <span class=\"keyword\">not</span> <span class=\"keyword\">null</span>,</span><br><span class=\"line\">  `transaction_id` <span class=\"type\">bigint</span>,</span><br><span class=\"line\">  `status` tinyint <span class=\"keyword\">not</span> <span class=\"keyword\">null</span>,</span><br><span class=\"line\">  `application_id` <span class=\"type\">varchar</span>(<span class=\"number\">32</span>),</span><br><span class=\"line\">  `transaction_service_group` <span class=\"type\">varchar</span>(<span class=\"number\">32</span>),</span><br><span class=\"line\">  `transaction_name` <span class=\"type\">varchar</span>(<span class=\"number\">128</span>),</span><br><span class=\"line\">  `timeout` <span class=\"type\">int</span>,</span><br><span class=\"line\">  `begin_time` <span class=\"type\">bigint</span>,</span><br><span class=\"line\">  `application_data` <span class=\"type\">varchar</span>(<span class=\"number\">2000</span>),</span><br><span class=\"line\">  `gmt_create` datetime,</span><br><span class=\"line\">  `gmt_modified` datetime,</span><br><span class=\"line\">  <span class=\"keyword\">primary</span> key (`xid`),</span><br><span class=\"line\">  key `idx_gmt_modified_status` (`gmt_modified`, `status`),</span><br><span class=\"line\">  key `idx_transaction_id` (`transaction_id`)</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- the table to store BranchSession data</span></span><br><span class=\"line\"><span class=\"keyword\">drop</span> <span class=\"keyword\">table</span> if <span class=\"keyword\">exists</span> `branch_table`;</span><br><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span> `branch_table` (</span><br><span class=\"line\">  `branch_id` <span class=\"type\">bigint</span> <span class=\"keyword\">not</span> <span class=\"keyword\">null</span>,</span><br><span class=\"line\">  `xid` <span class=\"type\">varchar</span>(<span class=\"number\">128</span>) <span class=\"keyword\">not</span> <span class=\"keyword\">null</span>,</span><br><span class=\"line\">  `transaction_id` <span class=\"type\">bigint</span> ,</span><br><span class=\"line\">  `resource_group_id` <span class=\"type\">varchar</span>(<span class=\"number\">32</span>),</span><br><span class=\"line\">  `resource_id` <span class=\"type\">varchar</span>(<span class=\"number\">256</span>) ,</span><br><span class=\"line\">  `lock_key` <span class=\"type\">varchar</span>(<span class=\"number\">128</span>) ,</span><br><span class=\"line\">  `branch_type` <span class=\"type\">varchar</span>(<span class=\"number\">8</span>) ,</span><br><span class=\"line\">  `status` tinyint,</span><br><span class=\"line\">  `client_id` <span class=\"type\">varchar</span>(<span class=\"number\">64</span>),</span><br><span class=\"line\">  `application_data` <span class=\"type\">varchar</span>(<span class=\"number\">2000</span>),</span><br><span class=\"line\">  `gmt_create` datetime,</span><br><span class=\"line\">  `gmt_modified` datetime,</span><br><span class=\"line\">  <span class=\"keyword\">primary</span> key (`branch_id`),</span><br><span class=\"line\">  key `idx_xid` (`xid`)</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- the table to store lock data</span></span><br><span class=\"line\"><span class=\"keyword\">drop</span> <span class=\"keyword\">table</span> if <span class=\"keyword\">exists</span> `lock_table`;</span><br><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span> `lock_table` (</span><br><span class=\"line\">  `row_key` <span class=\"type\">varchar</span>(<span class=\"number\">128</span>) <span class=\"keyword\">not</span> <span class=\"keyword\">null</span>,</span><br><span class=\"line\">  `xid` <span class=\"type\">varchar</span>(<span class=\"number\">96</span>),</span><br><span class=\"line\">  `transaction_id` long ,</span><br><span class=\"line\">  `branch_id` long,</span><br><span class=\"line\">  `resource_id` <span class=\"type\">varchar</span>(<span class=\"number\">256</span>) ,</span><br><span class=\"line\">  `table_name` <span class=\"type\">varchar</span>(<span class=\"number\">32</span>) ,</span><br><span class=\"line\">  `pk` <span class=\"type\">varchar</span>(<span class=\"number\">36</span>) ,</span><br><span class=\"line\">  `gmt_create` datetime ,</span><br><span class=\"line\">  `gmt_modified` datetime,</span><br><span class=\"line\">  <span class=\"keyword\">primary</span> key(`row_key`)</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<h3 id=\"连接nacos\"><a class=\"markdownIt-Anchor\" href=\"#连接nacos\">#</a> 连接 Nacos</h3>\n<p>修改 conf 目录下的 registry.conf 配置文件</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">registry</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\"># file 、nacos 、eureka、redis、zk、consul、etcd3、sofa</span></span><br><span class=\"line\">  <span class=\"comment\"># 设置注册中心为nacos</span></span><br><span class=\"line\">  <span class=\"string\">type</span> <span class=\"string\">=</span> <span class=\"string\">&quot;nacos&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"string\">nacos</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">## 设置nacos服务地址</span></span><br><span class=\"line\">    <span class=\"string\">serverAddr</span> <span class=\"string\">=</span> <span class=\"string\">&quot;localhost:8848&quot;</span></span><br><span class=\"line\">    <span class=\"string\">namespace</span> <span class=\"string\">=</span> <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"string\">cluster</span> <span class=\"string\">=</span> <span class=\"string\">&quot;default&quot;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"建立seata业务数据库\"><a class=\"markdownIt-Anchor\" href=\"#建立seata业务数据库\">#</a> 建立 Seata 业务数据库</h3>\n<h4 id=\"业务流程\"><a class=\"markdownIt-Anchor\" href=\"#业务流程\">#</a> 业务流程</h4>\n<p>浏览器模拟用户下单操作：</p>\n<ol>\n<li>调用订单服务增加订单记录</li>\n<li>调用库存服务减少相应库存</li>\n<li>调用账号服务减少账号存款</li>\n<li>调用订单服务调整订单状态为已支付</li>\n</ol>\n<h4 id=\"业务数据库\"><a class=\"markdownIt-Anchor\" href=\"#业务数据库\">#</a> 业务数据库</h4>\n<ul>\n<li>seata_order：存储订单的数据库</li>\n<li>seata_storage：存储库存的数据库</li>\n<li>seata_account：存储账户信息的数据库</li>\n</ul>\n<h4 id=\"建库语句\"><a class=\"markdownIt-Anchor\" href=\"#建库语句\">#</a> 建库语句</h4>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> DATABASE seata_order;</span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> DATABASE seata_storage;</span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> DATABASE seata_account;</span><br></pre></td></tr></table></figure>\n<h4 id=\"建表语句\"><a class=\"markdownIt-Anchor\" href=\"#建表语句\">#</a> 建表语句</h4>\n<p>seata_order 库下建 t_order 表</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> t_order (</span><br><span class=\"line\">    `id` <span class=\"type\">BIGINT</span>(<span class=\"number\">11</span>) <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span> AUTO_INCREMENT <span class=\"keyword\">PRIMARY</span> KEY,</span><br><span class=\"line\">    `user_id` <span class=\"type\">BIGINT</span>(<span class=\"number\">11</span>) <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">NULL</span> COMMENT <span class=\"string\">&#x27;用户id&#x27;</span>,</span><br><span class=\"line\">    `product_id` <span class=\"type\">BIGINT</span>(<span class=\"number\">11</span>) <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">NULL</span> COMMENT <span class=\"string\">&#x27;产品id&#x27;</span>,</span><br><span class=\"line\">    `count` <span class=\"type\">INT</span>(<span class=\"number\">11</span>) <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">NULL</span> COMMENT <span class=\"string\">&#x27;数量&#x27;</span>,</span><br><span class=\"line\">    `money` <span class=\"type\">DECIMAL</span>(<span class=\"number\">11</span>,<span class=\"number\">0</span>) <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">NULL</span> COMMENT<span class=\"string\">&#x27;金额&#x27;</span>,</span><br><span class=\"line\">    `status` <span class=\"type\">INT</span>(<span class=\"number\">1</span>) <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">NULL</span> COMMENT <span class=\"string\">&#x27;订单状态: 0:创建中; 1:已完结&#x27;</span></span><br><span class=\"line\">) ENGINE<span class=\"operator\">=</span>INNODB AUTO_INCREMENT<span class=\"operator\">=</span><span class=\"number\">2</span> <span class=\"keyword\">DEFAULT</span> CHARSET<span class=\"operator\">=</span>utf8;</span><br></pre></td></tr></table></figure>\n<p>seata_storage 库下建 t_storage 表</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> t_storage (</span><br><span class=\"line\">        `id` <span class=\"type\">BIGINT</span>(<span class=\"number\">11</span>) <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span> AUTO_INCREMENT <span class=\"keyword\">PRIMARY</span> KEY,</span><br><span class=\"line\">        `product_id` <span class=\"type\">BIGINT</span>(<span class=\"number\">11</span>) <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">NULL</span> COMMENT <span class=\"string\">&#x27;产品id&#x27;</span>,</span><br><span class=\"line\">        `total` <span class=\"type\">INT</span>(<span class=\"number\">11</span>) <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">NULL</span> COMMENT <span class=\"string\">&#x27;总库存&#x27;</span>,</span><br><span class=\"line\">        `used` <span class=\"type\">INT</span>(<span class=\"number\">11</span>) <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">NULL</span> COMMENT <span class=\"string\">&#x27;已用库存&#x27;</span>,</span><br><span class=\"line\">        `residue` <span class=\"type\">INT</span>(<span class=\"number\">11</span>) <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">NULL</span> COMMENT <span class=\"string\">&#x27;剩余库存&#x27;</span></span><br><span class=\"line\">) ENGINE<span class=\"operator\">=</span>INNODB AUTO_INCREMENT<span class=\"operator\">=</span><span class=\"number\">2</span> <span class=\"keyword\">DEFAULT</span> CHARSET<span class=\"operator\">=</span>utf8;</span><br><span class=\"line\"></span><br><span class=\"line\"># 初始化一条产品的库存记录</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> seata_storage.t_storage(`id`, `product_id`, `total`, `used`, `residue`)</span><br><span class=\"line\"><span class=\"keyword\">VALUES</span> (<span class=\"string\">&#x27;1&#x27;</span>, <span class=\"string\">&#x27;1&#x27;</span>, <span class=\"string\">&#x27;100&#x27;</span>, <span class=\"string\">&#x27;0&#x27;</span>,<span class=\"string\">&#x27;100&#x27;</span>);</span><br></pre></td></tr></table></figure>\n<p>seata_account 库下建 t_account 表</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> t_account(</span><br><span class=\"line\">    `id` <span class=\"type\">BIGINT</span>(<span class=\"number\">11</span>) <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span> AUTO_INCREMENT <span class=\"keyword\">PRIMARY</span> KEY COMMENT <span class=\"string\">&#x27;id&#x27;</span>,</span><br><span class=\"line\">    `user_id` <span class=\"type\">BIGINT</span>(<span class=\"number\">11</span>) <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">NULL</span> COMMENT <span class=\"string\">&#x27;用户id&#x27;</span>,</span><br><span class=\"line\">    `total` <span class=\"type\">DECIMAL</span>(<span class=\"number\">10</span>,<span class=\"number\">0</span>) <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">NULL</span> COMMENT <span class=\"string\">&#x27;总额度&#x27;</span>,</span><br><span class=\"line\">    `used` <span class=\"type\">DECIMAL</span>(<span class=\"number\">10</span>,<span class=\"number\">0</span>) <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">NULL</span> COMMENT <span class=\"string\">&#x27;已用余额&#x27;</span>,</span><br><span class=\"line\">    `residue` <span class=\"type\">DECIMAL</span>(<span class=\"number\">10</span>,<span class=\"number\">0</span>) <span class=\"keyword\">DEFAULT</span> <span class=\"string\">&#x27;0&#x27;</span> COMMENT <span class=\"string\">&#x27;剩余可用额度&#x27;</span></span><br><span class=\"line\">) ENGINE<span class=\"operator\">=</span>INNODB AUTO_INCREMENT<span class=\"operator\">=</span><span class=\"number\">2</span> <span class=\"keyword\">DEFAULT</span> CHARSET<span class=\"operator\">=</span>utf8;</span><br><span class=\"line\"></span><br><span class=\"line\"># 初始化一条用户记录</span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> seata_account.t_account(`id`, `user_id`, `total`, `used`, `residue`)</span><br><span class=\"line\"><span class=\"keyword\">VALUES</span> (<span class=\"string\">&#x27;1&#x27;</span>, <span class=\"string\">&#x27;1&#x27;</span>, <span class=\"string\">&#x27;1000&#x27;</span>, <span class=\"string\">&#x27;0&#x27;</span>, <span class=\"string\">&#x27;1000&#x27;</span>);</span><br></pre></td></tr></table></figure>\n<p>seata_order、seata_storage、seata_account 库下建各自的回滚日志表</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">drop</span> <span class=\"keyword\">table</span> `undo_log`;</span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> `undo_log` (</span><br><span class=\"line\">  `id` <span class=\"type\">bigint</span>(<span class=\"number\">20</span>) <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span> AUTO_INCREMENT,</span><br><span class=\"line\">  `branch_id` <span class=\"type\">bigint</span>(<span class=\"number\">20</span>) <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span>,</span><br><span class=\"line\">  `xid` <span class=\"type\">varchar</span>(<span class=\"number\">100</span>) <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span>,</span><br><span class=\"line\">  `context` <span class=\"type\">varchar</span>(<span class=\"number\">128</span>) <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span>,</span><br><span class=\"line\">  `rollback_info` longblob <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span>,</span><br><span class=\"line\">  `log_status` <span class=\"type\">int</span>(<span class=\"number\">11</span>) <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span>,</span><br><span class=\"line\">  `log_created` datetime <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span>,</span><br><span class=\"line\">  `log_modified` datetime <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span>,</span><br><span class=\"line\">  `ext` <span class=\"type\">varchar</span>(<span class=\"number\">100</span>) <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">NULL</span>,</span><br><span class=\"line\">  <span class=\"keyword\">PRIMARY</span> KEY (`id`),</span><br><span class=\"line\">  <span class=\"keyword\">UNIQUE</span> KEY `ux_undo_log` (`xid`,`branch_id`)</span><br><span class=\"line\">) ENGINE<span class=\"operator\">=</span>InnoDB AUTO_INCREMENT<span class=\"operator\">=</span><span class=\"number\">1</span> <span class=\"keyword\">DEFAULT</span> CHARSET<span class=\"operator\">=</span>utf8;</span><br></pre></td></tr></table></figure>\n<h3 id=\"order-module-模块搭建\"><a class=\"markdownIt-Anchor\" href=\"#order-module-模块搭建\">#</a> Order-Module 模块搭建</h3>\n<p>模块名：seata-order-service2001</p>\n<p>职责：提供订单服务，下订单 -&gt; 减库存 -&gt; 扣余额 -&gt; 改订单状态</p>\n<h4 id=\"配置部分\"><a class=\"markdownIt-Anchor\" href=\"#配置部分\">#</a> 配置部分</h4>\n<p>POM</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">project</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>cloud2020<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.atguigu.springcloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.0-SNAPSHOT<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">modelVersion</span>&gt;</span>4.0.0<span class=\"tag\">&lt;/<span class=\"name\">modelVersion</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>seata-order-service2001<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">maven.compiler.source</span>&gt;</span>8<span class=\"tag\">&lt;/<span class=\"name\">maven.compiler.source</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">maven.compiler.target</span>&gt;</span>8<span class=\"tag\">&lt;/<span class=\"name\">maven.compiler.target</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--nacos--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.alibaba.cloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--seata--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.alibaba.cloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-seata<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">exclusions</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">exclusion</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>seata-all<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>io.seata<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">exclusion</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">exclusions</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>io.seata<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>seata-all<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>0.9.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--feign--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.cloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--web-actuator--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-web<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--mysql-druid--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>mysql<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mysql-connector-java<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--      &lt;version&gt;5.1.37&lt;/version&gt;--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.alibaba<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>druid-spring-boot-starter<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.1.10<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.mybatis.spring.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.0.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-test<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.projectlombok<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>lombok<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">optional</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">optional</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.atguigu.springcloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>cloudapicommons<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;project.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">project</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>application.yml</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">2001</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">application:</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">seata-order-service</span></span><br><span class=\"line\">  <span class=\"attr\">cloud:</span></span><br><span class=\"line\">    <span class=\"attr\">alibaba:</span></span><br><span class=\"line\">      <span class=\"attr\">seata:</span></span><br><span class=\"line\">        <span class=\"comment\">#自定义事务组名称需要与 seata-server 中的对应</span></span><br><span class=\"line\">        <span class=\"attr\">tx-service-group:</span> <span class=\"string\">fsp_tx_group</span></span><br><span class=\"line\">    <span class=\"attr\">nacos:</span></span><br><span class=\"line\">      <span class=\"attr\">discovery:</span></span><br><span class=\"line\">        <span class=\"attr\">server-addr:</span> <span class=\"string\">localhost:15003</span></span><br><span class=\"line\">  <span class=\"attr\">datasource:</span></span><br><span class=\"line\">    <span class=\"attr\">driver-class-name:</span> <span class=\"string\">com.mysql.jdbc.Driver</span></span><br><span class=\"line\">    <span class=\"attr\">url:</span> <span class=\"string\">jdbc:mysql://localhost:3306/seata_order</span></span><br><span class=\"line\">    <span class=\"attr\">username:</span> <span class=\"string\">root</span></span><br><span class=\"line\">    <span class=\"attr\">password:</span> <span class=\"number\">123456</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">feign:</span></span><br><span class=\"line\">  <span class=\"attr\">hystrix:</span></span><br><span class=\"line\">    <span class=\"attr\">enabled:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">logging:</span></span><br><span class=\"line\">  <span class=\"attr\">level:</span></span><br><span class=\"line\">    <span class=\"attr\">io:</span></span><br><span class=\"line\">      <span class=\"attr\">seata:</span> <span class=\"string\">info</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">mybatis:</span></span><br><span class=\"line\">  <span class=\"attr\">mapperLocations:</span> <span class=\"string\">classpath:mapper/*.xml</span></span><br></pre></td></tr></table></figure>\n<p>file.conf</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">transport</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\"># tcp udt unix-domain-socket</span></span><br><span class=\"line\">  <span class=\"string\">type</span> <span class=\"string\">=</span> <span class=\"string\">&quot;TCP&quot;</span></span><br><span class=\"line\">  <span class=\"comment\">#NIO NATIVE</span></span><br><span class=\"line\">  <span class=\"string\">server</span> <span class=\"string\">=</span> <span class=\"string\">&quot;NIO&quot;</span></span><br><span class=\"line\">  <span class=\"comment\">#enable heartbeat</span></span><br><span class=\"line\">  <span class=\"string\">heartbeat</span> <span class=\"string\">=</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"comment\">#thread factory for netty</span></span><br><span class=\"line\">  <span class=\"string\">thread-factory</span> &#123;</span><br><span class=\"line\">    <span class=\"string\">boss-thread-prefix</span> <span class=\"string\">=</span> <span class=\"string\">&quot;NettyBoss&quot;</span></span><br><span class=\"line\">    <span class=\"string\">worker-thread-prefix</span> <span class=\"string\">=</span> <span class=\"string\">&quot;NettyServerNIOWorker&quot;</span></span><br><span class=\"line\">    <span class=\"string\">server-executor-thread-prefix</span> <span class=\"string\">=</span> <span class=\"string\">&quot;NettyServerBizHandler&quot;</span></span><br><span class=\"line\">    <span class=\"string\">share-boss-worker</span> <span class=\"string\">=</span> <span class=\"literal\">false</span></span><br><span class=\"line\">    <span class=\"string\">client-selector-thread-prefix</span> <span class=\"string\">=</span> <span class=\"string\">&quot;NettyClientSelector&quot;</span></span><br><span class=\"line\">    <span class=\"string\">client-selector-thread-size</span> <span class=\"string\">=</span> <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"string\">client-worker-thread-prefix</span> <span class=\"string\">=</span> <span class=\"string\">&quot;NettyClientWorkerThread&quot;</span></span><br><span class=\"line\">    <span class=\"comment\"># netty boss thread size,will not be used for UDT</span></span><br><span class=\"line\">    <span class=\"string\">boss-thread-size</span> <span class=\"string\">=</span> <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"comment\">#auto default pin or 8</span></span><br><span class=\"line\">    <span class=\"string\">worker-thread-size</span> <span class=\"string\">=</span> <span class=\"number\">8</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"string\">shutdown</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\"># when destroy server, wait seconds</span></span><br><span class=\"line\">    <span class=\"string\">wait</span> <span class=\"string\">=</span> <span class=\"number\">3</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"string\">serialization</span> <span class=\"string\">=</span> <span class=\"string\">&quot;seata&quot;</span></span><br><span class=\"line\">  <span class=\"string\">compressor</span> <span class=\"string\">=</span> <span class=\"string\">&quot;none&quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">service</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"string\">vgroup_mapping.fsp_tx_group</span> <span class=\"string\">=</span> <span class=\"string\">&quot;default&quot;</span> <span class=\"comment\">#修改自定义事务组名称</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"string\">default.grouplist</span> <span class=\"string\">=</span> <span class=\"string\">&quot;127.0.0.1:8091&quot;</span></span><br><span class=\"line\">  <span class=\"string\">enableDegrade</span> <span class=\"string\">=</span> <span class=\"literal\">false</span></span><br><span class=\"line\">  <span class=\"string\">disable</span> <span class=\"string\">=</span> <span class=\"literal\">false</span></span><br><span class=\"line\">  <span class=\"string\">max.commit.retry.timeout</span> <span class=\"string\">=</span> <span class=\"string\">&quot;-1&quot;</span></span><br><span class=\"line\">  <span class=\"string\">max.rollback.retry.timeout</span> <span class=\"string\">=</span> <span class=\"string\">&quot;-1&quot;</span></span><br><span class=\"line\">  <span class=\"string\">disableGlobalTransaction</span> <span class=\"string\">=</span> <span class=\"literal\">false</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">client</span> &#123;</span><br><span class=\"line\">  <span class=\"string\">async.commit.buffer.limit</span> <span class=\"string\">=</span> <span class=\"number\">10000</span></span><br><span class=\"line\">  <span class=\"string\">lock</span> &#123;</span><br><span class=\"line\">    <span class=\"string\">retry.internal</span> <span class=\"string\">=</span> <span class=\"number\">10</span></span><br><span class=\"line\">    <span class=\"string\">retry.times</span> <span class=\"string\">=</span> <span class=\"number\">30</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"string\">report.retry.count</span> <span class=\"string\">=</span> <span class=\"number\">5</span></span><br><span class=\"line\">  <span class=\"string\">tm.commit.retry.count</span> <span class=\"string\">=</span> <span class=\"number\">1</span></span><br><span class=\"line\">  <span class=\"string\">tm.rollback.retry.count</span> <span class=\"string\">=</span> <span class=\"number\">1</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## transaction log store</span></span><br><span class=\"line\"><span class=\"string\">store</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">## store mode: file、db</span></span><br><span class=\"line\">  <span class=\"string\">mode</span> <span class=\"string\">=</span> <span class=\"string\">&quot;db&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">## file store</span></span><br><span class=\"line\">  <span class=\"string\">file</span> &#123;</span><br><span class=\"line\">    <span class=\"string\">dir</span> <span class=\"string\">=</span> <span class=\"string\">&quot;sessionStore&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># branch session size , if exceeded first try compress lockkey, still exceeded throws exceptions</span></span><br><span class=\"line\">    <span class=\"string\">max-branch-session-size</span> <span class=\"string\">=</span> <span class=\"number\">16384</span></span><br><span class=\"line\">    <span class=\"comment\"># globe session size , if exceeded throws exceptions</span></span><br><span class=\"line\">    <span class=\"string\">max-global-session-size</span> <span class=\"string\">=</span> <span class=\"number\">512</span></span><br><span class=\"line\">    <span class=\"comment\"># file buffer size , if exceeded allocate new buffer</span></span><br><span class=\"line\">    <span class=\"string\">file-write-buffer-cache-size</span> <span class=\"string\">=</span> <span class=\"number\">16384</span></span><br><span class=\"line\">    <span class=\"comment\"># when recover batch read size</span></span><br><span class=\"line\">    <span class=\"string\">session.reload.read_size</span> <span class=\"string\">=</span> <span class=\"number\">100</span></span><br><span class=\"line\">    <span class=\"comment\"># async, sync</span></span><br><span class=\"line\">    <span class=\"string\">flush-disk-mode</span> <span class=\"string\">=</span> <span class=\"string\">async</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">## database store</span></span><br><span class=\"line\">  <span class=\"string\">db</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">## the implement of javax.sql.DataSource, such as DruidDataSource(druid)/BasicDataSource(dbcp) etc.</span></span><br><span class=\"line\">    <span class=\"string\">datasource</span> <span class=\"string\">=</span> <span class=\"string\">&quot;dbcp&quot;</span></span><br><span class=\"line\">    <span class=\"comment\">## mysql/oracle/h2/oceanbase etc.</span></span><br><span class=\"line\">    <span class=\"string\">db-type</span> <span class=\"string\">=</span> <span class=\"string\">&quot;mysql&quot;</span></span><br><span class=\"line\">    <span class=\"string\">driver-class-name</span> <span class=\"string\">=</span> <span class=\"string\">&quot;com.mysql.jdbc.Driver&quot;</span></span><br><span class=\"line\">    <span class=\"string\">url</span> <span class=\"string\">=</span> <span class=\"string\">&quot;jdbc:mysql://127.0.0.1:3306/seata&quot;</span></span><br><span class=\"line\">    <span class=\"string\">user</span> <span class=\"string\">=</span> <span class=\"string\">&quot;root&quot;</span></span><br><span class=\"line\">    <span class=\"string\">password</span> <span class=\"string\">=</span> <span class=\"string\">&quot;123456&quot;</span></span><br><span class=\"line\">    <span class=\"string\">min-conn</span> <span class=\"string\">=</span> <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"string\">max-conn</span> <span class=\"string\">=</span> <span class=\"number\">3</span></span><br><span class=\"line\">    <span class=\"string\">global.table</span> <span class=\"string\">=</span> <span class=\"string\">&quot;global_table&quot;</span></span><br><span class=\"line\">    <span class=\"string\">branch.table</span> <span class=\"string\">=</span> <span class=\"string\">&quot;branch_table&quot;</span></span><br><span class=\"line\">    <span class=\"string\">lock-table</span> <span class=\"string\">=</span> <span class=\"string\">&quot;lock_table&quot;</span></span><br><span class=\"line\">    <span class=\"string\">query-limit</span> <span class=\"string\">=</span> <span class=\"number\">100</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"string\">lock</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">## the lock store mode: local、remote</span></span><br><span class=\"line\">  <span class=\"string\">mode</span> <span class=\"string\">=</span> <span class=\"string\">&quot;remote&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"string\">local</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">## store locks in user&#x27;s database</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"string\">remote</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">## store locks in the seata&#x27;s server</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"string\">recovery</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">#schedule committing retry period in milliseconds</span></span><br><span class=\"line\">  <span class=\"string\">committing-retry-period</span> <span class=\"string\">=</span> <span class=\"number\">1000</span></span><br><span class=\"line\">  <span class=\"comment\">#schedule asyn committing retry period in milliseconds</span></span><br><span class=\"line\">  <span class=\"string\">asyn-committing-retry-period</span> <span class=\"string\">=</span> <span class=\"number\">1000</span></span><br><span class=\"line\">  <span class=\"comment\">#schedule rollbacking retry period in milliseconds</span></span><br><span class=\"line\">  <span class=\"string\">rollbacking-retry-period</span> <span class=\"string\">=</span> <span class=\"number\">1000</span></span><br><span class=\"line\">  <span class=\"comment\">#schedule timeout retry period in milliseconds</span></span><br><span class=\"line\">  <span class=\"string\">timeout-retry-period</span> <span class=\"string\">=</span> <span class=\"number\">1000</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">transaction</span> &#123;</span><br><span class=\"line\">  <span class=\"string\">undo.data.validation</span> <span class=\"string\">=</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"string\">undo.log.serialization</span> <span class=\"string\">=</span> <span class=\"string\">&quot;jackson&quot;</span></span><br><span class=\"line\">  <span class=\"string\">undo.log.save.days</span> <span class=\"string\">=</span> <span class=\"number\">7</span></span><br><span class=\"line\">  <span class=\"comment\">#schedule delete expired undo_log in milliseconds</span></span><br><span class=\"line\">  <span class=\"string\">undo.log.delete.period</span> <span class=\"string\">=</span> <span class=\"number\">86400000</span></span><br><span class=\"line\">  <span class=\"string\">undo.log.table</span> <span class=\"string\">=</span> <span class=\"string\">&quot;undo_log&quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## metrics settings</span></span><br><span class=\"line\"><span class=\"string\">metrics</span> &#123;</span><br><span class=\"line\">  <span class=\"string\">enabled</span> <span class=\"string\">=</span> <span class=\"literal\">false</span></span><br><span class=\"line\">  <span class=\"string\">registry-type</span> <span class=\"string\">=</span> <span class=\"string\">&quot;compact&quot;</span></span><br><span class=\"line\">  <span class=\"comment\"># multi exporters use comma divided</span></span><br><span class=\"line\">  <span class=\"string\">exporter-list</span> <span class=\"string\">=</span> <span class=\"string\">&quot;prometheus&quot;</span></span><br><span class=\"line\">  <span class=\"string\">exporter-prometheus-port</span> <span class=\"string\">=</span> <span class=\"number\">9898</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">support</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">## spring</span></span><br><span class=\"line\">  <span class=\"string\">spring</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\"># auto proxy the DataSource bean</span></span><br><span class=\"line\">    <span class=\"string\">datasource.autoproxy</span> <span class=\"string\">=</span> <span class=\"literal\">false</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>registry.conf</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">registry</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\"># file 、nacos 、eureka、redis、zk、consul、etcd3、sofa</span></span><br><span class=\"line\">  <span class=\"string\">type</span> <span class=\"string\">=</span> <span class=\"string\">&quot;nacos&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"string\">nacos</span> &#123;</span><br><span class=\"line\">    <span class=\"string\">serverAddr</span> <span class=\"string\">=</span> <span class=\"string\">&quot;localhost:15003&quot;</span></span><br><span class=\"line\">    <span class=\"string\">namespace</span> <span class=\"string\">=</span> <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"string\">cluster</span> <span class=\"string\">=</span> <span class=\"string\">&quot;default&quot;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"string\">eureka</span> &#123;</span><br><span class=\"line\">    <span class=\"string\">serviceUrl</span> <span class=\"string\">=</span> <span class=\"string\">&quot;http://localhost:8761/eureka&quot;</span></span><br><span class=\"line\">    <span class=\"string\">application</span> <span class=\"string\">=</span> <span class=\"string\">&quot;default&quot;</span></span><br><span class=\"line\">    <span class=\"string\">weight</span> <span class=\"string\">=</span> <span class=\"string\">&quot;1&quot;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"string\">redis</span> &#123;</span><br><span class=\"line\">    <span class=\"string\">serverAddr</span> <span class=\"string\">=</span> <span class=\"string\">&quot;localhost:6379&quot;</span></span><br><span class=\"line\">    <span class=\"string\">db</span> <span class=\"string\">=</span> <span class=\"string\">&quot;0&quot;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"string\">zk</span> &#123;</span><br><span class=\"line\">    <span class=\"string\">cluster</span> <span class=\"string\">=</span> <span class=\"string\">&quot;default&quot;</span></span><br><span class=\"line\">    <span class=\"string\">serverAddr</span> <span class=\"string\">=</span> <span class=\"string\">&quot;127.0.0.1:2181&quot;</span></span><br><span class=\"line\">    <span class=\"string\">session.timeout</span> <span class=\"string\">=</span> <span class=\"number\">6000</span></span><br><span class=\"line\">    <span class=\"string\">connect.timeout</span> <span class=\"string\">=</span> <span class=\"number\">2000</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"string\">consul</span> &#123;</span><br><span class=\"line\">    <span class=\"string\">cluster</span> <span class=\"string\">=</span> <span class=\"string\">&quot;default&quot;</span></span><br><span class=\"line\">    <span class=\"string\">serverAddr</span> <span class=\"string\">=</span> <span class=\"string\">&quot;127.0.0.1:8500&quot;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"string\">etcd3</span> &#123;</span><br><span class=\"line\">    <span class=\"string\">cluster</span> <span class=\"string\">=</span> <span class=\"string\">&quot;default&quot;</span></span><br><span class=\"line\">    <span class=\"string\">serverAddr</span> <span class=\"string\">=</span> <span class=\"string\">&quot;http://localhost:2379&quot;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"string\">sofa</span> &#123;</span><br><span class=\"line\">    <span class=\"string\">serverAddr</span> <span class=\"string\">=</span> <span class=\"string\">&quot;127.0.0.1:9603&quot;</span></span><br><span class=\"line\">    <span class=\"string\">application</span> <span class=\"string\">=</span> <span class=\"string\">&quot;default&quot;</span></span><br><span class=\"line\">    <span class=\"string\">region</span> <span class=\"string\">=</span> <span class=\"string\">&quot;DEFAULT_ZONE&quot;</span></span><br><span class=\"line\">    <span class=\"string\">datacenter</span> <span class=\"string\">=</span> <span class=\"string\">&quot;DefaultDataCenter&quot;</span></span><br><span class=\"line\">    <span class=\"string\">cluster</span> <span class=\"string\">=</span> <span class=\"string\">&quot;default&quot;</span></span><br><span class=\"line\">    <span class=\"string\">group</span> <span class=\"string\">=</span> <span class=\"string\">&quot;SEATA_GROUP&quot;</span></span><br><span class=\"line\">    <span class=\"string\">addressWaitTime</span> <span class=\"string\">=</span> <span class=\"string\">&quot;3000&quot;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"string\">file</span> &#123;</span><br><span class=\"line\">    <span class=\"string\">name</span> <span class=\"string\">=</span> <span class=\"string\">&quot;file.conf&quot;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">config</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\"># file、nacos 、apollo、zk、consul、etcd3</span></span><br><span class=\"line\">  <span class=\"string\">type</span> <span class=\"string\">=</span> <span class=\"string\">&quot;file&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"string\">nacos</span> &#123;</span><br><span class=\"line\">    <span class=\"string\">serverAddr</span> <span class=\"string\">=</span> <span class=\"string\">&quot;localhost&quot;</span></span><br><span class=\"line\">    <span class=\"string\">namespace</span> <span class=\"string\">=</span> <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"string\">consul</span> &#123;</span><br><span class=\"line\">    <span class=\"string\">serverAddr</span> <span class=\"string\">=</span> <span class=\"string\">&quot;127.0.0.1:8500&quot;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"string\">apollo</span> &#123;</span><br><span class=\"line\">    <span class=\"string\">app.id</span> <span class=\"string\">=</span> <span class=\"string\">&quot;seata-server&quot;</span></span><br><span class=\"line\">    <span class=\"string\">apollo.meta</span> <span class=\"string\">=</span> <span class=\"string\">&quot;http://192.168.1.204:8801&quot;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"string\">zk</span> &#123;</span><br><span class=\"line\">    <span class=\"string\">serverAddr</span> <span class=\"string\">=</span> <span class=\"string\">&quot;127.0.0.1:2181&quot;</span></span><br><span class=\"line\">    <span class=\"string\">session.timeout</span> <span class=\"string\">=</span> <span class=\"number\">6000</span></span><br><span class=\"line\">    <span class=\"string\">connect.timeout</span> <span class=\"string\">=</span> <span class=\"number\">2000</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"string\">etcd3</span> &#123;</span><br><span class=\"line\">    <span class=\"string\">serverAddr</span> <span class=\"string\">=</span> <span class=\"string\">&quot;http://localhost:2379&quot;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"string\">file</span> &#123;</span><br><span class=\"line\">    <span class=\"string\">name</span> <span class=\"string\">=</span> <span class=\"string\">&quot;file.conf&quot;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"代码部分\"><a class=\"markdownIt-Anchor\" href=\"#代码部分\">#</a> 代码部分</h4>\n<h5 id=\"主启动\"><a class=\"markdownIt-Anchor\" href=\"#主启动\">#</a> 主启动</h5>\n<p>SeataOrderMainApp2001</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.SpringApplication;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.cloud.client.discovery.EnableDiscoveryClient;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.cloud.openfeign.EnableFeignClients;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@EnableDiscoveryClient</span></span><br><span class=\"line\"><span class=\"meta\">@EnableFeignClients</span></span><br><span class=\"line\"><span class=\"comment\">// 取消数据源的自动创建，而是使用自己定义的</span></span><br><span class=\"line\"><span class=\"meta\">@SpringBootApplication(exclude = DataSourceAutoConfiguration.class)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SeataOrderMainApp2001</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    SpringApplication.run(SeataOrderMainApp2001.class, args);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"domain层\"><a class=\"markdownIt-Anchor\" href=\"#domain层\">#</a> Domain 层</h5>\n<p>Order</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.math.BigDecimal;</span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.AllArgsConstructor;</span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.Data;</span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.NoArgsConstructor;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"meta\">@AllArgsConstructor</span></span><br><span class=\"line\"><span class=\"meta\">@NoArgsConstructor</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Order</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> Long id;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> Long userId;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> Long productId;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> Integer count;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> BigDecimal money;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> Integer status; <span class=\"comment\">// 订单状态：0：创建中；1：已完结</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>OrderDao</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> com.atguigu.springcloud.alibaba.domain.Order;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.ibatis.annotations.Mapper;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.ibatis.annotations.Param;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Mapper</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">OrderDao</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 1 新建订单</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">create</span><span class=\"params\">(Order order)</span></span>;</span><br><span class=\"line\">  <span class=\"comment\">// 2 修改订单状态，从零改为 1</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">update</span><span class=\"params\">(<span class=\"meta\">@Param(&quot;userId&quot;)</span> Long userId, <span class=\"meta\">@Param(&quot;status&quot;)</span> Integer status)</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>OrderMapper.xml</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class=\"line\">  <span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">mapper</span> <span class=\"meta-keyword\">PUBLIC</span> <span class=\"meta-string\">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class=\"meta-string\">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span> &gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">mapper</span> <span class=\"attr\">namespace</span>=<span class=\"string\">&quot;com.atguigu.springcloud.alibaba.dao.OrderDao&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">resultMap</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BaseResultMap&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;com.atguigu.springcloud.alibaba.domain.Order&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">id</span> <span class=\"attr\">column</span>=<span class=\"string\">&quot;id&quot;</span> <span class=\"attr\">property</span>=<span class=\"string\">&quot;id&quot;</span> <span class=\"attr\">jdbcType</span>=<span class=\"string\">&quot;BIGINT&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">column</span>=<span class=\"string\">&quot;user_id&quot;</span> <span class=\"attr\">property</span>=<span class=\"string\">&quot;userId&quot;</span> <span class=\"attr\">jdbcType</span>=<span class=\"string\">&quot;BIGINT&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">column</span>=<span class=\"string\">&quot;product_id&quot;</span> <span class=\"attr\">property</span>=<span class=\"string\">&quot;productId&quot;</span> <span class=\"attr\">jdbcType</span>=<span class=\"string\">&quot;BIGINT&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">column</span>=<span class=\"string\">&quot;count&quot;</span> <span class=\"attr\">property</span>=<span class=\"string\">&quot;count&quot;</span> <span class=\"attr\">jdbcType</span>=<span class=\"string\">&quot;INTEGER&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">column</span>=<span class=\"string\">&quot;money&quot;</span> <span class=\"attr\">property</span>=<span class=\"string\">&quot;money&quot;</span> <span class=\"attr\">jdbcType</span>=<span class=\"string\">&quot;DECIMAL&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">column</span>=<span class=\"string\">&quot;status&quot;</span> <span class=\"attr\">property</span>=<span class=\"string\">&quot;status&quot;</span> <span class=\"attr\">jdbcType</span>=<span class=\"string\">&quot;INTEGER&quot;</span>/&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">resultMap</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">insert</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;create&quot;</span>&gt;</span></span><br><span class=\"line\">    insert into t_order (id,user_id,product_id,count,money,status)</span><br><span class=\"line\">    values (null,#&#123;userId&#125;,#&#123;productId&#125;,#&#123;count&#125;,#&#123;money&#125;,0);</span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">insert</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">update</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;update&quot;</span>&gt;</span></span><br><span class=\"line\">    update t_order set status = 1</span><br><span class=\"line\">    where user_id=#&#123;userId&#125; and status = #&#123;status&#125;;</span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">update</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"service层\"><a class=\"markdownIt-Anchor\" href=\"#service层\">#</a> Service 层</h5>\n<p>OrderService</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> com.atguigu.springcloud.alibaba.domain.Order;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">OrderService</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">create</span><span class=\"params\">(Order order)</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>AccountService</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> com.atguigu.springcloud.alibaba.domain.CommonResult;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.math.BigDecimal;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.cloud.openfeign.FeignClient;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.PostMapping;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RequestParam;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@FeignClient(value = &quot;seata-account-service&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">AccountService</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"meta\">@PostMapping(value = &quot;/account/decrease&quot;)</span></span><br><span class=\"line\">  <span class=\"function\">CommonResult <span class=\"title\">decrease</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">      <span class=\"meta\">@RequestParam(&quot;userId&quot;)</span> Long userId, <span class=\"meta\">@RequestParam(&quot;money&quot;)</span> BigDecimal money)</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>StorageService</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> com.atguigu.springcloud.alibaba.domain.CommonResult;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.cloud.openfeign.FeignClient;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.PostMapping;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RequestParam;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@FeignClient(value = &quot;seata-storage-service&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">StorageService</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"meta\">@PostMapping(value = &quot;/storage/decrease&quot;)</span></span><br><span class=\"line\">  <span class=\"function\">CommonResult <span class=\"title\">decrease</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">      <span class=\"meta\">@RequestParam(&quot;productId&quot;)</span> Long productId, <span class=\"meta\">@RequestParam(&quot;count&quot;)</span> Integer count)</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>OrderServiceImpl</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> com.atguigu.springcloud.alibaba.dao.OrderDao;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.atguigu.springcloud.alibaba.domain.Order;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.seata.spring.annotation.GlobalTransactional;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.annotation.Resource;</span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Service;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OrderServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title\">OrderService</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"meta\">@Resource</span> <span class=\"keyword\">private</span> OrderDao orderDao;</span><br><span class=\"line\">  <span class=\"meta\">@Resource</span> <span class=\"keyword\">private</span> StorageService storageService;</span><br><span class=\"line\">  <span class=\"meta\">@Resource</span> <span class=\"keyword\">private</span> AccountService accountService;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/** 创建订单 -&gt; 调用库存服务扣减库存 -&gt; 调用账户服务扣减账户余额 -&gt; 修改订单状态 简单说：下订单 -&gt; 扣库存 -&gt; 减余额 -&gt; 改状态 */</span></span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">create</span><span class=\"params\">(Order order)</span> </span>&#123;</span><br><span class=\"line\">    log.info(<span class=\"string\">&quot;-----&gt;开始新建订单&quot;</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 1 新建订单</span></span><br><span class=\"line\">    orderDao.create(order);</span><br><span class=\"line\">    <span class=\"comment\">// 2 扣减库存</span></span><br><span class=\"line\">    log.info(<span class=\"string\">&quot;-----&gt;订单微服务开始调用库存，做扣减Count&quot;</span>);</span><br><span class=\"line\">    storageService.decrease(order.getProductId(), order.getCount());</span><br><span class=\"line\">    log.info(<span class=\"string\">&quot;-----&gt;订单微服务开始调用库存，做扣减end&quot;</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 3 扣减账户</span></span><br><span class=\"line\">    log.info(<span class=\"string\">&quot;-----&gt;订单微服务开始调用账户，做扣减Money&quot;</span>);</span><br><span class=\"line\">    accountService.decrease(order.getUserId(), order.getMoney());</span><br><span class=\"line\">    log.info(<span class=\"string\">&quot;-----&gt;订单微服务开始调用账户，做扣减end&quot;</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 4 修改订单状态，从零到 1,1 代表已经完成</span></span><br><span class=\"line\">    log.info(<span class=\"string\">&quot;-----&gt;修改订单状态开始&quot;</span>);</span><br><span class=\"line\">    orderDao.update(order.getUserId(), <span class=\"number\">0</span>);</span><br><span class=\"line\">    log.info(<span class=\"string\">&quot;-----&gt;修改订单状态结束&quot;</span>);</span><br><span class=\"line\">    log.info(<span class=\"string\">&quot;-----&gt;下订单结束了，O(∩_∩)O哈哈~&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"config层\"><a class=\"markdownIt-Anchor\" href=\"#config层\">#</a> Config 层</h5>\n<p>DataSourceProxyConfig</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.druid.pool.DruidDataSource;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.seata.rm.datasource.DataSourceProxy;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.sql.DataSource;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.mybatis.spring.SqlSessionFactoryBean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.mybatis.spring.transaction.SpringManagedTransactionFactory;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Bean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Configuration;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.core.io.support.PathMatchingResourcePatternResolver;</span><br><span class=\"line\"><span class=\"comment\">/** 使用 Seata 对数据源进行代理 */</span></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DataSourceProxyConfig</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"meta\">@Value(&quot;$&#123;mybatis.mapperLocations&#125;&quot;)</span></span><br><span class=\"line\">  <span class=\"keyword\">private</span> String mapperLocations;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Bean</span></span><br><span class=\"line\">  <span class=\"meta\">@ConfigurationProperties(prefix = &quot;spring.datasource&quot;)</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> DataSource <span class=\"title\">druidDataSource</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> DruidDataSource();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Bean</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> DataSourceProxy <span class=\"title\">dataSourceProxy</span><span class=\"params\">(DataSource dataSource)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> DataSourceProxy(dataSource);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Bean</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> SqlSessionFactory <span class=\"title\">sqlSessionFactoryBean</span><span class=\"params\">(DataSourceProxy dataSourceProxy)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">    SqlSessionFactoryBean sqlSessionFactoryBean = <span class=\"keyword\">new</span> SqlSessionFactoryBean();</span><br><span class=\"line\">    sqlSessionFactoryBean.setDataSource(dataSourceProxy);</span><br><span class=\"line\">    sqlSessionFactoryBean.setMapperLocations(</span><br><span class=\"line\">        <span class=\"keyword\">new</span> PathMatchingResourcePatternResolver().getResources(mapperLocations));</span><br><span class=\"line\">    sqlSessionFactoryBean.setTransactionFactory(<span class=\"keyword\">new</span> SpringManagedTransactionFactory());</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sqlSessionFactoryBean.getObject();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>MyBatisConfig</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> org.mybatis.spring.annotation.MapperScan;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Configuration;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"meta\">@MapperScan(&#123;&quot;com.atguigu.springcloud.alibaba.dao&quot;&#125;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyBatisConfig</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"controller层\"><a class=\"markdownIt-Anchor\" href=\"#controller层\">#</a> Controller 层</h5>\n<p>OrderController</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> com.atguigu.springcloud.alibaba.domain.CommonResult;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.atguigu.springcloud.alibaba.domain.Order;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.atguigu.springcloud.alibaba.service.OrderService;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.annotation.Resource;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OrderController</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"meta\">@Resource</span> <span class=\"keyword\">private</span> OrderService orderService;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@GetMapping(&quot;/order/create&quot;)</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> CommonResult <span class=\"title\">create</span><span class=\"params\">(Order order)</span> </span>&#123;</span><br><span class=\"line\">    orderService.create(order);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> CommonResult(<span class=\"number\">200</span>, <span class=\"string\">&quot;订单创建成功&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"storage-module-模块搭建\"><a class=\"markdownIt-Anchor\" href=\"#storage-module-模块搭建\">#</a> Storage-Module 模块搭建</h3>\n<p>模块名：seata-Storage-service2002</p>\n<p>职责：提供库存服务</p>\n<h4 id=\"配置部分-2\"><a class=\"markdownIt-Anchor\" href=\"#配置部分-2\">#</a> 配置部分</h4>\n<p>POM</p>\n<p>（与 seata-order-service2001 模块大致相同）</p>\n<p>application.yml</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">2002</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">application:</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">seata-storage-service</span></span><br><span class=\"line\">  <span class=\"attr\">cloud:</span></span><br><span class=\"line\">    <span class=\"attr\">alibaba:</span></span><br><span class=\"line\">      <span class=\"attr\">seata:</span></span><br><span class=\"line\">        <span class=\"comment\">#自定义事务组名称需要与 seata-server 中的对应</span></span><br><span class=\"line\">        <span class=\"attr\">tx-service-group:</span> <span class=\"string\">fsp_tx_group</span></span><br><span class=\"line\">    <span class=\"attr\">nacos:</span></span><br><span class=\"line\">      <span class=\"attr\">discovery:</span></span><br><span class=\"line\">        <span class=\"attr\">server-addr:</span> <span class=\"string\">localhost:15003</span></span><br><span class=\"line\">  <span class=\"attr\">datasource:</span></span><br><span class=\"line\">    <span class=\"attr\">driver-class-name:</span> <span class=\"string\">com.mysql.jdbc.Driver</span></span><br><span class=\"line\">    <span class=\"attr\">url:</span> <span class=\"string\">jdbc:mysql://localhost:3306/seata_storage</span></span><br><span class=\"line\">    <span class=\"attr\">username:</span> <span class=\"string\">root</span></span><br><span class=\"line\">    <span class=\"attr\">password:</span> <span class=\"number\">123456</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">feign:</span></span><br><span class=\"line\">  <span class=\"attr\">hystrix:</span></span><br><span class=\"line\">    <span class=\"attr\">enabled:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">logging:</span></span><br><span class=\"line\">  <span class=\"attr\">level:</span></span><br><span class=\"line\">    <span class=\"attr\">io:</span></span><br><span class=\"line\">      <span class=\"attr\">seata:</span> <span class=\"string\">info</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">mybatis:</span></span><br><span class=\"line\">  <span class=\"attr\">mapperLocations:</span> <span class=\"string\">classpath:mapper/*.xml</span></span><br></pre></td></tr></table></figure>\n<p>file.conf</p>\n<p>（与 seata-order-service2001 模块大致相同）</p>\n<p>registry.conf</p>\n<p>（与 seata-order-service2001 模块大致相同）</p>\n<h4 id=\"代码部分-2\"><a class=\"markdownIt-Anchor\" href=\"#代码部分-2\">#</a> 代码部分</h4>\n<h5 id=\"主启动-2\"><a class=\"markdownIt-Anchor\" href=\"#主启动-2\">#</a> 主启动</h5>\n<p>SeataStorageMainApp2002</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.SpringApplication;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.cloud.client.discovery.EnableDiscoveryClient;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.cloud.openfeign.EnableFeignClients;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@EnableDiscoveryClient</span></span><br><span class=\"line\"><span class=\"meta\">@EnableFeignClients</span></span><br><span class=\"line\"><span class=\"comment\">// 取消数据源的自动创建，而是使用自己定义的</span></span><br><span class=\"line\"><span class=\"meta\">@SpringBootApplication(exclude = DataSourceAutoConfiguration.class)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SeataStorageMainApp2002</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    SpringApplication.run(SeataStorageMainApp2002.class, args);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"domain层-2\"><a class=\"markdownIt-Anchor\" href=\"#domain层-2\">#</a> Domain 层</h5>\n<p>Storage</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> lombok.Data;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Storage</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">private</span> Long id;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/** 产品 id */</span></span><br><span class=\"line\">  <span class=\"keyword\">private</span> Long productId;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/** 总库存 */</span></span><br><span class=\"line\">  <span class=\"keyword\">private</span> Integer total;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/** 已用库存 */</span></span><br><span class=\"line\">  <span class=\"keyword\">private</span> Integer used;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/** 剩余库存 */</span></span><br><span class=\"line\">  <span class=\"keyword\">private</span> Integer residue;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>StorageDao</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> org.apache.ibatis.annotations.Mapper;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.ibatis.annotations.Param;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Mapper</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">StorageDao</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 扣减库存</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">decrease</span><span class=\"params\">(<span class=\"meta\">@Param(&quot;productId&quot;)</span> Long productId, <span class=\"meta\">@Param(&quot;count&quot;)</span> Integer count)</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>StorageMapper.xml</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class=\"line\">  <span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">mapper</span> <span class=\"meta-keyword\">PUBLIC</span> <span class=\"meta-string\">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class=\"meta-string\">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span> &gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">mapper</span> <span class=\"attr\">namespace</span>=<span class=\"string\">&quot;com.atguigu.springcloud.alibaba.dao.StorageDao&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">resultMap</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BaseResultMap&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;com.atguigu.springcloud.alibaba.domain.Storage&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">id</span> <span class=\"attr\">column</span>=<span class=\"string\">&quot;id&quot;</span> <span class=\"attr\">property</span>=<span class=\"string\">&quot;id&quot;</span> <span class=\"attr\">jdbcType</span>=<span class=\"string\">&quot;BIGINT&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">column</span>=<span class=\"string\">&quot;product_id&quot;</span> <span class=\"attr\">property</span>=<span class=\"string\">&quot;productId&quot;</span> <span class=\"attr\">jdbcType</span>=<span class=\"string\">&quot;BIGINT&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">column</span>=<span class=\"string\">&quot;total&quot;</span> <span class=\"attr\">property</span>=<span class=\"string\">&quot;total&quot;</span> <span class=\"attr\">jdbcType</span>=<span class=\"string\">&quot;INTEGER&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">column</span>=<span class=\"string\">&quot;used&quot;</span> <span class=\"attr\">property</span>=<span class=\"string\">&quot;used&quot;</span> <span class=\"attr\">jdbcType</span>=<span class=\"string\">&quot;INTEGER&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">column</span>=<span class=\"string\">&quot;residue&quot;</span> <span class=\"attr\">property</span>=<span class=\"string\">&quot;residue&quot;</span> <span class=\"attr\">jdbcType</span>=<span class=\"string\">&quot;INTEGER&quot;</span>/&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">resultMap</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">update</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;decrease&quot;</span>&gt;</span></span><br><span class=\"line\">    UPDATE</span><br><span class=\"line\">    t_storage</span><br><span class=\"line\">    SET</span><br><span class=\"line\">    used = used + #&#123;count&#125;,residue = residue - #&#123;count&#125;</span><br><span class=\"line\">    WHERE</span><br><span class=\"line\">    product_id = #&#123;productId&#125;</span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">update</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"service层-2\"><a class=\"markdownIt-Anchor\" href=\"#service层-2\">#</a> Service 层</h5>\n<p>StorageService</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">StorageService</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">/** 扣减库存 */</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">decrease</span><span class=\"params\">(Long productId, Integer count)</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>StorageServiceImpl</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> com.atguigu.springcloud.alibaba.dao.StorageDao;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.annotation.Resource;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.slf4j.Logger;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.slf4j.LoggerFactory;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Service;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StorageServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title\">StorageService</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Logger LOGGER = LoggerFactory.getLogger(StorageServiceImpl.class);</span><br><span class=\"line\">  <span class=\"meta\">@Resource</span> <span class=\"keyword\">private</span> StorageDao storageDao;</span><br><span class=\"line\">  <span class=\"comment\">/** 扣减库存 */</span></span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">decrease</span><span class=\"params\">(Long productId, Integer count)</span> </span>&#123;</span><br><span class=\"line\">    LOGGER.info(<span class=\"string\">&quot;-------&gt;storage-service中扣减库存开始&quot;</span>);</span><br><span class=\"line\">    storageDao.decrease(productId, count);</span><br><span class=\"line\">    LOGGER.info(<span class=\"string\">&quot;-------&gt;storage-service中扣减库存结束&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"config层-2\"><a class=\"markdownIt-Anchor\" href=\"#config层-2\">#</a> Config 层</h5>\n<p>（与 seata-order-service2001 模块大致相同）</p>\n<h5 id=\"controller层-2\"><a class=\"markdownIt-Anchor\" href=\"#controller层-2\">#</a> Controller 层</h5>\n<p>StorageController</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> com.atguigu.springcloud.alibaba.domain.CommonResult;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.atguigu.springcloud.alibaba.service.StorageService;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StorageController</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Autowired</span> <span class=\"keyword\">private</span> StorageService storageService;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/** 扣减库存 */</span></span><br><span class=\"line\">  <span class=\"meta\">@RequestMapping(&quot;/storage/decrease&quot;)</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> CommonResult <span class=\"title\">decrease</span><span class=\"params\">(Long productId, Integer count)</span> </span>&#123;</span><br><span class=\"line\">    storageService.decrease(productId, count);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> CommonResult(<span class=\"number\">200</span>, <span class=\"string\">&quot;扣减库存成功！&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"account-module-模块搭建\"><a class=\"markdownIt-Anchor\" href=\"#account-module-模块搭建\">#</a> Account-Module 模块搭建</h3>\n<p>模块名：seata-Account-service2003</p>\n<p>职责：提供账号服务</p>\n<h4 id=\"配置部分-3\"><a class=\"markdownIt-Anchor\" href=\"#配置部分-3\">#</a> 配置部分</h4>\n<p>POM</p>\n<p>（与 seata-order-service2001 模块大致相同）</p>\n<p>application.yml</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">2003</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">application:</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">seata-account-service</span></span><br><span class=\"line\">  <span class=\"attr\">cloud:</span></span><br><span class=\"line\">    <span class=\"attr\">alibaba:</span></span><br><span class=\"line\">      <span class=\"attr\">seata:</span></span><br><span class=\"line\">        <span class=\"comment\">#自定义事务组名称需要与 seata-server 中的对应</span></span><br><span class=\"line\">        <span class=\"attr\">tx-service-group:</span> <span class=\"string\">fsp_tx_group</span></span><br><span class=\"line\">    <span class=\"attr\">nacos:</span></span><br><span class=\"line\">      <span class=\"attr\">discovery:</span></span><br><span class=\"line\">        <span class=\"attr\">server-addr:</span> <span class=\"string\">localhost:15003</span></span><br><span class=\"line\">  <span class=\"attr\">datasource:</span></span><br><span class=\"line\">    <span class=\"attr\">driver-class-name:</span> <span class=\"string\">com.mysql.jdbc.Driver</span></span><br><span class=\"line\">    <span class=\"attr\">url:</span> <span class=\"string\">jdbc:mysql://localhost:3306/seata_account</span></span><br><span class=\"line\">    <span class=\"attr\">username:</span> <span class=\"string\">root</span></span><br><span class=\"line\">    <span class=\"attr\">password:</span> <span class=\"number\">123456</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">feign:</span></span><br><span class=\"line\">  <span class=\"attr\">hystrix:</span></span><br><span class=\"line\">    <span class=\"attr\">enabled:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">logging:</span></span><br><span class=\"line\">  <span class=\"attr\">level:</span></span><br><span class=\"line\">    <span class=\"attr\">io:</span></span><br><span class=\"line\">      <span class=\"attr\">seata:</span> <span class=\"string\">info</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">mybatis:</span></span><br><span class=\"line\">  <span class=\"attr\">mapperLocations:</span> <span class=\"string\">classpath:mapper/*.xml</span></span><br></pre></td></tr></table></figure>\n<p>file.conf</p>\n<p>（与 seata-order-service2001 模块大致相同）</p>\n<p>registry.conf</p>\n<p>（与 seata-order-service2001 模块大致相同）</p>\n<h4 id=\"代码部分-3\"><a class=\"markdownIt-Anchor\" href=\"#代码部分-3\">#</a> 代码部分</h4>\n<h5 id=\"主启动-3\"><a class=\"markdownIt-Anchor\" href=\"#主启动-3\">#</a> 主启动</h5>\n<p>SeataAccountMainApp2003</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.SpringApplication;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.cloud.client.discovery.EnableDiscoveryClient;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.cloud.openfeign.EnableFeignClients;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@EnableDiscoveryClient</span></span><br><span class=\"line\"><span class=\"meta\">@EnableFeignClients</span></span><br><span class=\"line\"><span class=\"comment\">// 取消数据源的自动创建，而是使用自己定义的</span></span><br><span class=\"line\"><span class=\"meta\">@SpringBootApplication(exclude = DataSourceAutoConfiguration.class)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SeataAccountMainApp2003</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    SpringApplication.run(SeataAccountMainApp2003.class, args);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"domain层-3\"><a class=\"markdownIt-Anchor\" href=\"#domain层-3\">#</a> Domain 层</h5>\n<p>Account</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.math.BigDecimal;</span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.AllArgsConstructor;</span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.Data;</span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.NoArgsConstructor;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"meta\">@AllArgsConstructor</span></span><br><span class=\"line\"><span class=\"meta\">@NoArgsConstructor</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Account</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">private</span> Long id;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/** 用户 id */</span></span><br><span class=\"line\">  <span class=\"keyword\">private</span> Long userId;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/** 总额度 */</span></span><br><span class=\"line\">  <span class=\"keyword\">private</span> BigDecimal total;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/** 已用额度 */</span></span><br><span class=\"line\">  <span class=\"keyword\">private</span> BigDecimal used;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/** 剩余额度 */</span></span><br><span class=\"line\">  <span class=\"keyword\">private</span> BigDecimal residue;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>AccountDao</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.math.BigDecimal;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.ibatis.annotations.Mapper;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.ibatis.annotations.Param;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Mapper</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">AccountDao</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">/** 扣减账户余额 */</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">decrease</span><span class=\"params\">(<span class=\"meta\">@Param(&quot;userId&quot;)</span> Long userId, <span class=\"meta\">@Param(&quot;money&quot;)</span> BigDecimal money)</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>AccountMapper.xml</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class=\"line\">  <span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">mapper</span> <span class=\"meta-keyword\">PUBLIC</span> <span class=\"meta-string\">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class=\"meta-string\">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span> &gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">mapper</span> <span class=\"attr\">namespace</span>=<span class=\"string\">&quot;com.atguigu.springcloud.alibaba.dao.AccountDao&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">resultMap</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;BaseResultMap&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;com.atguigu.springcloud.alibaba.domain.Account&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">id</span> <span class=\"attr\">column</span>=<span class=\"string\">&quot;id&quot;</span> <span class=\"attr\">property</span>=<span class=\"string\">&quot;id&quot;</span> <span class=\"attr\">jdbcType</span>=<span class=\"string\">&quot;BIGINT&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">column</span>=<span class=\"string\">&quot;user_id&quot;</span> <span class=\"attr\">property</span>=<span class=\"string\">&quot;userId&quot;</span> <span class=\"attr\">jdbcType</span>=<span class=\"string\">&quot;BIGINT&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">column</span>=<span class=\"string\">&quot;total&quot;</span> <span class=\"attr\">property</span>=<span class=\"string\">&quot;total&quot;</span> <span class=\"attr\">jdbcType</span>=<span class=\"string\">&quot;DECIMAL&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">column</span>=<span class=\"string\">&quot;used&quot;</span> <span class=\"attr\">property</span>=<span class=\"string\">&quot;used&quot;</span> <span class=\"attr\">jdbcType</span>=<span class=\"string\">&quot;DECIMAL&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">column</span>=<span class=\"string\">&quot;residue&quot;</span> <span class=\"attr\">property</span>=<span class=\"string\">&quot;residue&quot;</span> <span class=\"attr\">jdbcType</span>=<span class=\"string\">&quot;DECIMAL&quot;</span>/&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">resultMap</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">update</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;decrease&quot;</span>&gt;</span></span><br><span class=\"line\">    UPDATE t_account</span><br><span class=\"line\">    SET</span><br><span class=\"line\">    residue = residue - #&#123;money&#125;,used = used + #&#123;money&#125;</span><br><span class=\"line\">    WHERE</span><br><span class=\"line\">    user_id = #&#123;userId&#125;;</span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">update</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"service层-3\"><a class=\"markdownIt-Anchor\" href=\"#service层-3\">#</a> Service 层</h5>\n<p>AccountService</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.math.BigDecimal;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RequestParam;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">AccountService</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 扣减账户余额</span></span><br><span class=\"line\"><span class=\"comment\">   *</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> userId 用户 id</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> money 金额</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">decrease</span><span class=\"params\">(<span class=\"meta\">@RequestParam(&quot;userId&quot;)</span> Long userId, <span class=\"meta\">@RequestParam(&quot;money&quot;)</span> BigDecimal money)</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>AccountServiceImpl</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> com.atguigu.springcloud.alibaba.dao.AccountDao;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.math.BigDecimal;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.TimeUnit;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.annotation.Resource;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.slf4j.Logger;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.slf4j.LoggerFactory;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Service;</span><br><span class=\"line\"><span class=\"comment\">/** */</span></span><br><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AccountServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title\">AccountService</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Logger LOGGER = LoggerFactory.getLogger(AccountServiceImpl.class);</span><br><span class=\"line\">  <span class=\"meta\">@Resource</span> AccountDao accountDao;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/** 扣减账户余额 */</span></span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">decrease</span><span class=\"params\">(Long userId, BigDecimal money)</span> </span>&#123;</span><br><span class=\"line\">    LOGGER.info(<span class=\"string\">&quot;-------&gt;account-service中扣减账户余额开始&quot;</span>);</span><br><span class=\"line\">    accountDao.decrease(userId, money);</span><br><span class=\"line\">    LOGGER.info(<span class=\"string\">&quot;-------&gt;account-service中扣减账户余额结束&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"config层-3\"><a class=\"markdownIt-Anchor\" href=\"#config层-3\">#</a> Config 层</h5>\n<p>（与 seata-order-service2001 模块大致相同）</p>\n<h5 id=\"controller层-3\"><a class=\"markdownIt-Anchor\" href=\"#controller层-3\">#</a> Controller 层</h5>\n<p>AccountController</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> com.atguigu.springcloud.alibaba.domain.CommonResult;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.atguigu.springcloud.alibaba.service.AccountService;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.math.BigDecimal;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.annotation.Resource;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AccountController</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Resource</span> AccountService accountService;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/** 扣减账户余额 */</span></span><br><span class=\"line\">  <span class=\"meta\">@RequestMapping(&quot;/account/decrease&quot;)</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> CommonResult <span class=\"title\">decrease</span><span class=\"params\">(Long userId, BigDecimal money)</span> </span>&#123;</span><br><span class=\"line\">    accountService.decrease(userId, money);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> CommonResult(<span class=\"number\">200</span>, <span class=\"string\">&quot;扣减账户余额成功！&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"globaltransactional-使用\"><a class=\"markdownIt-Anchor\" href=\"#globaltransactional-使用\">#</a> @GlobalTransactional 使用</h3>\n<p>正常下单</p>\n<figure class=\"highlight http\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://localhost:2001/order/create?userld=1&amp;productld=1&amp;count=10&amp;money=100</span><br></pre></td></tr></table></figure>\n<p>正常情况下，下订单后会下订单、减库存、扣余额、改订单状态</p>\n<p>异常情况下，任何一个环节出错没有对应的回退机制，会导致中间任何一项数据出现脏数据</p>\n<h4 id=\"模拟-accountserviceimpl-添加超时\"><a class=\"markdownIt-Anchor\" href=\"#模拟-accountserviceimpl-添加超时\">#</a> 模拟 AccountServiceImpl 添加超时</h4>\n<p>OpenFeign 的调用默认时间是 1s 以内，所以最后会抛异常</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AccountServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title\">AccountService</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Logger LOGGER = LoggerFactory.getLogger(AccountServiceImpl.class);</span><br><span class=\"line\">  <span class=\"meta\">@Resource</span> AccountDao accountDao;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/** 扣减账户余额 */</span></span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">decrease</span><span class=\"params\">(Long userId, BigDecimal money)</span> </span>&#123;</span><br><span class=\"line\">    LOGGER.info(<span class=\"string\">&quot;-------&gt;account-service中扣减账户余额开始&quot;</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 模拟超时异常，全局事务回滚</span></span><br><span class=\"line\">    <span class=\"comment\">// 暂停几秒钟线程</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      TimeUnit.SECONDS.sleep(<span class=\"number\">20</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">      e.printStackTrace();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    accountDao.decrease(userId, money);</span><br><span class=\"line\">    LOGGER.info(<span class=\"string\">&quot;-------&gt;account-service中扣减账户余额结束&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>数据库情况</p>\n<p><img data-src=\"%E6%9C%AA%E5%8A%A0%E5%85%A8%E5%B1%80%E4%BA%8B%E5%8A%A1%E7%9A%84%E6%95%B0%E6%8D%AE%E5%BA%93%E6%83%85%E5%86%B5.png\" alt=\"img\"></p>\n<p>故障情况</p>\n<ul>\n<li>当库存和账户金额扣减后，订单状态并没有设置为已经完成，没有从零改为 1</li>\n<li>而且由于 feign 的重试机制，账户余额还有可能被多次扣减</li>\n</ul>\n<h4 id=\"globaltransactional开启全局事务\"><a class=\"markdownIt-Anchor\" href=\"#globaltransactional开启全局事务\">#</a> @GlobalTransactional 开启全局事务</h4>\n<p>OrderServiceImpl</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> com.atguigu.springcloud.alibaba.dao.OrderDao;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.atguigu.springcloud.alibaba.domain.Order;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.seata.spring.annotation.GlobalTransactional;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.annotation.Resource;</span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Service;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OrderServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title\">OrderService</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"meta\">@Resource</span> <span class=\"keyword\">private</span> OrderDao orderDao;</span><br><span class=\"line\">  <span class=\"meta\">@Resource</span> <span class=\"keyword\">private</span> StorageService storageService;</span><br><span class=\"line\">  <span class=\"meta\">@Resource</span> <span class=\"keyword\">private</span> AccountService accountService;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/** 创建订单 -&gt; 调用库存服务扣减库存 -&gt; 调用账户服务扣减账户余额 -&gt; 修改订单状态 简单说：下订单 -&gt; 扣库存 -&gt; 减余额 -&gt; 改状态 */</span></span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"comment\">// rollbackFor = Exception.class 表示对任意异常都进行回滚</span></span><br><span class=\"line\">  <span class=\"meta\">@GlobalTransactional(name = &quot;fsp-create-order&quot;, rollbackFor = Exception.class)</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">create</span><span class=\"params\">(Order order)</span> </span>&#123;</span><br><span class=\"line\">    log.info(<span class=\"string\">&quot;-----&gt;开始新建订单&quot;</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 1 新建订单</span></span><br><span class=\"line\">    orderDao.create(order);</span><br><span class=\"line\">    <span class=\"comment\">// 2 扣减库存</span></span><br><span class=\"line\">    log.info(<span class=\"string\">&quot;-----&gt;订单微服务开始调用库存，做扣减Count&quot;</span>);</span><br><span class=\"line\">    storageService.decrease(order.getProductId(), order.getCount());</span><br><span class=\"line\">    log.info(<span class=\"string\">&quot;-----&gt;订单微服务开始调用库存，做扣减end&quot;</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 3 扣减账户</span></span><br><span class=\"line\">    log.info(<span class=\"string\">&quot;-----&gt;订单微服务开始调用账户，做扣减Money&quot;</span>);</span><br><span class=\"line\">    accountService.decrease(order.getUserId(), order.getMoney());</span><br><span class=\"line\">    log.info(<span class=\"string\">&quot;-----&gt;订单微服务开始调用账户，做扣减end&quot;</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 4 修改订单状态，从零到 1,1 代表已经完成</span></span><br><span class=\"line\">    log.info(<span class=\"string\">&quot;-----&gt;修改订单状态开始&quot;</span>);</span><br><span class=\"line\">    orderDao.update(order.getUserId(), <span class=\"number\">0</span>);</span><br><span class=\"line\">    log.info(<span class=\"string\">&quot;-----&gt;修改订单状态结束&quot;</span>);</span><br><span class=\"line\">    log.info(<span class=\"string\">&quot;-----&gt;下订单结束了，O(∩_∩)O哈哈~&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>再次模拟 AccountServiceImpl 添加超时，下单后三个数据库数据都没有改变，达到了分支事务异常，全局回滚的效果</p>\n<h1 id=\"seata-之全局事务原理\"><a class=\"markdownIt-Anchor\" href=\"#seata-之全局事务原理\">#</a> Seata 之全局事务原理</h1>\n<h3 id=\"事务二阶段执行流程\"><a class=\"markdownIt-Anchor\" href=\"#事务二阶段执行流程\">#</a> 事务二阶段执行流程</h3>\n<ul>\n<li>\n<p>一阶段加载：</p>\n<p>解析业务 sql，找到业务 sql 要更新的业务数据，生成 before image</p>\n<p>执行业务 sql，更新业务数据</p>\n<p>业务数据更新后，保存新的业务数据为 after image ，生成行锁</p>\n</li>\n<li>\n<p>二阶段提交：</p>\n<p>如果全部事务顺利提交，Seata 框架将  before image、after image、行锁全部删除</p>\n</li>\n<li>\n<p>二阶段回滚：</p>\n<p>如果需要回滚，Seata 将会用 before image 生成 逆向 sql 还原业务数据，但需要先检查脏写，对比数据库当前业务数据和 after image，如果一致，则没有脏写，可以回滚；如果不一致，有脏写，则需要转人工处理。</p>\n</li>\n</ul>\n<p><img data-src=\"%E4%BA%8B%E5%8A%A1%E4%BA%8C%E9%98%B6%E6%AE%B5%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B.png\" alt=\"img\"></p>\n"},{"layout":"shoka","title":"jvm笔记-上篇","date":"2021-11-20T09:39:49.000Z","_content":"\n# JVM笔记-上篇\n\n## Java的几种OOM情况\n\n### 一、堆溢出\n\nJava堆用于存储对象实例，只要不断的创建对象，并保证GC Roots到对象之间有可达路径来避免垃圾回收机制清除这些对象，那么在对象数量达到最大堆容量后就会产生内存溢出异常。下面代码限制Java堆的大小为10M，通过参数-XX:HeapDumpOnOutOfMemoryError可以实现虚拟机在出现内存溢出的情况下将当前内存堆栈快照dump出来以供后续分析需要。\n\n#### 动手验证\n\n```java\npublic class OomTest {\n  public static void main(String[] args) {\n    testHeapSpaceOom();\n  }\n\n  /*jvm options：-Xms10M -Xmx10M -XX:+HeapDumpOnOutOfMemoryError*/\n  public static void testHeapSpaceOom() {\n    List<OomTest> list = new ArrayList<>();\n    while (true) {\n      list.add(new OomTest());\n    }\n  }\n}\n```\n\n#### 现象\n\n![](oom异常1.png)\n\n### 二、虚拟机栈和本地方法栈溢出\n\n由于在hotspot虚拟机中不区分虚拟机栈和本地方法栈，因此栈容量只由-Xss参数设定。关于虚拟机栈和本地方法栈，在Java虚拟机规范中描述了两种异常：\n\n1. 如果线程请求的栈深度超过了虚拟机所允许的最大深度，就抛出了大家喜闻乐见的`StackOverFlowError`异常。\n\n2. 如果虚拟机在拓展栈时无法申请到足够的空间，则抛出`OutOfMemoryError`异常。\n\n#### 1、StackOverFlowError\n\n下面例子思路就是无限递归调用方法，指定-Xss参数减少栈内存容量，导致栈帧溢出。\n\n#### 动手验证\n\n```java\n  /*jvm options：-Xss160k*/\n  public static void testStackOverFlowError() {\n    try {\n      throwStackOverFlowErrorMethod();\n    } catch (Throwable t) {\n      System.out.println(\"stack length:\" + stackLength);\n      throw t;\n    }\n  }\n\n  public static void throwStackOverFlowErrorMethod() {\n    stackLength++;\n    throwStackOverFlowErrorMethod();\n  }\n```\n\n#### 效果\n\n![](oom异常5.png)\n\n#### 2、OutOfMemoryError\n\n下面例子说明了在创建线程过多的情况下，虚拟机无法申请更多的空间创建线程了，则会抛出此异常。PS：这里动手验证可能会导致操作系统假死，就不验证了。\n\n#### 动手验证\n\n```java\n  /*jvm options：-Xss2M*/\n  public static void testCreateThreadOutOfMemoryError() {\n    while (true) {\n      Thread t =\n          new Thread(\n              new Runnable() {\n                @Override\n                public void run() {\n                  while (true) {}\n                }\n              });\n      t.start();\n    }\n  }\n```\n\n#### 效果\n\n```java\njava.lang.OutOfMemoryError: unable to create new native thread\n```\n\n### 三、方法区和运行时常量池溢出\n\n运行时常量池是方法区的一部分，因此这两个区域的溢出测试放在一起进行。\n\n#### 1、字符串常量池小考点\n\n`String.intern()`是一个Native方法，作用是如果字符串常量池中已经存在这个等于`String对象`的字符串，则直接返回池中该字符串对应的对象；否则，将此`String对象`包含的字符串添加到常量池中，并返回此对象的引用。\n\n下面一个例子在jdk1.6中打印false和false，在jdk1.8中打印出true和false，引申出一次探究：`String.intern()`在jdk1.6中会把首次遇到的字符串实例复制到永久代中，返回的是永久代中这个对象的引用，而`StringBuilder`对象创建的字符串对象在Java堆中，必然不是同一个实例，所以打印出来false和false。在JDK1.8中，intern()方法不再复制实例，而是在字符串常量池中保存首次出现的实例引用，所以`intern()`返回的对象和`StringBuilder`创建的字符串对象是同一个实例，所以第一个返回true。第二个返回false是因为在虚拟机启动的过程中，`rt.jar`包中的`sun.msic.Version`类初始化了一个\"java\"字符串对象，导致此时字符串常量池中已经存在对这个字符串的引用了，下次`StringBuilder`在Java堆上创建字符串对象后，堆上的\"java\"对象和常量池中引用的初始化\"java\"对象不是同一个实例，导致返回false。\n\n```java\n  public static void testStringIntern() {\n    String str1 = new StringBuilder(\"计算机\").append(\"软件\").toString();\n    System.out.println(str1 == str1.intern());//true\n    String str2 = new StringBuilder(\"ja\").append(\"va\").toString();\n    System.out.println(str2 == str2.intern());//false\n  }\n```\n\n#### 2、字符串常量池溢出的基本思路就是不停的向容器中添加新的字符串对象。\n\n#### 动手验证\n\n| 参数                       | 解释                                                                                                                                                                |\n|:------------------------ | ----------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| -Xmx50m                  | 堆上限设置为50m                                                                                                                                                         |\n| -XX:MaxMetaspaceSize=10m | 元空间上限10m                                                                                                                                                          |\n| -XX:-UseGCOverheadLimit  | GC支出超标限制(超过98%的时间用来做GC并且回收了不到2%的堆内存) ，`-XX:-UseGCOverheadLimit`表示不限制也就是当用了98%的时间来进行垃圾回收却收集了不到2%的堆内存时不抛出`java.lang.OutOfMemoryError: GC overhead limit exceeded`异常 |\n\n```java\n  /*jvm options：-Xmx20m -XX:MaxMetaspaceSize=10m -XX:-UseGCOverheadLimit*/\n  public static void testStringConstantPoolOom() {\n    List<String> list = new ArrayList<String>();\n    int strCount = 0;\n    while (true) {\n      list.add(String.valueOf(strCount++).intern());\n    }\n  }\n```\n\n#### 现象\n\n![](oom异常2.png)\n\n#### 3、方法区包含了Class的相关信息，例如类名、修饰符、常量池、字段描述、方法描述等。需要让方法区溢出的基本思路是产生大量的类去填满方法区。下面例子采用CGLib去生成类的方式让方法区溢出。\n\n#### 动手验证\n\n```java\n  /*jvm options：-XX:MaxMetaspaceSize=10M*/\n  public static void testMethodAreaOom() {\n    while (true) {\n      Enhancer enhancer = new Enhancer();\n      enhancer.setSuperclass(TestOom.class);\n      enhancer.setUseCache(false);\n      enhancer.setCallback(\n          new MethodInterceptor() {\n            @Override\n            public Object intercept(\n                Object o, Method method, Object[] objects, MethodProxy methodProxy)\n                throws Throwable {\n              return methodProxy.invokeSuper(o, objects);\n            }\n          });\n      enhancer.create();\n    }\n  }\n\n  static class TestOom {}\n```\n\n#### 现象\n\n![](oom异常3.png)\n\n### 四、本机直接内存溢出\n\nDirectMemory容量可以通过`-XX:MaxDirectMemorySize`指定，如果不指定，则默认为Java堆的最大值。下面例子越过了`DirectByteBuffer`类，直接通过反射获取`Unsafe`实例进行内存分配（`Unsafe`类的`getUnsafe()`方法限制了只有引导类加载器才会返回实例，也就是设计者希望只有`rt.jar`的类才能使用`Unsafe`的功能）。虽然使用`DirectByteBuffer`分配内存也能抛出内存溢出异常，但是它抛出异常时并没有真正向操作系统申请分配内存，只是通过计算得知内存无法分配，于是手动抛出异常，真正申请分配内存的方法是`Unsafe.allocateMemory()`方法。\n\n#### 动手验证\n\n```java\n  static final int _1GB = 1024 * 1024 * 1024;\n   /*jvm options：-Xmx20M -Xms20M -XX:MaxDirectMemorySize=10M*/\n  public static void testDirectMemoryAreaOom() throws IllegalAccessException {\n    int i = 0;\n    try {\n      Field field = Unsafe.class.getDeclaredFields()[0];\n      field.setAccessible(true);\n      Unsafe unsafe = (Unsafe) field.get(null);\n      while (true) {\n        unsafe.allocateMemory(_1GB);\n        i++;\n      }\n    } catch (Exception e) {\n      e.printStackTrace();\n    } finally {\n      System.out.println(\"分配次数：\" + i);\n    }\n  }\n```\n\n#### 现象\n\n![](oom异常4.png)\n\n这里的MaxDirectMemorySize参数没有起作用。\n\n\n","source":"_posts/jvm笔记-上篇.md","raw":"---\nlayout: shoka\ntitle: jvm笔记-上篇\ndate: 2021-11-20 17:39:49\ntags:\n\n---\n\n# JVM笔记-上篇\n\n## Java的几种OOM情况\n\n### 一、堆溢出\n\nJava堆用于存储对象实例，只要不断的创建对象，并保证GC Roots到对象之间有可达路径来避免垃圾回收机制清除这些对象，那么在对象数量达到最大堆容量后就会产生内存溢出异常。下面代码限制Java堆的大小为10M，通过参数-XX:HeapDumpOnOutOfMemoryError可以实现虚拟机在出现内存溢出的情况下将当前内存堆栈快照dump出来以供后续分析需要。\n\n#### 动手验证\n\n```java\npublic class OomTest {\n  public static void main(String[] args) {\n    testHeapSpaceOom();\n  }\n\n  /*jvm options：-Xms10M -Xmx10M -XX:+HeapDumpOnOutOfMemoryError*/\n  public static void testHeapSpaceOom() {\n    List<OomTest> list = new ArrayList<>();\n    while (true) {\n      list.add(new OomTest());\n    }\n  }\n}\n```\n\n#### 现象\n\n![](oom异常1.png)\n\n### 二、虚拟机栈和本地方法栈溢出\n\n由于在hotspot虚拟机中不区分虚拟机栈和本地方法栈，因此栈容量只由-Xss参数设定。关于虚拟机栈和本地方法栈，在Java虚拟机规范中描述了两种异常：\n\n1. 如果线程请求的栈深度超过了虚拟机所允许的最大深度，就抛出了大家喜闻乐见的`StackOverFlowError`异常。\n\n2. 如果虚拟机在拓展栈时无法申请到足够的空间，则抛出`OutOfMemoryError`异常。\n\n#### 1、StackOverFlowError\n\n下面例子思路就是无限递归调用方法，指定-Xss参数减少栈内存容量，导致栈帧溢出。\n\n#### 动手验证\n\n```java\n  /*jvm options：-Xss160k*/\n  public static void testStackOverFlowError() {\n    try {\n      throwStackOverFlowErrorMethod();\n    } catch (Throwable t) {\n      System.out.println(\"stack length:\" + stackLength);\n      throw t;\n    }\n  }\n\n  public static void throwStackOverFlowErrorMethod() {\n    stackLength++;\n    throwStackOverFlowErrorMethod();\n  }\n```\n\n#### 效果\n\n![](oom异常5.png)\n\n#### 2、OutOfMemoryError\n\n下面例子说明了在创建线程过多的情况下，虚拟机无法申请更多的空间创建线程了，则会抛出此异常。PS：这里动手验证可能会导致操作系统假死，就不验证了。\n\n#### 动手验证\n\n```java\n  /*jvm options：-Xss2M*/\n  public static void testCreateThreadOutOfMemoryError() {\n    while (true) {\n      Thread t =\n          new Thread(\n              new Runnable() {\n                @Override\n                public void run() {\n                  while (true) {}\n                }\n              });\n      t.start();\n    }\n  }\n```\n\n#### 效果\n\n```java\njava.lang.OutOfMemoryError: unable to create new native thread\n```\n\n### 三、方法区和运行时常量池溢出\n\n运行时常量池是方法区的一部分，因此这两个区域的溢出测试放在一起进行。\n\n#### 1、字符串常量池小考点\n\n`String.intern()`是一个Native方法，作用是如果字符串常量池中已经存在这个等于`String对象`的字符串，则直接返回池中该字符串对应的对象；否则，将此`String对象`包含的字符串添加到常量池中，并返回此对象的引用。\n\n下面一个例子在jdk1.6中打印false和false，在jdk1.8中打印出true和false，引申出一次探究：`String.intern()`在jdk1.6中会把首次遇到的字符串实例复制到永久代中，返回的是永久代中这个对象的引用，而`StringBuilder`对象创建的字符串对象在Java堆中，必然不是同一个实例，所以打印出来false和false。在JDK1.8中，intern()方法不再复制实例，而是在字符串常量池中保存首次出现的实例引用，所以`intern()`返回的对象和`StringBuilder`创建的字符串对象是同一个实例，所以第一个返回true。第二个返回false是因为在虚拟机启动的过程中，`rt.jar`包中的`sun.msic.Version`类初始化了一个\"java\"字符串对象，导致此时字符串常量池中已经存在对这个字符串的引用了，下次`StringBuilder`在Java堆上创建字符串对象后，堆上的\"java\"对象和常量池中引用的初始化\"java\"对象不是同一个实例，导致返回false。\n\n```java\n  public static void testStringIntern() {\n    String str1 = new StringBuilder(\"计算机\").append(\"软件\").toString();\n    System.out.println(str1 == str1.intern());//true\n    String str2 = new StringBuilder(\"ja\").append(\"va\").toString();\n    System.out.println(str2 == str2.intern());//false\n  }\n```\n\n#### 2、字符串常量池溢出的基本思路就是不停的向容器中添加新的字符串对象。\n\n#### 动手验证\n\n| 参数                       | 解释                                                                                                                                                                |\n|:------------------------ | ----------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| -Xmx50m                  | 堆上限设置为50m                                                                                                                                                         |\n| -XX:MaxMetaspaceSize=10m | 元空间上限10m                                                                                                                                                          |\n| -XX:-UseGCOverheadLimit  | GC支出超标限制(超过98%的时间用来做GC并且回收了不到2%的堆内存) ，`-XX:-UseGCOverheadLimit`表示不限制也就是当用了98%的时间来进行垃圾回收却收集了不到2%的堆内存时不抛出`java.lang.OutOfMemoryError: GC overhead limit exceeded`异常 |\n\n```java\n  /*jvm options：-Xmx20m -XX:MaxMetaspaceSize=10m -XX:-UseGCOverheadLimit*/\n  public static void testStringConstantPoolOom() {\n    List<String> list = new ArrayList<String>();\n    int strCount = 0;\n    while (true) {\n      list.add(String.valueOf(strCount++).intern());\n    }\n  }\n```\n\n#### 现象\n\n![](oom异常2.png)\n\n#### 3、方法区包含了Class的相关信息，例如类名、修饰符、常量池、字段描述、方法描述等。需要让方法区溢出的基本思路是产生大量的类去填满方法区。下面例子采用CGLib去生成类的方式让方法区溢出。\n\n#### 动手验证\n\n```java\n  /*jvm options：-XX:MaxMetaspaceSize=10M*/\n  public static void testMethodAreaOom() {\n    while (true) {\n      Enhancer enhancer = new Enhancer();\n      enhancer.setSuperclass(TestOom.class);\n      enhancer.setUseCache(false);\n      enhancer.setCallback(\n          new MethodInterceptor() {\n            @Override\n            public Object intercept(\n                Object o, Method method, Object[] objects, MethodProxy methodProxy)\n                throws Throwable {\n              return methodProxy.invokeSuper(o, objects);\n            }\n          });\n      enhancer.create();\n    }\n  }\n\n  static class TestOom {}\n```\n\n#### 现象\n\n![](oom异常3.png)\n\n### 四、本机直接内存溢出\n\nDirectMemory容量可以通过`-XX:MaxDirectMemorySize`指定，如果不指定，则默认为Java堆的最大值。下面例子越过了`DirectByteBuffer`类，直接通过反射获取`Unsafe`实例进行内存分配（`Unsafe`类的`getUnsafe()`方法限制了只有引导类加载器才会返回实例，也就是设计者希望只有`rt.jar`的类才能使用`Unsafe`的功能）。虽然使用`DirectByteBuffer`分配内存也能抛出内存溢出异常，但是它抛出异常时并没有真正向操作系统申请分配内存，只是通过计算得知内存无法分配，于是手动抛出异常，真正申请分配内存的方法是`Unsafe.allocateMemory()`方法。\n\n#### 动手验证\n\n```java\n  static final int _1GB = 1024 * 1024 * 1024;\n   /*jvm options：-Xmx20M -Xms20M -XX:MaxDirectMemorySize=10M*/\n  public static void testDirectMemoryAreaOom() throws IllegalAccessException {\n    int i = 0;\n    try {\n      Field field = Unsafe.class.getDeclaredFields()[0];\n      field.setAccessible(true);\n      Unsafe unsafe = (Unsafe) field.get(null);\n      while (true) {\n        unsafe.allocateMemory(_1GB);\n        i++;\n      }\n    } catch (Exception e) {\n      e.printStackTrace();\n    } finally {\n      System.out.println(\"分配次数：\" + i);\n    }\n  }\n```\n\n#### 现象\n\n![](oom异常4.png)\n\n这里的MaxDirectMemorySize参数没有起作用。\n\n\n","slug":"jvm笔记-上篇","published":1,"updated":"2021-11-21T10:08:00.237Z","_id":"ckw7ue40t0000ugyrbggf0q2r","comments":1,"photos":[],"link":"","content":"<h1 id=\"jvm笔记-上篇\"><a class=\"markdownIt-Anchor\" href=\"#jvm笔记-上篇\">#</a> JVM 笔记 - 上篇</h1>\n<h2 id=\"java的几种oom情况\"><a class=\"markdownIt-Anchor\" href=\"#java的几种oom情况\">#</a> Java 的几种 OOM 情况</h2>\n<h3 id=\"一-堆溢出\"><a class=\"markdownIt-Anchor\" href=\"#一-堆溢出\">#</a> 一、堆溢出</h3>\n<p>Java 堆用于存储对象实例，只要不断的创建对象，并保证 GC Roots 到对象之间有可达路径来避免垃圾回收机制清除这些对象，那么在对象数量达到最大堆容量后就会产生内存溢出异常。下面代码限制 Java 堆的大小为 10M，通过参数 - XX:HeapDumpOnOutOfMemoryError 可以实现虚拟机在出现内存溢出的情况下将当前内存堆栈快照 dump 出来以供后续分析需要。</p>\n<h4 id=\"动手验证\"><a class=\"markdownIt-Anchor\" href=\"#动手验证\">#</a> 动手验证</h4>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OomTest</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    testHeapSpaceOom();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/*jvm options：-Xms10M -Xmx10M -XX:+HeapDumpOnOutOfMemoryError*/</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">testHeapSpaceOom</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    List&lt;OomTest&gt; list = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">      list.add(<span class=\"keyword\">new</span> OomTest());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"现象\"><a class=\"markdownIt-Anchor\" href=\"#现象\">#</a> 现象</h4>\n<p><img data-src=\"oom%E5%BC%82%E5%B8%B81.png\" alt=\"\"></p>\n<h3 id=\"二-虚拟机栈和本地方法栈溢出\"><a class=\"markdownIt-Anchor\" href=\"#二-虚拟机栈和本地方法栈溢出\">#</a> 二、虚拟机栈和本地方法栈溢出</h3>\n<p>由于在 hotspot 虚拟机中不区分虚拟机栈和本地方法栈，因此栈容量只由 - Xss 参数设定。关于虚拟机栈和本地方法栈，在 Java 虚拟机规范中描述了两种异常：</p>\n<ol>\n<li>\n<p>如果线程请求的栈深度超过了虚拟机所允许的最大深度，就抛出了大家喜闻乐见的 <code>StackOverFlowError</code>  异常。</p>\n</li>\n<li>\n<p>如果虚拟机在拓展栈时无法申请到足够的空间，则抛出 <code>OutOfMemoryError</code>  异常。</p>\n</li>\n</ol>\n<h4 id=\"1-stackoverflowerror\"><a class=\"markdownIt-Anchor\" href=\"#1-stackoverflowerror\">#</a> 1、StackOverFlowError</h4>\n<p>下面例子思路就是无限递归调用方法，指定 - Xss 参数减少栈内存容量，导致栈帧溢出。</p>\n<h4 id=\"动手验证-2\"><a class=\"markdownIt-Anchor\" href=\"#动手验证-2\">#</a> 动手验证</h4>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*jvm options：-Xss160k*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">testStackOverFlowError</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    throwStackOverFlowErrorMethod();</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span> (Throwable t) &#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;stack length:&quot;</span> + stackLength);</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> t;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">throwStackOverFlowErrorMethod</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  stackLength++;</span><br><span class=\"line\">  throwStackOverFlowErrorMethod();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"效果\"><a class=\"markdownIt-Anchor\" href=\"#效果\">#</a> 效果</h4>\n<p><img data-src=\"oom%E5%BC%82%E5%B8%B85.png\" alt=\"\"></p>\n<h4 id=\"2-outofmemoryerror\"><a class=\"markdownIt-Anchor\" href=\"#2-outofmemoryerror\">#</a> 2、OutOfMemoryError</h4>\n<p>下面例子说明了在创建线程过多的情况下，虚拟机无法申请更多的空间创建线程了，则会抛出此异常。PS：这里动手验证可能会导致操作系统假死，就不验证了。</p>\n<h4 id=\"动手验证-3\"><a class=\"markdownIt-Anchor\" href=\"#动手验证-3\">#</a> 动手验证</h4>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*jvm options：-Xss2M*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">testCreateThreadOutOfMemoryError</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">    Thread t =</span><br><span class=\"line\">        <span class=\"keyword\">new</span> Thread(</span><br><span class=\"line\">            <span class=\"keyword\">new</span> Runnable() &#123;</span><br><span class=\"line\">              <span class=\"meta\">@Override</span></span><br><span class=\"line\">              <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;&#125;</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">    t.start();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"效果-2\"><a class=\"markdownIt-Anchor\" href=\"#效果-2\">#</a> 效果</h4>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java.lang.OutOfMemoryError: unable to create <span class=\"keyword\">new</span> <span class=\"keyword\">native</span> thread</span><br></pre></td></tr></table></figure>\n<h3 id=\"三-方法区和运行时常量池溢出\"><a class=\"markdownIt-Anchor\" href=\"#三-方法区和运行时常量池溢出\">#</a> 三、方法区和运行时常量池溢出</h3>\n<p>运行时常量池是方法区的一部分，因此这两个区域的溢出测试放在一起进行。</p>\n<h4 id=\"1-字符串常量池小考点\"><a class=\"markdownIt-Anchor\" href=\"#1-字符串常量池小考点\">#</a> 1、字符串常量池小考点</h4>\n<p><code>String.intern()</code>  是一个 Native 方法，作用是如果字符串常量池中已经存在这个等于 <code>String对象</code> 的字符串，则直接返回池中该字符串对应的对象；否则，将此 <code>String对象</code> 包含的字符串添加到常量池中，并返回此对象的引用。</p>\n<p>下面一个例子在 jdk1.6 中打印 false 和 false，在 jdk1.8 中打印出 true 和 false，引申出一次探究： <code>String.intern()</code>  在 jdk1.6 中会把首次遇到的字符串实例复制到永久代中，返回的是永久代中这个对象的引用，而 <code>StringBuilder</code>  对象创建的字符串对象在 Java 堆中，必然不是同一个实例，所以打印出来 false 和 false。在 JDK1.8 中，intern () 方法不再复制实例，而是在字符串常量池中保存首次出现的实例引用，所以 <code>intern()</code>  返回的对象和 <code>StringBuilder</code>  创建的字符串对象是同一个实例，所以第一个返回 true。第二个返回 false 是因为在虚拟机启动的过程中， <code>rt.jar</code>  包中的 <code>sun.msic.Version</code>  类初始化了一个 &quot;java&quot; 字符串对象，导致此时字符串常量池中已经存在对这个字符串的引用了，下次 <code>StringBuilder</code>  在 Java 堆上创建字符串对象后，堆上的 &quot;java&quot; 对象和常量池中引用的初始化 &quot;java&quot; 对象不是同一个实例，导致返回 false。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">testStringIntern</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  String str1 = <span class=\"keyword\">new</span> StringBuilder(<span class=\"string\">&quot;计算机&quot;</span>).append(<span class=\"string\">&quot;软件&quot;</span>).toString();</span><br><span class=\"line\">  System.out.println(str1 == str1.intern());<span class=\"comment\">//true</span></span><br><span class=\"line\">  String str2 = <span class=\"keyword\">new</span> StringBuilder(<span class=\"string\">&quot;ja&quot;</span>).append(<span class=\"string\">&quot;va&quot;</span>).toString();</span><br><span class=\"line\">  System.out.println(str2 == str2.intern());<span class=\"comment\">//false</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-字符串常量池溢出的基本思路就是不停的向容器中添加新的字符串对象\"><a class=\"markdownIt-Anchor\" href=\"#2-字符串常量池溢出的基本思路就是不停的向容器中添加新的字符串对象\">#</a> 2、字符串常量池溢出的基本思路就是不停的向容器中添加新的字符串对象。</h4>\n<h4 id=\"动手验证-4\"><a class=\"markdownIt-Anchor\" href=\"#动手验证-4\">#</a> 动手验证</h4>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">参数</th>\n<th>解释</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">-Xmx50m</td>\n<td>堆上限设置为 50m</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">-XX:MaxMetaspaceSize=10m</td>\n<td>元空间上限 10m</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">-XX:-UseGCOverheadLimit</td>\n<td>GC 支出超标限制 (超过 98% 的时间用来做 GC 并且回收了不到 2% 的堆内存) ， <code>-XX:-UseGCOverheadLimit</code>  表示不限制也就是当用了 98% 的时间来进行垃圾回收却收集了不到 2% 的堆内存时不抛出 <code>java.lang.OutOfMemoryError: GC overhead limit exceeded</code>  异常</td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*jvm options：-Xmx20m -XX:MaxMetaspaceSize=10m -XX:-UseGCOverheadLimit*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">testStringConstantPoolOom</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  List&lt;String&gt; list = <span class=\"keyword\">new</span> ArrayList&lt;String&gt;();</span><br><span class=\"line\">  <span class=\"keyword\">int</span> strCount = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">    list.add(String.valueOf(strCount++).intern());</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"现象-2\"><a class=\"markdownIt-Anchor\" href=\"#现象-2\">#</a> 现象</h4>\n<p><img data-src=\"oom%E5%BC%82%E5%B8%B82.png\" alt=\"\"></p>\n<h4 id=\"3-方法区包含了class的相关信息例如类名-修饰符-常量池-字段描述-方法描述等-需要让方法区溢出的基本思路是产生大量的类去填满方法区-下面例子采用cglib去生成类的方式让方法区溢出\"><a class=\"markdownIt-Anchor\" href=\"#3-方法区包含了class的相关信息例如类名-修饰符-常量池-字段描述-方法描述等-需要让方法区溢出的基本思路是产生大量的类去填满方法区-下面例子采用cglib去生成类的方式让方法区溢出\">#</a> 3、方法区包含了 Class 的相关信息，例如类名、修饰符、常量池、字段描述、方法描述等。需要让方法区溢出的基本思路是产生大量的类去填满方法区。下面例子采用 CGLib 去生成类的方式让方法区溢出。</h4>\n<h4 id=\"动手验证-5\"><a class=\"markdownIt-Anchor\" href=\"#动手验证-5\">#</a> 动手验证</h4>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*jvm options：-XX:MaxMetaspaceSize=10M*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">testMethodAreaOom</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">    Enhancer enhancer = <span class=\"keyword\">new</span> Enhancer();</span><br><span class=\"line\">    enhancer.setSuperclass(TestOom.class);</span><br><span class=\"line\">    enhancer.setUseCache(<span class=\"keyword\">false</span>);</span><br><span class=\"line\">    enhancer.setCallback(</span><br><span class=\"line\">        <span class=\"keyword\">new</span> MethodInterceptor() &#123;</span><br><span class=\"line\">          <span class=\"meta\">@Override</span></span><br><span class=\"line\">          <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">intercept</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">              Object o, Method method, Object[] objects, MethodProxy methodProxy)</span></span></span><br><span class=\"line\"><span class=\"function\">              <span class=\"keyword\">throws</span> Throwable </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> methodProxy.invokeSuper(o, objects);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    enhancer.create();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestOom</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"现象-3\"><a class=\"markdownIt-Anchor\" href=\"#现象-3\">#</a> 现象</h4>\n<p><img data-src=\"oom%E5%BC%82%E5%B8%B83.png\" alt=\"\"></p>\n<h3 id=\"四-本机直接内存溢出\"><a class=\"markdownIt-Anchor\" href=\"#四-本机直接内存溢出\">#</a> 四、本机直接内存溢出</h3>\n<p>DirectMemory 容量可以通过 <code>-XX:MaxDirectMemorySize</code>  指定，如果不指定，则默认为 Java 堆的最大值。下面例子越过了 <code>DirectByteBuffer</code>  类，直接通过反射获取 <code>Unsafe</code>  实例进行内存分配（ <code>Unsafe</code>  类的 <code>getUnsafe()</code>  方法限制了只有引导类加载器才会返回实例，也就是设计者希望只有 <code>rt.jar</code>  的类才能使用 <code>Unsafe</code>  的功能）。虽然使用 <code>DirectByteBuffer</code>  分配内存也能抛出内存溢出异常，但是它抛出异常时并没有真正向操作系统申请分配内存，只是通过计算得知内存无法分配，于是手动抛出异常，真正申请分配内存的方法是 <code>Unsafe.allocateMemory()</code>  方法。</p>\n<h4 id=\"动手验证-6\"><a class=\"markdownIt-Anchor\" href=\"#动手验证-6\">#</a> 动手验证</h4>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> _1GB = <span class=\"number\">1024</span> * <span class=\"number\">1024</span> * <span class=\"number\">1024</span>;</span><br><span class=\"line\"> <span class=\"comment\">/*jvm options：-Xmx20M -Xms20M -XX:MaxDirectMemorySize=10M*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">testDirectMemoryAreaOom</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IllegalAccessException </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    Field field = Unsafe.class.getDeclaredFields()[<span class=\"number\">0</span>];</span><br><span class=\"line\">    field.setAccessible(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">    Unsafe unsafe = (Unsafe) field.get(<span class=\"keyword\">null</span>);</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">      unsafe.allocateMemory(_1GB);</span><br><span class=\"line\">      i++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">    e.printStackTrace();</span><br><span class=\"line\">  &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;分配次数：&quot;</span> + i);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"现象-4\"><a class=\"markdownIt-Anchor\" href=\"#现象-4\">#</a> 现象</h4>\n<p><img data-src=\"oom%E5%BC%82%E5%B8%B84.png\" alt=\"\"></p>\n<p>这里的 MaxDirectMemorySize 参数没有起作用。</p>\n","site":{"data":{"languages":{"zh-CN":{"post":{"copyright":{"author":"本文博主"}}},"en":{"menu":{"travellings":"Travellings"}}}}},"length":4473,"excerpt":"","more":"<h1 id=\"jvm笔记-上篇\"><a class=\"markdownIt-Anchor\" href=\"#jvm笔记-上篇\">#</a> JVM 笔记 - 上篇</h1>\n<h2 id=\"java的几种oom情况\"><a class=\"markdownIt-Anchor\" href=\"#java的几种oom情况\">#</a> Java 的几种 OOM 情况</h2>\n<h3 id=\"一-堆溢出\"><a class=\"markdownIt-Anchor\" href=\"#一-堆溢出\">#</a> 一、堆溢出</h3>\n<p>Java 堆用于存储对象实例，只要不断的创建对象，并保证 GC Roots 到对象之间有可达路径来避免垃圾回收机制清除这些对象，那么在对象数量达到最大堆容量后就会产生内存溢出异常。下面代码限制 Java 堆的大小为 10M，通过参数 - XX:HeapDumpOnOutOfMemoryError 可以实现虚拟机在出现内存溢出的情况下将当前内存堆栈快照 dump 出来以供后续分析需要。</p>\n<h4 id=\"动手验证\"><a class=\"markdownIt-Anchor\" href=\"#动手验证\">#</a> 动手验证</h4>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OomTest</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    testHeapSpaceOom();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/*jvm options：-Xms10M -Xmx10M -XX:+HeapDumpOnOutOfMemoryError*/</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">testHeapSpaceOom</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    List&lt;OomTest&gt; list = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">      list.add(<span class=\"keyword\">new</span> OomTest());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"现象\"><a class=\"markdownIt-Anchor\" href=\"#现象\">#</a> 现象</h4>\n<p><img data-src=\"oom%E5%BC%82%E5%B8%B81.png\" alt=\"\"></p>\n<h3 id=\"二-虚拟机栈和本地方法栈溢出\"><a class=\"markdownIt-Anchor\" href=\"#二-虚拟机栈和本地方法栈溢出\">#</a> 二、虚拟机栈和本地方法栈溢出</h3>\n<p>由于在 hotspot 虚拟机中不区分虚拟机栈和本地方法栈，因此栈容量只由 - Xss 参数设定。关于虚拟机栈和本地方法栈，在 Java 虚拟机规范中描述了两种异常：</p>\n<ol>\n<li>\n<p>如果线程请求的栈深度超过了虚拟机所允许的最大深度，就抛出了大家喜闻乐见的 <code>StackOverFlowError</code>  异常。</p>\n</li>\n<li>\n<p>如果虚拟机在拓展栈时无法申请到足够的空间，则抛出 <code>OutOfMemoryError</code>  异常。</p>\n</li>\n</ol>\n<h4 id=\"1-stackoverflowerror\"><a class=\"markdownIt-Anchor\" href=\"#1-stackoverflowerror\">#</a> 1、StackOverFlowError</h4>\n<p>下面例子思路就是无限递归调用方法，指定 - Xss 参数减少栈内存容量，导致栈帧溢出。</p>\n<h4 id=\"动手验证-2\"><a class=\"markdownIt-Anchor\" href=\"#动手验证-2\">#</a> 动手验证</h4>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*jvm options：-Xss160k*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">testStackOverFlowError</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    throwStackOverFlowErrorMethod();</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span> (Throwable t) &#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;stack length:&quot;</span> + stackLength);</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> t;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">throwStackOverFlowErrorMethod</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  stackLength++;</span><br><span class=\"line\">  throwStackOverFlowErrorMethod();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"效果\"><a class=\"markdownIt-Anchor\" href=\"#效果\">#</a> 效果</h4>\n<p><img data-src=\"oom%E5%BC%82%E5%B8%B85.png\" alt=\"\"></p>\n<h4 id=\"2-outofmemoryerror\"><a class=\"markdownIt-Anchor\" href=\"#2-outofmemoryerror\">#</a> 2、OutOfMemoryError</h4>\n<p>下面例子说明了在创建线程过多的情况下，虚拟机无法申请更多的空间创建线程了，则会抛出此异常。PS：这里动手验证可能会导致操作系统假死，就不验证了。</p>\n<h4 id=\"动手验证-3\"><a class=\"markdownIt-Anchor\" href=\"#动手验证-3\">#</a> 动手验证</h4>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*jvm options：-Xss2M*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">testCreateThreadOutOfMemoryError</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">    Thread t =</span><br><span class=\"line\">        <span class=\"keyword\">new</span> Thread(</span><br><span class=\"line\">            <span class=\"keyword\">new</span> Runnable() &#123;</span><br><span class=\"line\">              <span class=\"meta\">@Override</span></span><br><span class=\"line\">              <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;&#125;</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">    t.start();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"效果-2\"><a class=\"markdownIt-Anchor\" href=\"#效果-2\">#</a> 效果</h4>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java.lang.OutOfMemoryError: unable to create <span class=\"keyword\">new</span> <span class=\"keyword\">native</span> thread</span><br></pre></td></tr></table></figure>\n<h3 id=\"三-方法区和运行时常量池溢出\"><a class=\"markdownIt-Anchor\" href=\"#三-方法区和运行时常量池溢出\">#</a> 三、方法区和运行时常量池溢出</h3>\n<p>运行时常量池是方法区的一部分，因此这两个区域的溢出测试放在一起进行。</p>\n<h4 id=\"1-字符串常量池小考点\"><a class=\"markdownIt-Anchor\" href=\"#1-字符串常量池小考点\">#</a> 1、字符串常量池小考点</h4>\n<p><code>String.intern()</code>  是一个 Native 方法，作用是如果字符串常量池中已经存在这个等于 <code>String对象</code> 的字符串，则直接返回池中该字符串对应的对象；否则，将此 <code>String对象</code> 包含的字符串添加到常量池中，并返回此对象的引用。</p>\n<p>下面一个例子在 jdk1.6 中打印 false 和 false，在 jdk1.8 中打印出 true 和 false，引申出一次探究： <code>String.intern()</code>  在 jdk1.6 中会把首次遇到的字符串实例复制到永久代中，返回的是永久代中这个对象的引用，而 <code>StringBuilder</code>  对象创建的字符串对象在 Java 堆中，必然不是同一个实例，所以打印出来 false 和 false。在 JDK1.8 中，intern () 方法不再复制实例，而是在字符串常量池中保存首次出现的实例引用，所以 <code>intern()</code>  返回的对象和 <code>StringBuilder</code>  创建的字符串对象是同一个实例，所以第一个返回 true。第二个返回 false 是因为在虚拟机启动的过程中， <code>rt.jar</code>  包中的 <code>sun.msic.Version</code>  类初始化了一个 &quot;java&quot; 字符串对象，导致此时字符串常量池中已经存在对这个字符串的引用了，下次 <code>StringBuilder</code>  在 Java 堆上创建字符串对象后，堆上的 &quot;java&quot; 对象和常量池中引用的初始化 &quot;java&quot; 对象不是同一个实例，导致返回 false。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">testStringIntern</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  String str1 = <span class=\"keyword\">new</span> StringBuilder(<span class=\"string\">&quot;计算机&quot;</span>).append(<span class=\"string\">&quot;软件&quot;</span>).toString();</span><br><span class=\"line\">  System.out.println(str1 == str1.intern());<span class=\"comment\">//true</span></span><br><span class=\"line\">  String str2 = <span class=\"keyword\">new</span> StringBuilder(<span class=\"string\">&quot;ja&quot;</span>).append(<span class=\"string\">&quot;va&quot;</span>).toString();</span><br><span class=\"line\">  System.out.println(str2 == str2.intern());<span class=\"comment\">//false</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-字符串常量池溢出的基本思路就是不停的向容器中添加新的字符串对象\"><a class=\"markdownIt-Anchor\" href=\"#2-字符串常量池溢出的基本思路就是不停的向容器中添加新的字符串对象\">#</a> 2、字符串常量池溢出的基本思路就是不停的向容器中添加新的字符串对象。</h4>\n<h4 id=\"动手验证-4\"><a class=\"markdownIt-Anchor\" href=\"#动手验证-4\">#</a> 动手验证</h4>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">参数</th>\n<th>解释</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">-Xmx50m</td>\n<td>堆上限设置为 50m</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">-XX:MaxMetaspaceSize=10m</td>\n<td>元空间上限 10m</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">-XX:-UseGCOverheadLimit</td>\n<td>GC 支出超标限制 (超过 98% 的时间用来做 GC 并且回收了不到 2% 的堆内存) ， <code>-XX:-UseGCOverheadLimit</code>  表示不限制也就是当用了 98% 的时间来进行垃圾回收却收集了不到 2% 的堆内存时不抛出 <code>java.lang.OutOfMemoryError: GC overhead limit exceeded</code>  异常</td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*jvm options：-Xmx20m -XX:MaxMetaspaceSize=10m -XX:-UseGCOverheadLimit*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">testStringConstantPoolOom</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  List&lt;String&gt; list = <span class=\"keyword\">new</span> ArrayList&lt;String&gt;();</span><br><span class=\"line\">  <span class=\"keyword\">int</span> strCount = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">    list.add(String.valueOf(strCount++).intern());</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"现象-2\"><a class=\"markdownIt-Anchor\" href=\"#现象-2\">#</a> 现象</h4>\n<p><img data-src=\"oom%E5%BC%82%E5%B8%B82.png\" alt=\"\"></p>\n<h4 id=\"3-方法区包含了class的相关信息例如类名-修饰符-常量池-字段描述-方法描述等-需要让方法区溢出的基本思路是产生大量的类去填满方法区-下面例子采用cglib去生成类的方式让方法区溢出\"><a class=\"markdownIt-Anchor\" href=\"#3-方法区包含了class的相关信息例如类名-修饰符-常量池-字段描述-方法描述等-需要让方法区溢出的基本思路是产生大量的类去填满方法区-下面例子采用cglib去生成类的方式让方法区溢出\">#</a> 3、方法区包含了 Class 的相关信息，例如类名、修饰符、常量池、字段描述、方法描述等。需要让方法区溢出的基本思路是产生大量的类去填满方法区。下面例子采用 CGLib 去生成类的方式让方法区溢出。</h4>\n<h4 id=\"动手验证-5\"><a class=\"markdownIt-Anchor\" href=\"#动手验证-5\">#</a> 动手验证</h4>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*jvm options：-XX:MaxMetaspaceSize=10M*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">testMethodAreaOom</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">    Enhancer enhancer = <span class=\"keyword\">new</span> Enhancer();</span><br><span class=\"line\">    enhancer.setSuperclass(TestOom.class);</span><br><span class=\"line\">    enhancer.setUseCache(<span class=\"keyword\">false</span>);</span><br><span class=\"line\">    enhancer.setCallback(</span><br><span class=\"line\">        <span class=\"keyword\">new</span> MethodInterceptor() &#123;</span><br><span class=\"line\">          <span class=\"meta\">@Override</span></span><br><span class=\"line\">          <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">intercept</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">              Object o, Method method, Object[] objects, MethodProxy methodProxy)</span></span></span><br><span class=\"line\"><span class=\"function\">              <span class=\"keyword\">throws</span> Throwable </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> methodProxy.invokeSuper(o, objects);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    enhancer.create();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestOom</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"现象-3\"><a class=\"markdownIt-Anchor\" href=\"#现象-3\">#</a> 现象</h4>\n<p><img data-src=\"oom%E5%BC%82%E5%B8%B83.png\" alt=\"\"></p>\n<h3 id=\"四-本机直接内存溢出\"><a class=\"markdownIt-Anchor\" href=\"#四-本机直接内存溢出\">#</a> 四、本机直接内存溢出</h3>\n<p>DirectMemory 容量可以通过 <code>-XX:MaxDirectMemorySize</code>  指定，如果不指定，则默认为 Java 堆的最大值。下面例子越过了 <code>DirectByteBuffer</code>  类，直接通过反射获取 <code>Unsafe</code>  实例进行内存分配（ <code>Unsafe</code>  类的 <code>getUnsafe()</code>  方法限制了只有引导类加载器才会返回实例，也就是设计者希望只有 <code>rt.jar</code>  的类才能使用 <code>Unsafe</code>  的功能）。虽然使用 <code>DirectByteBuffer</code>  分配内存也能抛出内存溢出异常，但是它抛出异常时并没有真正向操作系统申请分配内存，只是通过计算得知内存无法分配，于是手动抛出异常，真正申请分配内存的方法是 <code>Unsafe.allocateMemory()</code>  方法。</p>\n<h4 id=\"动手验证-6\"><a class=\"markdownIt-Anchor\" href=\"#动手验证-6\">#</a> 动手验证</h4>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> _1GB = <span class=\"number\">1024</span> * <span class=\"number\">1024</span> * <span class=\"number\">1024</span>;</span><br><span class=\"line\"> <span class=\"comment\">/*jvm options：-Xmx20M -Xms20M -XX:MaxDirectMemorySize=10M*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">testDirectMemoryAreaOom</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IllegalAccessException </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    Field field = Unsafe.class.getDeclaredFields()[<span class=\"number\">0</span>];</span><br><span class=\"line\">    field.setAccessible(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">    Unsafe unsafe = (Unsafe) field.get(<span class=\"keyword\">null</span>);</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">      unsafe.allocateMemory(_1GB);</span><br><span class=\"line\">      i++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">    e.printStackTrace();</span><br><span class=\"line\">  &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;分配次数：&quot;</span> + i);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"现象-4\"><a class=\"markdownIt-Anchor\" href=\"#现象-4\">#</a> 现象</h4>\n<p><img data-src=\"oom%E5%BC%82%E5%B8%B84.png\" alt=\"\"></p>\n<p>这里的 MaxDirectMemorySize 参数没有起作用。</p>\n"}],"PostAsset":[{"_id":"source/_posts/Java并发笔记-上篇/locksupport代码结果1.png","slug":"locksupport代码结果1.png","post":"ckw1i535800009syr7qal3a3p","modified":0,"renderable":0},{"_id":"source/_posts/Java并发笔记-上篇/locksupport代码结果2.png","slug":"locksupport代码结果2.png","post":"ckw1i535800009syr7qal3a3p","modified":0,"renderable":0},{"_id":"source/_posts/Java并发笔记-上篇/locksupport代码结果3.png","slug":"locksupport代码结果3.png","post":"ckw1i535800009syr7qal3a3p","modified":0,"renderable":0},{"_id":"source/_posts/Java并发笔记-上篇/locksupport代码结果4.png","slug":"locksupport代码结果4.png","post":"ckw1i535800009syr7qal3a3p","modified":0,"renderable":0},{"_id":"source/_posts/Java并发笔记-上篇/locksupport代码结果5.png","slug":"locksupport代码结果5.png","post":"ckw1i535800009syr7qal3a3p","modified":0,"renderable":0},{"_id":"source/_posts/雪花算法/代码效果图.png","slug":"代码效果图.png","post":"ckw1i535f00029syr5w5zf21i","modified":0,"renderable":0},{"_id":"source/_posts/雪花算法/雪花算法原理.png","slug":"雪花算法原理.png","post":"ckw1i535f00029syr5w5zf21i","modified":0,"renderable":0},{"_id":"source/_posts/Seata笔记/seata架构.png","slug":"seata架构.png","post":"ckw1i535g00039syrbo2act8w","modified":0,"renderable":0},{"_id":"source/_posts/Seata笔记/seata模型流程.png","slug":"seata模型流程.png","post":"ckw1i535g00039syrbo2act8w","modified":0,"renderable":0},{"_id":"source/_posts/Seata笔记/事务二阶段执行流程.png","slug":"事务二阶段执行流程.png","post":"ckw1i535g00039syrbo2act8w","modified":0,"renderable":0},{"_id":"source/_posts/Seata笔记/未加全局事务的数据库情况.png","slug":"未加全局事务的数据库情况.png","post":"ckw1i535g00039syrbo2act8w","modified":0,"renderable":0},{"_id":"source/_posts/jvm笔记-上篇/oom异常1.png","slug":"oom异常1.png","post":"ckw7ue40t0000ugyrbggf0q2r","modified":0,"renderable":0},{"_id":"source/_posts/jvm笔记-上篇/oom异常2.png","slug":"oom异常2.png","post":"ckw7ue40t0000ugyrbggf0q2r","modified":0,"renderable":0},{"_id":"source/_posts/jvm笔记-上篇/oom异常3.png","slug":"oom异常3.png","post":"ckw7ue40t0000ugyrbggf0q2r","modified":0,"renderable":0},{"_id":"source/_posts/jvm笔记-上篇/oom异常4.png","slug":"oom异常4.png","post":"ckw7ue40t0000ugyrbggf0q2r","modified":0,"renderable":0},{"_id":"source/_posts/jvm笔记-上篇/oom异常5.png","slug":"oom异常5.png","post":"ckw7ue40t0000ugyrbggf0q2r","modified":0,"renderable":0},{"_id":"source/_posts/Java并发笔记-上篇/aqs-1.png","slug":"aqs-1.png","post":"ckw1i535800009syr7qal3a3p","modified":0,"renderable":0},{"_id":"source/_posts/Java并发笔记-上篇/aqs-2.png","slug":"aqs-2.png","post":"ckw1i535800009syr7qal3a3p","modified":0,"renderable":0},{"_id":"source/_posts/Java并发笔记-上篇/aqs-3.png.png","slug":"aqs-3.png.png","post":"ckw1i535800009syr7qal3a3p","modified":0,"renderable":0},{"_id":"source/_posts/Java并发笔记-上篇/aqs-4.png.png","slug":"aqs-4.png.png","post":"ckw1i535800009syr7qal3a3p","modified":0,"renderable":0},{"_id":"source/_posts/Java并发笔记-上篇/aqs-5.png","slug":"aqs-5.png","post":"ckw1i535800009syr7qal3a3p","modified":0,"renderable":0},{"_id":"source/_posts/Java并发笔记-上篇/aqs-6.png","slug":"aqs-6.png","post":"ckw1i535800009syr7qal3a3p","modified":0,"renderable":0},{"_id":"source/_posts/Java并发笔记-上篇/aqs-7.png","slug":"aqs-7.png","post":"ckw1i535800009syr7qal3a3p","modified":0,"renderable":0},{"_id":"source/_posts/Java并发笔记-上篇/aqs-8.png","slug":"aqs-8.png","post":"ckw1i535800009syr7qal3a3p","modified":0,"renderable":0},{"_id":"source/_posts/Java并发笔记-上篇/aqs-9.png","slug":"aqs-9.png","post":"ckw1i535800009syr7qal3a3p","modified":0,"renderable":0},{"_id":"source/_posts/Java并发笔记-上篇/rel-1.png","slug":"rel-1.png","post":"ckw1i535800009syr7qal3a3p","modified":0,"renderable":0},{"_id":"source/_posts/Java并发笔记-上篇/rel-10.png","slug":"rel-10.png","post":"ckw1i535800009syr7qal3a3p","modified":0,"renderable":0},{"_id":"source/_posts/Java并发笔记-上篇/rel-11.png","slug":"rel-11.png","post":"ckw1i535800009syr7qal3a3p","modified":0,"renderable":0},{"_id":"source/_posts/Java并发笔记-上篇/rel-12.png","slug":"rel-12.png","post":"ckw1i535800009syr7qal3a3p","modified":0,"renderable":0},{"_id":"source/_posts/Java并发笔记-上篇/rel-13.png","slug":"rel-13.png","post":"ckw1i535800009syr7qal3a3p","modified":0,"renderable":0},{"_id":"source/_posts/Java并发笔记-上篇/rel-14.png","slug":"rel-14.png","post":"ckw1i535800009syr7qal3a3p","modified":0,"renderable":0},{"_id":"source/_posts/Java并发笔记-上篇/rel-15.png","slug":"rel-15.png","post":"ckw1i535800009syr7qal3a3p","modified":0,"renderable":0},{"_id":"source/_posts/Java并发笔记-上篇/rel-16.png","slug":"rel-16.png","post":"ckw1i535800009syr7qal3a3p","modified":0,"renderable":0},{"_id":"source/_posts/Java并发笔记-上篇/rel-17.png","slug":"rel-17.png","post":"ckw1i535800009syr7qal3a3p","modified":0,"renderable":0},{"_id":"source/_posts/Java并发笔记-上篇/rel-18.png","slug":"rel-18.png","post":"ckw1i535800009syr7qal3a3p","modified":0,"renderable":0},{"_id":"source/_posts/Java并发笔记-上篇/rel-19.png","slug":"rel-19.png","post":"ckw1i535800009syr7qal3a3p","modified":0,"renderable":0},{"_id":"source/_posts/Java并发笔记-上篇/rel-2.png","slug":"rel-2.png","post":"ckw1i535800009syr7qal3a3p","modified":0,"renderable":0},{"_id":"source/_posts/Java并发笔记-上篇/rel-20.png","slug":"rel-20.png","post":"ckw1i535800009syr7qal3a3p","modified":0,"renderable":0},{"_id":"source/_posts/Java并发笔记-上篇/rel-21.png","slug":"rel-21.png","post":"ckw1i535800009syr7qal3a3p","modified":0,"renderable":0},{"_id":"source/_posts/Java并发笔记-上篇/rel-22.png","slug":"rel-22.png","post":"ckw1i535800009syr7qal3a3p","modified":0,"renderable":0},{"_id":"source/_posts/Java并发笔记-上篇/rel-25.png","slug":"rel-25.png","post":"ckw1i535800009syr7qal3a3p","modified":0,"renderable":0},{"_id":"source/_posts/Java并发笔记-上篇/rel-23.png","slug":"rel-23.png","post":"ckw1i535800009syr7qal3a3p","modified":0,"renderable":0},{"_id":"source/_posts/Java并发笔记-上篇/rel-24.png","slug":"rel-24.png","post":"ckw1i535800009syr7qal3a3p","modified":0,"renderable":0},{"_id":"source/_posts/Java并发笔记-上篇/rel-26.png","slug":"rel-26.png","post":"ckw1i535800009syr7qal3a3p","modified":0,"renderable":0},{"_id":"source/_posts/Java并发笔记-上篇/rel-27.png","slug":"rel-27.png","post":"ckw1i535800009syr7qal3a3p","modified":0,"renderable":0},{"_id":"source/_posts/Java并发笔记-上篇/rel-28.png","slug":"rel-28.png","post":"ckw1i535800009syr7qal3a3p","modified":0,"renderable":0},{"_id":"source/_posts/Java并发笔记-上篇/rel-29.png","slug":"rel-29.png","post":"ckw1i535800009syr7qal3a3p","modified":0,"renderable":0},{"_id":"source/_posts/Java并发笔记-上篇/rel-3.png","slug":"rel-3.png","post":"ckw1i535800009syr7qal3a3p","modified":0,"renderable":0},{"_id":"source/_posts/Java并发笔记-上篇/rel-30.png","slug":"rel-30.png","post":"ckw1i535800009syr7qal3a3p","modified":0,"renderable":0},{"_id":"source/_posts/Java并发笔记-上篇/rel-31.png","slug":"rel-31.png","post":"ckw1i535800009syr7qal3a3p","modified":0,"renderable":0},{"_id":"source/_posts/Java并发笔记-上篇/rel-32.png","slug":"rel-32.png","post":"ckw1i535800009syr7qal3a3p","modified":0,"renderable":0},{"_id":"source/_posts/Java并发笔记-上篇/rel-33.png","slug":"rel-33.png","post":"ckw1i535800009syr7qal3a3p","modified":0,"renderable":0},{"_id":"source/_posts/Java并发笔记-上篇/rel-34.png","slug":"rel-34.png","post":"ckw1i535800009syr7qal3a3p","modified":0,"renderable":0},{"_id":"source/_posts/Java并发笔记-上篇/rel-35.png","slug":"rel-35.png","post":"ckw1i535800009syr7qal3a3p","modified":0,"renderable":0},{"_id":"source/_posts/Java并发笔记-上篇/rel-4.png","slug":"rel-4.png","post":"ckw1i535800009syr7qal3a3p","modified":0,"renderable":0},{"_id":"source/_posts/Java并发笔记-上篇/rel-5.png","slug":"rel-5.png","post":"ckw1i535800009syr7qal3a3p","modified":0,"renderable":0},{"_id":"source/_posts/Java并发笔记-上篇/rel-6.png","slug":"rel-6.png","post":"ckw1i535800009syr7qal3a3p","modified":0,"renderable":0},{"_id":"source/_posts/Java并发笔记-上篇/rel-7.png","slug":"rel-7.png","post":"ckw1i535800009syr7qal3a3p","modified":0,"renderable":0},{"_id":"source/_posts/Java并发笔记-上篇/rel-8.png","slug":"rel-8.png","post":"ckw1i535800009syr7qal3a3p","modified":0,"renderable":0},{"_id":"source/_posts/Java并发笔记-上篇/rel-9.png","slug":"rel-9.png","post":"ckw1i535800009syr7qal3a3p","modified":0,"renderable":0}],"PostCategory":[],"PostTag":[],"Tag":[]}}